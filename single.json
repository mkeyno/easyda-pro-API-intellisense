{
    "Reference": {
        "System": {
            "Classes": {
                "SYS_ClientUrl": {
                    "description": "System / External Request Class",
                    "url": "./pro-api.sys_clienturl.html",
                    "Signature": "export declare class SYS_ClientUrl",
                    "Remark": "Initiate a secure cURL request to an external server",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "request(url, method, data, options, succeedCallFn)",
                            "Modifiers": "",
                            "Description": "Initiate an instant request",
                            "link": "pro-api.sys_clienturl.request.html",
                            "Parameters": [
                                {
                                    "Parameter": "url",
                                    "Type": "string",
                                    "Description": "Request address",
                                    "link": ""
                                },
                                {
                                    "Parameter": "method",
                                    "Type": "'GET' | 'POST' | 'HEAD' | 'PUT' | 'DELETE' | 'PATCH'",
                                    "Description": "(Optional) Request method",
                                    "link": ""
                                },
                                {
                                    "Parameter": "data",
                                    "Type": "string | Blob | FormData | URLSearchParams",
                                    "Description": "(Optional) The data sent by the request can be direct data or URLSearchParams object. If the method is HEAD or GET, this parameter will be ignored.",
                                    "link": "https://developer.mozilla.org/docs/Web/API/URLSearchParams"
                                },
                                {
                                    "Parameter": "options",
                                    "Type": "{ headers?: { [header: string]: any; }; integrity?: string; }",
                                    "Description": "(Optional) Request Parameters",
                                    "link": ""
                                },
                                {
                                    "Parameter": "succeedCallFn",
                                    "Type": "(data: Response) => void | Promise<void>",
                                    "Description": "(Optional) Function that calls back after a successful request",
                                    "link": ""
                                }
                            ],
                            "Declaration": "request(url: string, method?: 'GET' | 'POST' | 'HEAD' | 'PUT' | 'DELETE' | 'PATCH', data?: string | Blob | FormData | URLSearchParams, options?: {\n        headers?: {\n            [header: string]: any;\n        };\n        integrity?: string;\n    }, succeedCallFn?: (data: Response) => void | Promise<void>): Promise<Response>;",
                            "return": [
                                "Promise<Response>",
                                "Fetch's return result",
                                "Note that cross-origin resource sharing (CORS) needs to be allowed on the requested site, otherwise the interface will always return an error result.",
                                "For more information, see Cross-origin Resource Sharing (CORS) - MDN.",
                                "Note: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        }
                    ]
                },
                "SYS_Dialog": {
                    "description": "System / Dialog Class",
                    "url": "./pro-api.sys_dialog.html",
                    "Signature": "export declare class SYS_Dialog",
                    "Remark": "Generate dialog window",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "showConfirmationMessage(content, title, mainButtonTitle, buttonTitle, callbackFn)",
                            "Modifiers": "",
                            "Description": "A confirmation window pops up",
                            "link": "pro-api.sys_dialog.showconfirmationmessage.html",
                            "Parameters": [
                                {
                                    "Parameter": "content",
                                    "Type": "string",
                                    "Description": "Message text, support for use of \\n line breaks",
                                    "link": ""
                                },
                                {
                                    "Parameter": "title",
                                    "Type": "string",
                                    "Description": "(Optional) Popup window title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "mainButtonTitle",
                                    "Type": "string",
                                    "Description": "(Optional) Main button title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "buttonTitle",
                                    "Type": "string",
                                    "Description": "(Optional) Main button title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callbackFn",
                                    "Type": "(mainButtonClicked: boolean) => void",
                                    "Description": "(Optional) callback function",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showConfirmationMessage(content: string, title?: string, mainButtonTitle?: string, buttonTitle?: string, callbackFn?: (mainButtonClicked: boolean) => void): void;",
                            "return": [
                                "void",
                                "Shows a window with confirmation and cancel buttons"
                            ]
                        },
                        {
                            "Method": "showInformationMessage(content, title, buttonTitle)",
                            "Modifiers": "",
                            "Description": "Popup message window",
                            "link": "pro-api.sys_dialog.showinformationmessage.html",
                            "Parameters": [
                                {
                                    "Parameter": "content",
                                    "Type": "string",
                                    "Description": "Message text, support for use of \\n line breaks",
                                    "link": ""
                                },
                                {
                                    "Parameter": "title",
                                    "Type": "string",
                                    "Description": "(Optional) Popup window title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "buttonTitle",
                                    "Type": "string",
                                    "Description": "(Optional) Button title, if empty, no button is displayed",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showInformationMessage(content: string, title?: string, buttonTitle?: string): void;",
                            "return": [
                                "void",
                                "Display a text message window"
                            ]
                        },
                        {
                            "Method": "showInputDialog(beforeContent, afterContent, title, type, value, otherProperty, callbackFn)",
                            "Modifiers": "",
                            "Description": "(BETA) Pop-up input window",
                            "link": "pro-api.sys_dialog.showinputdialog.html",
                            "Parameters": [
                                {
                                    "Parameter": "beforeContent",
                                    "Type": "string",
                                    "Description": "(Optional) Text above the input box",
                                    "link": ""
                                },
                                {
                                    "Parameter": "afterContent",
                                    "Type": "string",
                                    "Description": "(Optional) Text below the input box",
                                    "link": ""
                                },
                                {
                                    "Parameter": "title",
                                    "Type": "string",
                                    "Description": "(Optional) Popup window title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "type",
                                    "Type": "'color' | 'date' | 'datetime-local' | 'email' | 'mouth' | 'number' | 'password' | 'tel' | 'text' | 'time' | 'url' | 'week'",
                                    "Description": "(Optional) Input box type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "value",
                                    "Type": "string | number",
                                    "Description": "(Optional) input box default value",
                                    "link": ""
                                },
                                {
                                    "Parameter": "otherProperty",
                                    "Type": "{ max?: number; maxlength?: number; min?: number; minlength?: number; multiple?: boolean; pattern?: RegExp; placeholder?: string; readonly?: boolean; step?: number; }",
                                    "Description": "(Optional) For other parameters, please refer to The HTML Input element.",
                                    "link": "https://developer.mozilla.org/docs/Web/HTML/Element/input#attributes"
                                },
                                {
                                    "Parameter": "callbackFn",
                                    "Type": "(value: any) => void",
                                    "Description": "(Optional) callback function",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showInputDialog(beforeContent?: string, afterContent?: string, title?: string, type?: 'color' | 'date' | 'datetime-local' | 'email' | 'mouth' | 'number' | 'password' | 'tel' | 'text' | 'time' | 'url' | 'week', value?: string | number, otherProperty?: {\n        max?: number;\n        maxlength?: number;\n        min?: number;\n        minlength?: number;\n        multiple?: boolean;\n        pattern?: RegExp;\n        placeholder?: string;\n        readonly?: boolean;\n        step?: number;\n    }, callbackFn?: (value: any) => void): void;",
                            "return": [
                                "void",
                                "The value entered by the user is always of string type unless the user clicks the **Cancel** button"
                            ]
                        },
                        {
                            "Method": "showSelectDialog(options, beforeContent, afterContent, title, defaultOption, multiple, callbackFn)",
                            "Modifiers": "",
                            "Description": "(BETA) Selection window pops up",
                            "link": "pro-api.sys_dialog.showselectdialog.html",
                            "Parameters": [
                                {
                                    "Parameter": "options",
                                    "Type": "Array<string> | Array<{ value: string; displayContent: string; }>",
                                    "Description": "The option list can be a string array or an object array. When defaultOption is not specified, the default value is the first item of the list; if it is a string array, the value of the option and the display content of the option will remain the same; if it is an object array, the value represents the value of the option, and the displayContent represents the display content of the option.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "beforeContent",
                                    "Type": "string",
                                    "Description": "(Optional) Text above the selection box",
                                    "link": ""
                                },
                                {
                                    "Parameter": "afterContent",
                                    "Type": "string",
                                    "Description": "(Optional) Text below the selection box",
                                    "link": ""
                                },
                                {
                                    "Parameter": "title",
                                    "Type": "string",
                                    "Description": "(Optional) Select box title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "defaultOption",
                                    "Type": "string",
                                    "Description": "(Optional) Default option, the value of the option is used as the matching parameter. If the multiple parameter is true, a string array needs to be passed in here",
                                    "link": ""
                                },
                                {
                                    "Parameter": "multiple",
                                    "Type": "false",
                                    "Description": "(Optional) Whether multiple selection is supported, the default is the radio box",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callbackFn",
                                    "Type": "(value: string) => void",
                                    "Description": "(Optional) callback function",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showSelectDialog(options: Array<string> | Array<{\n        value: string;\n        displayContent: string;\n    }>, beforeContent?: string, afterContent?: string, title?: string, defaultOption?: string, multiple?: false, callbackFn?: (value: string) => void): void;",
                            "return": [
                                "void",
                                "The value selected by the user corresponds to the value field in the passed options"
                            ]
                        },
                        {
                            "Method": "showSelectDialog(options, beforeContent, afterContent, title, defaultOption, multiple, callbackFn)",
                            "Modifiers": "",
                            "Description": "(BETA) Multiple selection window pops up",
                            "link": "pro-api.sys_dialog.showselectdialog_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "options",
                                    "Type": "Array<string> | Array<{ value: string; displayContent: string; }>",
                                    "Description": "The option list can be a string array or an object array. When defaultOption is not specified, the default value is the first item of the list; if it is a string array, the value of the option and the display content of the option will remain the same; if it is an object array, the value represents the value of the option, and the displayContent represents the display content of the option.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "beforeContent",
                                    "Type": "string",
                                    "Description": "(Optional) Text above the multi-check box",
                                    "link": ""
                                },
                                {
                                    "Parameter": "afterContent",
                                    "Type": "string",
                                    "Description": "(Optional) Text below the multi-select box",
                                    "link": ""
                                },
                                {
                                    "Parameter": "title",
                                    "Type": "string",
                                    "Description": "(Optional) Multiple-choice box title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "defaultOption",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Default option array, with the value of the option as the matching parameter",
                                    "link": ""
                                },
                                {
                                    "Parameter": "multiple",
                                    "Type": "true",
                                    "Description": "(Optional) Whether multiple selection is supported",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callbackFn",
                                    "Type": "(value: Array<string>) => void",
                                    "Description": "(Optional) callback function",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showSelectDialog(options: Array<string> | Array<{\n        value: string;\n        displayContent: string;\n    }>, beforeContent?: string, afterContent?: string, title?: string, defaultOption?: Array<string>, multiple?: true, callbackFn?: (value: Array<string>) => void): void;",
                            "return": [
                                "void",
                                "The set array of values \u00e2\u20ac\u2039\u00e2\u20ac\u2039selected by the user, corresponding to the value field in the passed options"
                            ]
                        }
                    ]
                },
                "SYS_Environment": {
                    "description": "System / Runtime Environment Class",
                    "url": "./pro-api.sys_environment.html",
                    "Signature": "export declare class SYS_Environment",
                    "Remark": "Obtain the operating environment parameters of the Jialichuang EDA Professional Edition",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getEditorCompliedDate()",
                            "Modifiers": "",
                            "Description": "Get editor compilation date",
                            "link": "pro-api.sys_environment.geteditorcomplieddate.html",
                            "Parameters": "",
                            "Declaration": "getEditorCompliedDate(): string;",
                            "return": [
                                "string",
                                "Editor compilation date"
                            ]
                        },
                        {
                            "Method": "getEditorCurrentVersion()",
                            "Modifiers": "",
                            "Description": "Get the current version of the editor",
                            "link": "pro-api.sys_environment.geteditorcurrentversion.html",
                            "Parameters": "",
                            "Declaration": "getEditorCurrentVersion(): string;",
                            "return": [
                                "string",
                                "Current version of the editor"
                            ]
                        },
                        {
                            "Method": "isClient()",
                            "Modifiers": "",
                            "Description": "Is it in the client environment?",
                            "link": "pro-api.sys_environment.isclient.html",
                            "Parameters": "",
                            "Declaration": "isClient(): boolean;",
                            "return": [
                                "boolean",
                                "Is it in the client environment?"
                            ]
                        },
                        {
                            "Method": "isEasyEDAProEdition()",
                            "Modifiers": "",
                            "Description": "Is it EasyEDA Pro version?",
                            "link": "pro-api.sys_environment.iseasyedaproedition.html",
                            "Parameters": "",
                            "Declaration": "isEasyEDAProEdition(): boolean;",
                            "return": [
                                "boolean",
                                "Is it EasyEDA Pro version?"
                            ]
                        },
                        {
                            "Method": "isHalfOfflineMode()",
                            "Modifiers": "",
                            "Description": "Is it semi-offline mode?",
                            "link": "pro-api.sys_environment.ishalfofflinemode.html",
                            "Parameters": "",
                            "Declaration": "isHalfOfflineMode(): boolean;",
                            "return": [
                                "boolean",
                                "Is it semi-offline mode?"
                            ]
                        },
                        {
                            "Method": "isJLCEDAProEdition()",
                            "Modifiers": "",
                            "Description": "Is it a professional version of Jialichuang EDA",
                            "link": "pro-api.sys_environment.isjlcedaproedition.html",
                            "Parameters": "",
                            "Declaration": "isJLCEDAProEdition(): boolean;",
                            "return": [
                                "boolean",
                                "Is it a professional version of Jialichuang EDA"
                            ]
                        },
                        {
                            "Method": "isOfflineMode()",
                            "Modifiers": "",
                            "Description": "Is it all offline mode?",
                            "link": "pro-api.sys_environment.isofflinemode.html",
                            "Parameters": "",
                            "Declaration": "isOfflineMode(): boolean;",
                            "return": [
                                "boolean",
                                "Is it all offline mode?"
                            ]
                        },
                        {
                            "Method": "isOnlineMode()",
                            "Modifiers": "",
                            "Description": "Is it online mode?",
                            "link": "pro-api.sys_environment.isonlinemode.html",
                            "Parameters": "",
                            "Declaration": "isOnlineMode(): boolean;",
                            "return": [
                                "boolean",
                                "Is it online mode?"
                            ]
                        },
                        {
                            "Method": "isProPrivateEdition()",
                            "Modifiers": "",
                            "Description": "Is it a private version deployed?",
                            "link": "pro-api.sys_environment.isproprivateedition.html",
                            "Parameters": "",
                            "Declaration": "isProPrivateEdition(): boolean;",
                            "return": [
                                "boolean",
                                "Is it a private version deployed?"
                            ]
                        },
                        {
                            "Method": "isWeb()",
                            "Modifiers": "",
                            "Description": "Is it in the browser environment?",
                            "link": "pro-api.sys_environment.isweb.html",
                            "Parameters": "",
                            "Declaration": "isWeb(): boolean;",
                            "return": [
                                "boolean",
                                "Is it in the browser environment?"
                            ]
                        }
                    ]
                },
                "SYS_FileManager": {
                    "description": "System / File Management Class",
                    "url": "./pro-api.sys_filemanager.html",
                    "Signature": "export declare class SYS_FileManager",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getCbbFileByCbbUuid(cbbUuid, libraryUuid, cbbName, password)",
                            "Modifiers": "",
                            "Description": "(BETA) Use multiplexed module UUID to get multiplexed module files",
                            "link": "pro-api.sys_filemanager.getcbbfilebycbbuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "cbbUuid",
                                    "Type": "string",
                                    "Description": "Multiplexing module UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "cbbName",
                                    "Type": "string",
                                    "Description": "(Optional)",
                                    "link": ""
                                },
                                {
                                    "Parameter": "password",
                                    "Type": "string",
                                    "Description": "(Optional) Encryption password",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getCbbFileByCbbUuid(cbbUuid: string, libraryUuid?: string, cbbName?: string, password?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Reuse module file data, undefined means data acquisition failed",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "Note: This interface requires the **Team Module > Download Module** permissions. Calls without permission will always throw Error"
                            ]
                        },
                        {
                            "Method": "getDeviceFileByDeviceUuid(deviceUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "Get device files using device UUID",
                            "link": "pro-api.sys_filemanager.getdevicefilebydeviceuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "deviceUuid",
                                    "Type": "string | Array<string>",
                                    "Description": "Device UUID or Device UUID List",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID can be obtained using the interface in LIB_LibrariesList. If it is not passed in, it is the system library",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "getDeviceFileByDeviceUuid(deviceUuid: string | Array<string>, libraryUuid?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Device file data, undefined means data acquisition failed",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "Note: This interface requires the **Team Library > Download Library** permissions. Calls without permission will always throw Error"
                            ]
                        },
                        {
                            "Method": "getDocumentFile(fileName, password)",
                            "Modifiers": "",
                            "Description": "Get the document file",
                            "link": "pro-api.sys_filemanager.getdocumentfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "password",
                                    "Type": "string",
                                    "Description": "(Optional) Encryption password",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getDocumentFile(fileName?: string, password?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Document file data, undefined means that the document is not currently opened or the data acquisition failed",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "Note: This interface requires the ** Engineering Drawing > File Export** permission. Calls without permission will always throw Error"
                            ]
                        },
                        {
                            "Method": "getDocumentFootprintSources()",
                            "Modifiers": "",
                            "Description": "(BETA) Obtain document encapsulation source code",
                            "link": "pro-api.sys_filemanager.getdocumentfootprintsources.html",
                            "Parameters": "",
                            "Declaration": "getDocumentFootprintSources(): Promise<Array<{\n        footprintUuid: string;\n        documentSource: string;\n    }>>;",
                            "return": [
                                "Promise<Array<{ footprintUuid: string; documentSource: string; }>>",
                                "Document encapsulates source code data, data acquisition fails to return to an empty array"
                            ]
                        },
                        {
                            "Method": "getDocumentSource()",
                            "Modifiers": "",
                            "Description": "(BETA) Obtain document source code",
                            "link": "pro-api.sys_filemanager.getdocumentsource.html",
                            "Parameters": "",
                            "Declaration": "getDocumentSource(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Document source code data, undefined means that the document is not opened or the data acquisition failed"
                            ]
                        },
                        {
                            "Method": "getFootprintFileByFootprintUuid(footprintUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Get encapsulated files using encapsulated UUID",
                            "link": "pro-api.sys_filemanager.getfootprintfilebyfootprintuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "footprintUuid",
                                    "Type": "string | Array<string>",
                                    "Description": "Encapsulate UUID or encapsulate UUID list",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "getFootprintFileByFootprintUuid(footprintUuid: string | Array<string>, libraryUuid?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Encapsulate file data, undefined means data acquisition failed",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "Note: This interface requires the **Team Library > Download Library** permissions. Calls without permission will always throw Error"
                            ]
                        },
                        {
                            "Method": "getPanelLibraryFileByPanelLibraryUuid(panelLibraryUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Use the Panel Library UUID to obtain the panel library file",
                            "link": "pro-api.sys_filemanager.getpanellibraryfilebypanellibraryuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelLibraryUuid",
                                    "Type": "string | Array<string>",
                                    "Description": "Panel Library UUID or Panel Library UUID List",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "getPanelLibraryFileByPanelLibraryUuid(panelLibraryUuid: string | Array<string>, libraryUuid?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Panel library file data, undefined means data acquisition failed",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "Note: This interface requires the **Team Library > Download Library** permissions. Calls without permission will always throw Error"
                            ]
                        },
                        {
                            "Method": "getProjectFile(fileName, password)",
                            "Modifiers": "",
                            "Description": "Obtain project files",
                            "link": "pro-api.sys_filemanager.getprojectfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "password",
                                    "Type": "string",
                                    "Description": "(Optional) Encryption password",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getProjectFile(fileName?: string, password?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Project file data, undefined means that the project is not currently opened or the data acquisition failed",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "Note: This interface requires the **Project Management > Download Project** permission. Calls without permission will always throw Error"
                            ]
                        },
                        {
                            "Method": "getProjectFileByProjectUuid(projectUuid, fileName, password)",
                            "Modifiers": "",
                            "Description": "Use project UUID to get project files",
                            "link": "pro-api.sys_filemanager.getprojectfilebyprojectuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "projectUuid",
                                    "Type": "string",
                                    "Description": "Project UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "password",
                                    "Type": "string",
                                    "Description": "(Optional) Encryption password",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getProjectFileByProjectUuid(projectUuid: string, fileName?: string, password?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Project file data, undefined means that the project is not currently opened or the data acquisition failed",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "Note: This interface requires the **Project Management > Download Project** permission. Calls without permission will always throw Error"
                            ]
                        },
                        {
                            "Method": "setDocumentSource(source)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the document source code",
                            "link": "pro-api.sys_filemanager.setdocumentsource.html",
                            "Parameters": [
                                {
                                    "Parameter": "source",
                                    "Type": "string",
                                    "Description": "Document source code",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setDocumentSource(source: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful, if the input document source code format is incorrect, the result of false will be returned"
                            ]
                        }
                    ]
                },
                "SYS_FileSystem": {
                    "description": "System / File System Interaction Class",
                    "url": "./pro-api.sys_filesystem.html",
                    "Signature": "export declare class SYS_FileSystem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "deleteFileInFileSystem(uri, force)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete files in the file system",
                            "link": "pro-api.sys_filesystem.deletefileinfilesystem.html",
                            "Parameters": [
                                {
                                    "Parameter": "uri",
                                    "Type": "string",
                                    "Description": "File resource locator If the end is slash / (Windows is backslash \\), it is recognized as a folder; if the end is not slash, it is recognized as the full file name, and the fileName parameter will be ignored at this time",
                                    "link": ""
                                },
                                {
                                    "Parameter": "force",
                                    "Type": "boolean",
                                    "Description": "(Optional) Forced delete a folder (whether to force delete the folder when the folder is to be deleted and there are files in it)",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteFileInFileSystem(uri: string, force?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?",
                                "Note 1: This interface is only valid on the client side, and calling in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "getDocumentsPath()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the document directory path",
                            "link": "pro-api.sys_filesystem.getdocumentspath.html",
                            "Parameters": "",
                            "Declaration": "getDocumentsPath(): Promise<string>;",
                            "return": [
                                "Promise<string>",
                                "Document directory path",
                                "The path returned does not contain a slash / (or a backslash \\) at the end",
                                "Note 1: This interface is only valid on the client side, and calling in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "getEdaPath()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the EDA document directory path",
                            "link": "pro-api.sys_filesystem.getedapath.html",
                            "Parameters": "",
                            "Declaration": "getEdaPath(): Promise<string>;",
                            "return": [
                                "Promise<string>",
                                "EDA Document Directory Path",
                                "The path returned does not contain a slash / (or a backslash \\) at the end",
                                "Note 1: This interface is only valid on the client side, and calling in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "getExtensionFile(uri)",
                            "Modifiers": "",
                            "Description": "Get files within the extension",
                            "link": "pro-api.sys_filesystem.getextensionfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "uri",
                                    "Type": "string",
                                    "Description": "File path",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getExtensionFile(uri: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "File format file"
                            ]
                        },
                        {
                            "Method": "getLibrariesPaths()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the library directory path",
                            "link": "pro-api.sys_filesystem.getlibrariespaths.html",
                            "Parameters": "",
                            "Declaration": "getLibrariesPaths(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Library directory path array",
                                "Note 1: This interface is only valid for all offline clients, and calls in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "getProjectsPaths()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the project directory path",
                            "link": "pro-api.sys_filesystem.getprojectspaths.html",
                            "Parameters": "",
                            "Declaration": "getProjectsPaths(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Project directory path array",
                                "Note 1: This interface is only valid for offline clients, and calling in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "listFilesOfFileSystem(folderPath, recursive)",
                            "Modifiers": "",
                            "Description": "(BETA) View the file list under the file system path",
                            "link": "pro-api.sys_filesystem.listfilesoffilesystem.html",
                            "Parameters": [
                                {
                                    "Parameter": "folderPath",
                                    "Type": "string",
                                    "Description": "Directory path",
                                    "link": ""
                                },
                                {
                                    "Parameter": "recursive",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to recursively obtain all subfiles",
                                    "link": ""
                                }
                            ],
                            "Declaration": "listFilesOfFileSystem(folderPath: string, recursive?: boolean): Promise<Array<ISYS_FileSystemFileList>>;",
                            "return": [
                                "Promise<Array<ISYS_FileSystemFileList>>",
                                "List of files in the current directory",
                                "Note 1: This interface is only valid on the client side, and calling in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "openReadFileDialog(filenameExtensions)",
                            "Modifiers": "",
                            "Description": "(BETA) Opens the read file window",
                            "link": "pro-api.sys_filesystem.openreadfiledialog.html",
                            "Parameters": [
                                {
                                    "Parameter": "filenameExtensions",
                                    "Type": "string | Array<string>",
                                    "Description": "(Optional) File extension",
                                    "link": ""
                                }
                            ],
                            "Declaration": "openReadFileDialog(filenameExtensions?: string | Array<string>): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "File format file"
                            ]
                        },
                        {
                            "Method": "readFileFromFileSystem(uri)",
                            "Modifiers": "",
                            "Description": "(BETA) Read files from file system",
                            "link": "pro-api.sys_filesystem.readfilefromfilesystem.html",
                            "Parameters": [
                                {
                                    "Parameter": "uri",
                                    "Type": "string",
                                    "Description": "File resource locator, need to contain the absolute path of the complete file name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "readFileFromFileSystem(uri: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "File format file",
                                "Note 1: This interface is only valid on the client side, and calling in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "saveFile(fileData, fileName)",
                            "Modifiers": "",
                            "Description": "Save the file",
                            "link": "pro-api.sys_filesystem.savefile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileData",
                                    "Type": "File | Blob",
                                    "Description": "File data",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "saveFile(fileData: File | Blob, fileName?: string): Promise<void>;",
                            "return": [
                                "Promise<void>",
                                "Call the browser download interface or Electron to save the file interface to save the incoming file stream to the local"
                            ]
                        },
                        {
                            "Method": "saveFileToFileSystem(uri, fileData, fileName, force)",
                            "Modifiers": "",
                            "Description": "(BETA) Write files to the file system",
                            "link": "pro-api.sys_filesystem.savefiletofilesystem.html",
                            "Parameters": [
                                {
                                    "Parameter": "uri",
                                    "Type": "string",
                                    "Description": "File resource locator If the end is slash / (Windows is backslash \\), it is recognized as a folder; if the end is not slash, it is recognized as the full file name, and the fileName parameter will be ignored at this time",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileData",
                                    "Type": "File | Blob",
                                    "Description": "File data",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "force",
                                    "Type": "boolean",
                                    "Description": "(Optional) Forced write (overwrite the file if it exists)",
                                    "link": ""
                                }
                            ],
                            "Declaration": "saveFileToFileSystem(uri: string, fileData: File | Blob, fileName?: string, force?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the write operation is successful, if overwriting is not allowed but the file already exists, the result of false will be returned",
                                "Note 1: This interface is only valid on the client side, and calling in the browser environment will always throw Error",
                                "Note 2: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        }
                    ]
                },
                "SYS_FontManager": {
                    "description": "System / Font Management Class",
                    "url": "./pro-api.sys_fontmanager.html",
                    "Signature": "export declare class SYS_FontManager",
                    "Remark": "Configure the list of system fonts allowed by EDA Professional Edition",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "addFont(fontName)",
                            "Modifiers": "",
                            "Description": "Add fonts to font list",
                            "link": "pro-api.sys_fontmanager.addfont.html",
                            "Parameters": [
                                {
                                    "Parameter": "fontName",
                                    "Type": "string",
                                    "Description": "Font name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "addFont(fontName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the addition operation successful?"
                            ]
                        },
                        {
                            "Method": "deleteFont(fontName)",
                            "Modifiers": "",
                            "Description": "Delete the specified font in the font list",
                            "link": "pro-api.sys_fontmanager.deletefont.html",
                            "Parameters": [
                                {
                                    "Parameter": "fontName",
                                    "Type": "string",
                                    "Description": "Font name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteFont(fontName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "getFontsList()",
                            "Modifiers": "",
                            "Description": "Get the currently configured font list",
                            "link": "pro-api.sys_fontmanager.getfontslist.html",
                            "Parameters": "",
                            "Declaration": "getFontsList(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Font list"
                            ]
                        }
                    ]
                },
                "SYS_I18n": {
                    "description": "System / Multilingual Class",
                    "url": "./pro-api.sys_i18n.html",
                    "Signature": "export declare class SYS_I18n",
                    "Remark": "Display multilingual text using multilingual systems",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getAllSupportedLanguages()",
                            "Modifiers": "",
                            "Description": "Query all supported languages",
                            "link": "pro-api.sys_i18n.getallsupportedlanguages.html",
                            "Parameters": "",
                            "Declaration": "getAllSupportedLanguages(): Array<string>;",
                            "return": [
                                "Array<string>",
                                "List of all supported languages"
                            ]
                        },
                        {
                            "Method": "getCurrentLanguage()",
                            "Modifiers": "",
                            "Description": "Get the current locale",
                            "link": "pro-api.sys_i18n.getcurrentlanguage.html",
                            "Parameters": "",
                            "Declaration": "getCurrentLanguage(): Promise<string>;",
                            "return": [
                                "Promise<string>",
                                "language",
                                "The languages \u00e2\u20ac\u2039\u00e2\u20ac\u2039that can be obtained are limited by the current language supported by EDA. Languages \u00e2\u20ac\u2039\u00e2\u20ac\u2039supported by other APIs need to explicitly specify the language parameters to be used."
                            ]
                        },
                        {
                            "Method": "importMultilingual(language, source)",
                            "Modifiers": "",
                            "Description": "Import multilingual",
                            "link": "pro-api.sys_i18n.importmultilingual.html",
                            "Parameters": [
                                {
                                    "Parameter": "language",
                                    "Type": "string",
                                    "Description": "language",
                                    "link": ""
                                },
                                {
                                    "Parameter": "source",
                                    "Type": "ISYS_LanguageKeyValuePairs",
                                    "Description": "Multilingual data object to be imported",
                                    "link": "pro-api.isys_languagekeyvaluepairs.html"
                                }
                            ],
                            "Declaration": "importMultilingual(language: string, source: ISYS_LanguageKeyValuePairs): boolean;",
                            "return": [
                                "boolean",
                                "Is the import successful?",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "importMultilingualLanguage(namespace, language, source)",
                            "Modifiers": "",
                            "Description": "Import multilingual: Specify namespace and language",
                            "link": "pro-api.sys_i18n.importmultilinguallanguage.html",
                            "Parameters": [
                                {
                                    "Parameter": "namespace",
                                    "Type": "string",
                                    "Description": "Namespace",
                                    "link": ""
                                },
                                {
                                    "Parameter": "language",
                                    "Type": "string",
                                    "Description": "language",
                                    "link": ""
                                },
                                {
                                    "Parameter": "source",
                                    "Type": "ISYS_LanguageKeyValuePairs",
                                    "Description": "Multilingual data object to be imported",
                                    "link": "pro-api.isys_languagekeyvaluepairs.html"
                                }
                            ],
                            "Declaration": "importMultilingualLanguage(namespace: string, language: string, source: ISYS_LanguageKeyValuePairs): boolean;",
                            "return": [
                                "boolean",
                                "Is the import successful?"
                            ]
                        },
                        {
                            "Method": "importMultilingualNamespace(namespace, source)",
                            "Modifiers": "",
                            "Description": "Import multilingual: Specify namespace",
                            "link": "pro-api.sys_i18n.importmultilingualnamespace.html",
                            "Parameters": [
                                {
                                    "Parameter": "namespace",
                                    "Type": "string",
                                    "Description": "Namespace",
                                    "link": ""
                                },
                                {
                                    "Parameter": "source",
                                    "Type": "ISYS_MultilingualLanguagesData",
                                    "Description": "Multilingual data object to be imported",
                                    "link": "pro-api.isys_multilinguallanguagesdata.html"
                                }
                            ],
                            "Declaration": "importMultilingualNamespace(namespace: string, source: ISYS_MultilingualLanguagesData): boolean;",
                            "return": [
                                "boolean",
                                "Is the import successful?"
                            ]
                        },
                        {
                            "Method": "isLanguageSupported(language)",
                            "Modifiers": "",
                            "Description": "Check if the language is supported",
                            "link": "pro-api.sys_i18n.islanguagesupported.html",
                            "Parameters": [
                                {
                                    "Parameter": "language",
                                    "Type": "string",
                                    "Description": "language",
                                    "link": ""
                                }
                            ],
                            "Declaration": "isLanguageSupported(language: string): boolean;",
                            "return": [
                                "boolean",
                                "Supported"
                            ]
                        },
                        {
                            "Method": "text(tag, namespace, language, args)",
                            "Modifiers": "",
                            "Description": "Output language text",
                            "link": "pro-api.sys_i18n.text.html",
                            "Parameters": [
                                {
                                    "Parameter": "tag",
                                    "Type": "string",
                                    "Description": "Text tags, corresponding to the keys in multilingual file key-value pairs",
                                    "link": ""
                                },
                                {
                                    "Parameter": "namespace",
                                    "Type": "string",
                                    "Description": "(Optional) Text namespace, which defaults to the extended UUID in the extended running environment, otherwise it is the system default namespace",
                                    "link": ""
                                },
                                {
                                    "Parameter": "language",
                                    "Type": "string",
                                    "Description": "(Optional) language, undefined is the current display language of EDA",
                                    "link": ""
                                },
                                {
                                    "Parameter": "args",
                                    "Type": "Array<any>",
                                    "Description": "Parameters for replacing placeholders in language text",
                                    "link": ""
                                }
                            ],
                            "Declaration": "text(tag: string, namespace?: string, language?: string, ...args: Array<any>): string;",
                            "return": [
                                "string",
                                "Language text",
                                "You can use placeholders in the ${1} format to represent parameters;",
                                "Language priority: Current display language > System default language > The first language found in the dataset containing the text tag > Text tag (tag)"
                            ]
                        }
                    ]
                },
                "SYS_IFrame": {
                    "description": "System / Inline Frame Window Class",
                    "url": "./pro-api.sys_iframe.html",
                    "Signature": "export declare class SYS_IFrame",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "closeIFrame(id)",
                            "Modifiers": "",
                            "Description": "(BETA) Close the inline frame window",
                            "link": "pro-api.sys_iframe.closeiframe.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "(Optional) Inline frame window ID, if undefined is passed, all inline frame windows opened by this extension will be closed",
                                    "link": ""
                                }
                            ],
                            "Declaration": "closeIFrame(id?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "Close all inline frame windows opened by the current extension;",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "hideIFrame(id)",
                            "Modifiers": "",
                            "Description": "(BETA) Hide inline frame window",
                            "link": "pro-api.sys_iframe.hideiframe.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "(Optional) Inline Frame Window ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "hideIFrame(id?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This interface is result-oriented: If the specified inline frame window is not found, the interface will return false; If the inline frame window is already hidden before the operation is performed, the interface will return true"
                            ]
                        },
                        {
                            "Method": "openIFrame(htmlFileName, width, height, id)",
                            "Modifiers": "",
                            "Description": "(BETA) Opens an inline frame window",
                            "link": "pro-api.sys_iframe.openiframe.html",
                            "Parameters": [
                                {
                                    "Parameter": "htmlFileName",
                                    "Type": "string",
                                    "Description": "The path of the HTML file to be loaded in the extension package",
                                    "link": ""
                                },
                                {
                                    "Parameter": "width",
                                    "Type": "number",
                                    "Description": "(Optional) Width of an inline frame window",
                                    "link": ""
                                },
                                {
                                    "Parameter": "height",
                                    "Type": "number",
                                    "Description": "(Optional) height of inline frame window",
                                    "link": ""
                                },
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "(Optional) Inline frame window ID, used to close the inline frame window",
                                    "link": ""
                                }
                            ],
                            "Declaration": "openIFrame(htmlFileName: string, width?: number, height?: number, id?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This interface only allows calls to the extension package, and users need to include HTML files for inline in the extension package;",
                                "After this interface is called, a Dialog window will open. The title is <title> of the HTML file and the title bar has a close button;",
                                "The text part is an inline framework, and width and height are the width and height of the inline framework in the text part;",
                                "The inline framework needs to display the content of htmlFileName, which is retrieved from the extension package and stored in IndexedDB during installation",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "showIFrame(id)",
                            "Modifiers": "",
                            "Description": "(BETA) Displays an inline frame window",
                            "link": "pro-api.sys_iframe.showiframe.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "(Optional) Inline Frame Window ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showIFrame(id?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This interface is result-oriented: If the specified inline frame window is not found, the interface will return false; If the inline frame window is already displayed before the operation is performed, the interface will return true"
                            ]
                        }
                    ]
                },
                "SYS_LoadingAndProgressBar": {
                    "description": "System / Loading and Progress Bar Class",
                    "url": "./pro-api.sys_loadingandprogressbar.html",
                    "Signature": "export declare class SYS_LoadingAndProgressBar",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "destroyLoading()",
                            "Modifiers": "",
                            "Description": "Destroy no progress load coverage",
                            "link": "pro-api.sys_loadingandprogressbar.destroyloading.html",
                            "Parameters": "",
                            "Declaration": "destroyLoading(): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "destroyProgressBar()",
                            "Modifiers": "",
                            "Description": "Destruction progress bar",
                            "link": "pro-api.sys_loadingandprogressbar.destroyprogressbar.html",
                            "Parameters": "",
                            "Declaration": "destroyProgressBar(): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "showLoading()",
                            "Modifiers": "",
                            "Description": "Show no progress loading overwrite",
                            "link": "pro-api.sys_loadingandprogressbar.showloading.html",
                            "Parameters": "",
                            "Declaration": "showLoading(): void;",
                            "return": [
                                "void",
                                "There is no progress indication, but there will be a gray coverage consistent with the progress bar, preventing users from further operations"
                            ]
                        },
                        {
                            "Method": "showProgressBar(progress, title)",
                            "Modifiers": "",
                            "Description": "Show progress bar or set progress bar",
                            "link": "pro-api.sys_loadingandprogressbar.showprogressbar.html",
                            "Parameters": [
                                {
                                    "Parameter": "progress",
                                    "Type": "number",
                                    "Description": "(Optional) Progress value, value range 0-100",
                                    "link": ""
                                },
                                {
                                    "Parameter": "title",
                                    "Type": "string",
                                    "Description": "(Optional) Progress bar title",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showProgressBar(progress?: number, title?: string): void;",
                            "return": [
                                "void",
                                "When the progress reaches 100, the progress bar will be automatically destroyed"
                            ]
                        }
                    ]
                },
                "SYS_Log": {
                    "description": "System / Log Class",
                    "url": "./pro-api.sys_log.html",
                    "Signature": "export declare class SYS_Log",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "add(message, type)",
                            "Modifiers": "",
                            "Description": "Add log entry",
                            "link": "pro-api.sys_log.add.html",
                            "Parameters": [
                                {
                                    "Parameter": "message",
                                    "Type": "string",
                                    "Description": "Log content",
                                    "link": ""
                                },
                                {
                                    "Parameter": "type",
                                    "Type": "ESYS_LogType",
                                    "Description": "(Optional) Log Type",
                                    "link": "pro-api.esys_logtype.html"
                                }
                            ],
                            "Declaration": "add(message: string, type?: ESYS_LogType): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "clear()",
                            "Modifiers": "",
                            "Description": "Clear the log",
                            "link": "pro-api.sys_log.clear.html",
                            "Parameters": "",
                            "Declaration": "clear(): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "export(types)",
                            "Modifiers": "",
                            "Description": "Export log",
                            "link": "pro-api.sys_log.export.html",
                            "Parameters": [
                                {
                                    "Parameter": "types",
                                    "Type": "ESYS_LogType | Array<ESYS_LogType>",
                                    "Description": "(Optional) Log Type",
                                    "link": "pro-api.esys_logtype.html"
                                }
                            ],
                            "Declaration": "export(types?: ESYS_LogType | Array<ESYS_LogType>): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "find(message, types)",
                            "Modifiers": "",
                            "Description": "Find an entry",
                            "link": "pro-api.sys_log.find.html",
                            "Parameters": [
                                {
                                    "Parameter": "message",
                                    "Type": "string | Array<string | { text: string; attr?: { id?: string; path?: string; sheet?: string; pcbid?: string; type?: string; }; }>",
                                    "Description": "Find content",
                                    "link": ""
                                },
                                {
                                    "Parameter": "types",
                                    "Type": "ESYS_LogType | Array<ESYS_LogType>",
                                    "Description": "(Optional) Array of log types that can be found within the specified log type",
                                    "link": "pro-api.esys_logtype.html"
                                }
                            ],
                            "Declaration": "find(message: string | Array<string | {\n        text: string;\n        attr?: {\n            id?: string;\n            path?: string;\n            sheet?: string;\n            pcbid?: string;\n            type?: string;\n        };\n    }>, types?: ESYS_LogType | Array<ESYS_LogType>): Promise<Array<ISYS_LogLine>>;",
                            "return": [
                                "Promise<Array<ISYS_LogLine>>",
                                "Array of log entries that meet the search criteria",
                                "If the log panel is open, the search operation will be displayed on the front end at the same time."
                            ]
                        },
                        {
                            "Method": "sort(types)",
                            "Modifiers": "",
                            "Description": "Filter and get log entries",
                            "link": "pro-api.sys_log.sort.html",
                            "Parameters": [
                                {
                                    "Parameter": "types",
                                    "Type": "ESYS_LogType | Array<ESYS_LogType>",
                                    "Description": "(Optional) Log type array, you can specify multiple log types at the same time, if not specified, it is all types",
                                    "link": "pro-api.esys_logtype.html"
                                }
                            ],
                            "Declaration": "sort(types?: ESYS_LogType | Array<ESYS_LogType>): Promise<Array<ISYS_LogLine>>;",
                            "return": [
                                "Promise<Array<ISYS_LogLine>>",
                                "Array of log entries that meet the filter criteria",
                                "If the log panel is open, the filtering operation will also be displayed on the front end."
                            ]
                        }
                    ]
                },
                "SYS_Message": {
                    "description": "System / Message Notification Class",
                    "url": "./pro-api.sys_message.html",
                    "Signature": "export declare class SYS_Message",
                    "Remark": "Generate various non-invasive reminders to users",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "removeFollowMouseTip(tip)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove the prompt to follow the mouse",
                            "link": "pro-api.sys_message.removefollowmousetip.html",
                            "Parameters": [
                                {
                                    "Parameter": "tip",
                                    "Type": "string",
                                    "Description": "(Optional) Prompt content, if passed in, it will only be removed if the current prompt is specified",
                                    "link": ""
                                }
                            ],
                            "Declaration": "removeFollowMouseTip(tip?: string): Promise<void>;",
                            "return": [
                                "Promise<void>",
                                "Remove the current or specified prompt to follow the mouse"
                            ]
                        },
                        {
                            "Method": "showFollowMouseTip(tip, msTimeout)",
                            "Modifiers": "",
                            "Description": "(BETA) Shows tips for following the mouse",
                            "link": "pro-api.sys_message.showfollowmousetip.html",
                            "Parameters": [
                                {
                                    "Parameter": "tip",
                                    "Type": "string",
                                    "Description": "Prompt content",
                                    "link": ""
                                },
                                {
                                    "Parameter": "msTimeout",
                                    "Type": "number",
                                    "Description": "(Optional) Display time, in milliseconds (ms), if not passed in, it will continue to display until the call to removeFollowMouseTip or is overwritten by other prompts",
                                    "link": "pro-api.sys_message.removefollowmousetip.html"
                                }
                            ],
                            "Declaration": "showFollowMouseTip(tip: string, msTimeout?: number): Promise<void>;",
                            "return": [
                                "Promise<void>",
                                "Only one prompt can be displayed at the same time. If a new prompt is displayed, the previous prompt will be automatically removed."
                            ]
                        },
                        {
                            "Method": "showToastMessage(message, messageType, timer, bottomPanel, buttonTitle, buttonCallbackFn)",
                            "Modifiers": "",
                            "Description": "Show toast message",
                            "link": "pro-api.sys_message.showtoastmessage.html",
                            "Parameters": [
                                {
                                    "Parameter": "message",
                                    "Type": "string",
                                    "Description": "Message content",
                                    "link": ""
                                },
                                {
                                    "Parameter": "messageType",
                                    "Type": "ESYS_ToastMessageType",
                                    "Description": "(Optional) Message Type",
                                    "link": "pro-api.esys_toastmessagetype.html"
                                },
                                {
                                    "Parameter": "timer",
                                    "Type": "number",
                                    "Description": "(Optional) Automatically close countdown seconds, 0 is not automatically closed",
                                    "link": ""
                                },
                                {
                                    "Parameter": "bottomPanel",
                                    "Type": "ESYS_BottomPanelTab",
                                    "Description": "(Optional) Expand the bottom information panel",
                                    "link": "pro-api.esys_bottompaneltab.html"
                                },
                                {
                                    "Parameter": "buttonTitle",
                                    "Type": "string",
                                    "Description": "(Optional) Callback Button Title",
                                    "link": ""
                                },
                                {
                                    "Parameter": "buttonCallbackFn",
                                    "Type": "string",
                                    "Description": "(Optional) The content of the callback function, in the form of a string, will be automatically parsed and executed",
                                    "link": ""
                                }
                            ],
                            "Declaration": "showToastMessage(message: string, messageType?: ESYS_ToastMessageType, timer?: number, bottomPanel?: ESYS_BottomPanelTab, buttonTitle?: string, buttonCallbackFn?: string): void;",
                            "return": [
                                "void"
                            ]
                        }
                    ]
                },
                "SYS_PanelControl": {
                    "description": "System / Panel Control Class",
                    "url": "./pro-api.sys_panelcontrol.html",
                    "Signature": "export declare class SYS_PanelControl",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "closeBottomPanel()",
                            "Modifiers": "",
                            "Description": "Close the bottom panel",
                            "link": "pro-api.sys_panelcontrol.closebottompanel.html",
                            "Parameters": "",
                            "Declaration": "closeBottomPanel(): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "closeLeftPanel()",
                            "Modifiers": "",
                            "Description": "Close the left panel",
                            "link": "pro-api.sys_panelcontrol.closeleftpanel.html",
                            "Parameters": "",
                            "Declaration": "closeLeftPanel(): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "closeRightPanel()",
                            "Modifiers": "",
                            "Description": "Close the right panel",
                            "link": "pro-api.sys_panelcontrol.closerightpanel.html",
                            "Parameters": "",
                            "Declaration": "closeRightPanel(): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "isBottomPanelLocked()",
                            "Modifiers": "",
                            "Description": "Check if the bottom panel is locked",
                            "link": "pro-api.sys_panelcontrol.isbottompanellocked.html",
                            "Parameters": "",
                            "Declaration": "isBottomPanelLocked(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is it locked"
                            ]
                        },
                        {
                            "Method": "isLeftPanelLocked()",
                            "Modifiers": "",
                            "Description": "Check whether the left panel is locked",
                            "link": "pro-api.sys_panelcontrol.isleftpanellocked.html",
                            "Parameters": "",
                            "Declaration": "isLeftPanelLocked(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is it locked"
                            ]
                        },
                        {
                            "Method": "isRightPanelLocked()",
                            "Modifiers": "",
                            "Description": "Check if the right panel is locked",
                            "link": "pro-api.sys_panelcontrol.isrightpanellocked.html",
                            "Parameters": "",
                            "Declaration": "isRightPanelLocked(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is it locked"
                            ]
                        },
                        {
                            "Method": "openBottomPanel(tab)",
                            "Modifiers": "",
                            "Description": "Open the bottom panel",
                            "link": "pro-api.sys_panelcontrol.openbottompanel.html",
                            "Parameters": [
                                {
                                    "Parameter": "tab",
                                    "Type": "ESYS_BottomPanelTab",
                                    "Description": "(Optional) tab page, if not specified, do not switch tab pages",
                                    "link": "pro-api.esys_bottompaneltab.html"
                                }
                            ],
                            "Declaration": "openBottomPanel(tab?: ESYS_BottomPanelTab): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "openLeftPanel(tab)",
                            "Modifiers": "",
                            "Description": "Open the left panel",
                            "link": "pro-api.sys_panelcontrol.openleftpanel.html",
                            "Parameters": [
                                {
                                    "Parameter": "tab",
                                    "Type": "ESYS_LeftPanelTab",
                                    "Description": "(Optional) tab page, if not specified, do not switch tab pages",
                                    "link": "pro-api.esys_leftpaneltab.html"
                                }
                            ],
                            "Declaration": "openLeftPanel(tab?: ESYS_LeftPanelTab): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "openRightPanel(tab)",
                            "Modifiers": "",
                            "Description": "Open the right panel",
                            "link": "pro-api.sys_panelcontrol.openrightpanel.html",
                            "Parameters": [
                                {
                                    "Parameter": "tab",
                                    "Type": "ESYS_RightPanelTab",
                                    "Description": "(Optional) tab page, if not specified, do not switch tab pages",
                                    "link": "pro-api.esys_rightpaneltab.html"
                                }
                            ],
                            "Declaration": "openRightPanel(tab?: ESYS_RightPanelTab): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "toggleBottomPanelLockState(state)",
                            "Modifiers": "",
                            "Description": "Switch the bottom panel lock status",
                            "link": "pro-api.sys_panelcontrol.togglebottompanellockstate.html",
                            "Parameters": [
                                {
                                    "Parameter": "state",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock, if not specified, the current state is reversed",
                                    "link": ""
                                }
                            ],
                            "Declaration": "toggleBottomPanelLockState(state?: boolean): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "toggleLeftPanelLockState(state)",
                            "Modifiers": "",
                            "Description": "Switch the locked state of the left panel",
                            "link": "pro-api.sys_panelcontrol.toggleleftpanellockstate.html",
                            "Parameters": [
                                {
                                    "Parameter": "state",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock, if not specified, the current state is reversed",
                                    "link": ""
                                }
                            ],
                            "Declaration": "toggleLeftPanelLockState(state?: boolean): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "toggleRightPanelLockState(state)",
                            "Modifiers": "",
                            "Description": "Switch the locked state of the right panel",
                            "link": "pro-api.sys_panelcontrol.togglerightpanellockstate.html",
                            "Parameters": [
                                {
                                    "Parameter": "state",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock, if not specified, the current state is reversed",
                                    "link": ""
                                }
                            ],
                            "Declaration": "toggleRightPanelLockState(state?: boolean): void;",
                            "return": [
                                "void"
                            ]
                        }
                    ]
                },
                "SYS_ShortcutKey": {
                    "description": "System / Shortcut Key Class",
                    "url": "./pro-api.sys_shortcutkey.html",
                    "Signature": "export declare class SYS_ShortcutKey",
                    "Remark": "Registration and Management System Shortcut Keys",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getShortcutKeys(includeSystem)",
                            "Modifiers": "",
                            "Description": "(BETA) Query shortcut key list",
                            "link": "pro-api.sys_shortcutkey.getshortcutkeys.html",
                            "Parameters": [
                                {
                                    "Parameter": "includeSystem",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to include system shortcut keys",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getShortcutKeys(includeSystem?: boolean): Promise<Array<{\n        shortcutKey: TSYS_ShortcutKeys;\n        title: string;\n        documentType: Array<ESYS_ShortcutKeyEffectiveEditorDocumentType>;\n        scene: Array<ESYS_ShortcutKeyEffectiveEditorScene>;\n    }>>;",
                            "return": [
                                "Promise<Array<{ shortcutKey: TSYS_ShortcutKeys; title: string; documentType: Array<ESYS_ShortcutKeyEffectiveEditorDocumentType>; scene: Array<ESYS_ShortcutKeyEffectiveEditorScene>; }>>",
                                "Shortcut key list"
                            ]
                        },
                        {
                            "Method": "registerShortcutKey(shortcutKey, title, callbackFn, documentType, scene)",
                            "Modifiers": "",
                            "Description": "(BETA) Registration shortcut keys",
                            "link": "pro-api.sys_shortcutkey.registershortcutkey.html",
                            "Parameters": [
                                {
                                    "Parameter": "shortcutKey",
                                    "Type": "TSYS_ShortcutKeys",
                                    "Description": "Shortcut keys, if multiple elements are included in the array, they will be parsed into combination shortcut keys, and will be sorted by rules and stored in the cache.",
                                    "link": "pro-api.tsys_shortcutkeys.html"
                                },
                                {
                                    "Parameter": "title",
                                    "Type": "string",
                                    "Description": "Shortcut key title, friendly name of shortcut key",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callbackFn",
                                    "Type": "(shortcutKey: TSYS_ShortcutKeys) => void | Promise<void>",
                                    "Description": "Callback function",
                                    "link": "pro-api.tsys_shortcutkeys.html"
                                },
                                {
                                    "Parameter": "documentType",
                                    "Type": "Array<ESYS_ShortcutKeyEffectiveEditorDocumentType>",
                                    "Description": "(Optional)",
                                    "link": "pro-api.esys_shortcutkeyeffectiveeditordocumenttype.html"
                                },
                                {
                                    "Parameter": "scene",
                                    "Type": "Array<ESYS_ShortcutKeyEffectiveEditorScene>",
                                    "Description": "(Optional)",
                                    "link": "pro-api.esys_shortcutkeyeffectiveeditorscene.html"
                                }
                            ],
                            "Declaration": "registerShortcutKey(shortcutKey: TSYS_ShortcutKeys, title: string, callbackFn: (shortcutKey: TSYS_ShortcutKeys) => void | Promise<void>, documentType?: Array<ESYS_ShortcutKeyEffectiveEditorDocumentType>, scene?: Array<ESYS_ShortcutKeyEffectiveEditorScene>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the registration operation successful?"
                            ]
                        },
                        {
                            "Method": "unregisterShortcutKey(shortcutKey)",
                            "Modifiers": "",
                            "Description": "(BETA) Anti-registration shortcut key",
                            "link": "pro-api.sys_shortcutkey.unregistershortcutkey.html",
                            "Parameters": [
                                {
                                    "Parameter": "shortcutKey",
                                    "Type": "TSYS_ShortcutKeys",
                                    "Description": "Shortcut keys, which do not distinguish the incoming arrangement order, will automatically sort and query matching shortcut keys.",
                                    "link": "pro-api.tsys_shortcutkeys.html"
                                }
                            ],
                            "Declaration": "unregisterShortcutKey(shortcutKey: TSYS_ShortcutKeys): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the anti-registration operation successful?"
                            ]
                        }
                    ]
                },
                "SYS_Storage": {
                    "description": "System / Storage Class",
                    "url": "./pro-api.sys_storage.html",
                    "Signature": "export declare class SYS_Storage",
                    "Remark": "Operation interfaces that can be extended with user configuration storage and browser local storage",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "clearExtensionAllUserConfigs()",
                            "Modifiers": "",
                            "Description": "Clear Extended All User Configurations",
                            "link": "pro-api.sys_storage.clearextensionalluserconfigs.html",
                            "Parameters": "",
                            "Declaration": "clearExtensionAllUserConfigs(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This will delete all user configuration information of the current extension. Please be cautious",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "deleteExtensionUserConfig(key)",
                            "Modifiers": "",
                            "Description": "Delete extended user configuration",
                            "link": "pro-api.sys_storage.deleteextensionuserconfig.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Configuration Items",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteExtensionUserConfig(key: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "getExtensionAllUserConfigs()",
                            "Modifiers": "",
                            "Description": "Get extended all user configurations",
                            "link": "pro-api.sys_storage.getextensionalluserconfigs.html",
                            "Parameters": "",
                            "Declaration": "getExtensionAllUserConfigs(): {\n        [key: string]: any;\n    };",
                            "return": [
                                "{ [key: string]: any; }",
                                "Extend all user configuration information",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "getExtensionUserConfig(key)",
                            "Modifiers": "",
                            "Description": "Get extended user configuration",
                            "link": "pro-api.sys_storage.getextensionuserconfig.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Configuration Items",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getExtensionUserConfig(key: string): any | undefined;",
                            "return": [
                                "any | undefined",
                                "The value corresponding to the configuration item will return undefined if it does not exist.",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "setExtensionAllUserConfigs(configs)",
                            "Modifiers": "",
                            "Description": "Settings to extend all user configurations",
                            "link": "pro-api.sys_storage.setextensionalluserconfigs.html",
                            "Parameters": [
                                {
                                    "Parameter": "configs",
                                    "Type": "{ [key: string]: any; }",
                                    "Description": "Extend all user configurations",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setExtensionAllUserConfigs(configs: {\n        [key: string]: any;\n    }): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This move will cover all user configuration information of the current extension. Please be cautious",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        },
                        {
                            "Method": "setExtensionUserConfig(key, value)",
                            "Modifiers": "",
                            "Description": "Set up extended user configuration",
                            "link": "pro-api.sys_storage.setextensionuserconfig.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Configuration Items",
                                    "link": ""
                                },
                                {
                                    "Parameter": "value",
                                    "Type": "any",
                                    "Description": "value",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setExtensionUserConfig(key: string, value: any): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This interface is also used to create a new extension user configuration. If it does not exist during setting, it will be automatically created.",
                                "Note: This interface only extends to be valid, and calls within a standalone script environment will always throw Error"
                            ]
                        }
                    ]
                },
                "SYS_Timer": {
                    "description": "System / Timer Class",
                    "url": "./pro-api.sys_timer.html",
                    "Signature": "export declare class SYS_Timer",
                    "Remark": "Set the timer",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "clearIntervalTimer(id)",
                            "Modifiers": "",
                            "Description": "Clear the specified loop timer",
                            "link": "pro-api.sys_timer.clearintervaltimer.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Timer ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "clearIntervalTimer(id: string): boolean;",
                            "return": [
                                "boolean",
                                "Whether the timer is cleared successfully"
                            ]
                        },
                        {
                            "Method": "clearTimeoutTimer(id)",
                            "Modifiers": "",
                            "Description": "Clear the specified single timer",
                            "link": "pro-api.sys_timer.cleartimeouttimer.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Timer ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "clearTimeoutTimer(id: string): boolean;",
                            "return": [
                                "boolean",
                                "Whether the timer is cleared successfully"
                            ]
                        },
                        {
                            "Method": "setIntervalTimer(id, timeout, callFn, args)",
                            "Modifiers": "",
                            "Description": "Set the loop timer",
                            "link": "pro-api.sys_timer.setintervaltimer.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Timer ID, used to locate & delete timer",
                                    "link": ""
                                },
                                {
                                    "Parameter": "timeout",
                                    "Type": "number",
                                    "Description": "Time time, unit ms",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callFn",
                                    "Type": "(...args: any) => void",
                                    "Description": "Calling functions at regular intervals",
                                    "link": ""
                                },
                                {
                                    "Parameter": "args",
                                    "Type": "any",
                                    "Description": "Pass the parameters of the function called at a time",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setIntervalTimer(id: string, timeout: number, callFn: (...args: any) => void, ...args: any): boolean;",
                            "return": [
                                "boolean",
                                "Is the timer set successfully?",
                                "If a timer with duplicate ID is encountered, the previously set timer will be cleared"
                            ]
                        },
                        {
                            "Method": "setTimeoutTimer(id, timeout, callFn, args)",
                            "Modifiers": "",
                            "Description": "Set a single timer",
                            "link": "pro-api.sys_timer.settimeouttimer.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Timer ID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "timeout",
                                    "Type": "number",
                                    "Description": "Time time, unit ms",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callFn",
                                    "Type": "(...args: any) => void",
                                    "Description": "Calling functions at regular intervals",
                                    "link": ""
                                },
                                {
                                    "Parameter": "args",
                                    "Type": "any",
                                    "Description": "Pass the parameters of the function called at a time",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setTimeoutTimer(id: string, timeout: number, callFn: (...args: any) => void, ...args: any): boolean;",
                            "return": [
                                "boolean",
                                "Is the timer set successfully?",
                                "If a timer with duplicate ID is encountered, the previously set timer will be cleared"
                            ]
                        }
                    ]
                },
                "SYS_Unit": {
                    "description": "System / Unit Class",
                    "url": "./pro-api.sys_unit.html",
                    "Signature": "export declare class SYS_Unit",
                    "Remark": "Control the basic function of the data unit and unit conversion of the system, the current system data unit span is equivalent to mil",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getSystemDataUnit()",
                            "Modifiers": "",
                            "Description": "Obtain API system data unit span",
                            "link": "pro-api.sys_unit.getsystemdataunit.html",
                            "Parameters": "",
                            "Declaration": "getSystemDataUnit(): ESYS_Unit.MIL;",
                            "return": [
                                "ESYS_Unit.MIL",
                                "unit",
                                "The current API system data unit span is equivalent to mil and will not change"
                            ]
                        },
                        {
                            "Method": "inchToMil(inch, numberOfDecimals)",
                            "Modifiers": "",
                            "Description": "Unit conversion: inches to mile",
                            "link": "pro-api.sys_unit.inchtomil.html",
                            "Parameters": [
                                {
                                    "Parameter": "inch",
                                    "Type": "number",
                                    "Description": "Enter the number of inches",
                                    "link": ""
                                },
                                {
                                    "Parameter": "numberOfDecimals",
                                    "Type": "number",
                                    "Description": "(Optional) Reserved decimal places, default to 4",
                                    "link": ""
                                }
                            ],
                            "Declaration": "inchToMil(inch: number, numberOfDecimals?: number): number;",
                            "return": [
                                "number",
                                "Output Mill Number"
                            ]
                        },
                        {
                            "Method": "inchToMm(inch, numberOfDecimals)",
                            "Modifiers": "",
                            "Description": "Unit conversion: inches to millimeters",
                            "link": "pro-api.sys_unit.inchtomm.html",
                            "Parameters": [
                                {
                                    "Parameter": "inch",
                                    "Type": "number",
                                    "Description": "Enter the number of inches",
                                    "link": ""
                                },
                                {
                                    "Parameter": "numberOfDecimals",
                                    "Type": "number",
                                    "Description": "(Optional) Reserved decimal places, default to 4",
                                    "link": ""
                                }
                            ],
                            "Declaration": "inchToMm(inch: number, numberOfDecimals?: number): number;",
                            "return": [
                                "number",
                                "Output millimeters"
                            ]
                        },
                        {
                            "Method": "milToInch(mil, numberOfDecimals)",
                            "Modifiers": "",
                            "Description": "Unit conversion: mil to inches",
                            "link": "pro-api.sys_unit.miltoinch.html",
                            "Parameters": [
                                {
                                    "Parameter": "mil",
                                    "Type": "number",
                                    "Description": "Enter the number of miles",
                                    "link": ""
                                },
                                {
                                    "Parameter": "numberOfDecimals",
                                    "Type": "number",
                                    "Description": "(Optional) Reserved decimal places, default to 4",
                                    "link": ""
                                }
                            ],
                            "Declaration": "milToInch(mil: number, numberOfDecimals?: number): number;",
                            "return": [
                                "number",
                                "Output inches"
                            ]
                        },
                        {
                            "Method": "milToMm(mil, numberOfDecimals)",
                            "Modifiers": "",
                            "Description": "Unit conversion: mil to millimeters",
                            "link": "pro-api.sys_unit.miltomm.html",
                            "Parameters": [
                                {
                                    "Parameter": "mil",
                                    "Type": "number",
                                    "Description": "Enter the number of miles",
                                    "link": ""
                                },
                                {
                                    "Parameter": "numberOfDecimals",
                                    "Type": "number",
                                    "Description": "(Optional) Reserved decimal places, default to 4",
                                    "link": ""
                                }
                            ],
                            "Declaration": "milToMm(mil: number, numberOfDecimals?: number): number;",
                            "return": [
                                "number",
                                "Output millimeters"
                            ]
                        },
                        {
                            "Method": "mmToInch(mm, numberOfDecimals)",
                            "Modifiers": "",
                            "Description": "Unit conversion: mm to inches",
                            "link": "pro-api.sys_unit.mmtoinch.html",
                            "Parameters": [
                                {
                                    "Parameter": "mm",
                                    "Type": "number",
                                    "Description": "Enter the millimeter number",
                                    "link": ""
                                },
                                {
                                    "Parameter": "numberOfDecimals",
                                    "Type": "number",
                                    "Description": "(Optional) Reserved decimal places, default to 4",
                                    "link": ""
                                }
                            ],
                            "Declaration": "mmToInch(mm: number, numberOfDecimals?: number): number;",
                            "return": [
                                "number",
                                "Output inches"
                            ]
                        },
                        {
                            "Method": "mmToMil(mm, numberOfDecimals)",
                            "Modifiers": "",
                            "Description": "Unit conversion: mm to mil",
                            "link": "pro-api.sys_unit.mmtomil.html",
                            "Parameters": [
                                {
                                    "Parameter": "mm",
                                    "Type": "number",
                                    "Description": "Enter the millimeter number",
                                    "link": ""
                                },
                                {
                                    "Parameter": "numberOfDecimals",
                                    "Type": "number",
                                    "Description": "(Optional) Reserved decimal places, default to 4",
                                    "link": ""
                                }
                            ],
                            "Declaration": "mmToMil(mm: number, numberOfDecimals?: number): number;",
                            "return": [
                                "number",
                                "Output Mill Number"
                            ]
                        }
                    ]
                },
                "SYS_WebSocket": {
                    "description": "System / WebSocket Class",
                    "url": "./pro-api.sys_websocket.html",
                    "Signature": "export declare class SYS_WebSocket",
                    "Remark": "Interact with WebSocket Server",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "close(id, code, reason, extensionUuid)",
                            "Modifiers": "",
                            "Description": "Close WebSocket Connection",
                            "link": "pro-api.sys_websocket.close.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Custom WebSocket ID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "code",
                                    "Type": "number",
                                    "Description": "(Optional) Digital status code, corresponding to the allowed status code in WebSocket.CloseEvent",
                                    "link": "https://developer.mozilla.org/docs/Web/API/CloseEvent/code"
                                },
                                {
                                    "Parameter": "reason",
                                    "Type": "string",
                                    "Description": "(Optional) A human-readable string explaining why the connection is closed",
                                    "link": ""
                                },
                                {
                                    "Parameter": "extensionUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Extended UUIDs are generally not required to be specified. They only need to be specified as the UUIDs of other extensions when they need to operate the WebSocket connection established by other extensions.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "close(id: string, code?: number, reason?: string, extensionUuid?: string): void;",
                            "return": [
                                "void",
                                "Note: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "register(id, serviceUri, receiveMessageCallFn, connectedCallFn, protocols)",
                            "Modifiers": "",
                            "Description": "Register a WebSocket connection",
                            "link": "pro-api.sys_websocket.register.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Customize WebSocket ID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "serviceUri",
                                    "Type": "string",
                                    "Description": "WebSocket Service Address",
                                    "link": ""
                                },
                                {
                                    "Parameter": "receiveMessageCallFn",
                                    "Type": "(event: MessageEvent<any>) => void | Promise<void>",
                                    "Description": "(Optional) Callback function when a message is received",
                                    "link": ""
                                },
                                {
                                    "Parameter": "connectedCallFn",
                                    "Type": "() => void | Promise<void>",
                                    "Description": "(Optional) Callback function when connection is established",
                                    "link": ""
                                },
                                {
                                    "Parameter": "protocols",
                                    "Type": "string | Array<string>",
                                    "Description": "(Optional) Subprotocol",
                                    "link": ""
                                }
                            ],
                            "Declaration": "register(id: string, serviceUri: string, receiveMessageCallFn?: (event: MessageEvent<any>) => void | Promise<void>, connectedCallFn?: () => void | Promise<void>, protocols?: string | Array<string>): void;",
                            "return": [
                                "void",
                                "It can be used to detect whether the WebSocket connection is normal before execution, but be careful not to try connections with different parameters with the same ID**, which can cause confusion: If a WebSocket connection with a specified ID and is in an active state, the changes to the remaining parameters will not be applied.",
                                "Note: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        },
                        {
                            "Method": "send(id, data, extensionUuid)",
                            "Modifiers": "",
                            "Description": "Send data to the WebSocket server",
                            "link": "pro-api.sys_websocket.send.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Custom WebSocket ID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "data",
                                    "Type": "string | ArrayBuffer | Blob | ArrayBufferView",
                                    "Description": "Sent data",
                                    "link": ""
                                },
                                {
                                    "Parameter": "extensionUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Extended UUIDs are generally not required to be specified. They only need to be specified as the UUIDs of other extensions when they need to operate the WebSocket connection established by other extensions.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "send(id: string, data: string | ArrayBuffer | Blob | ArrayBufferView, extensionUuid?: string): void;",
                            "return": [
                                "void",
                                "Note: This interface requires the user to enable extended external interaction permissions. If not enabled, it will always throw Error."
                            ]
                        }
                    ]
                },
                "SYS_Window": {
                    "description": "System / Window Class",
                    "url": "./pro-api.sys_window.html",
                    "Signature": "export declare class SYS_Window",
                    "Remark": "To ensure security, only limited window jump and listening support is provided. For more operations, please use the inline frame window SYS_IFrame",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "addEventListener(type, listener, options)",
                            "Modifiers": "",
                            "Description": "(BETA) Added event monitoring",
                            "link": "pro-api.sys_window.addeventlistener.html",
                            "Parameters": [
                                {
                                    "Parameter": "type",
                                    "Type": "ESYS_WindowEventType",
                                    "Description": "Event type, currently supports blur focus",
                                    "link": "pro-api.esys_windoweventtype.html"
                                },
                                {
                                    "Parameter": "listener",
                                    "Type": "(ev: any) => any",
                                    "Description": "Event listening callback",
                                    "link": ""
                                },
                                {
                                    "Parameter": "options",
                                    "Type": "{ capture?: boolean; once?: boolean; passive?: boolean; signal?: AbortSignal; }",
                                    "Description": "(Optional) Optional parameters",
                                    "link": ""
                                }
                            ],
                            "Declaration": "addEventListener(type: ESYS_WindowEventType, listener: (ev: any) => any, options?: {\n        capture?: boolean;\n        once?: boolean;\n        passive?: boolean;\n        signal?: AbortSignal;\n    }): ISYS_WindowEventListenerRemovableObject | undefined;",
                            "return": [
                                "ISYS_WindowEventListenerRemovableObject | undefined",
                                "Event listening method, used to remove event listening. If undefined, it means that the event listening failed to create"
                            ]
                        },
                        {
                            "Method": "getCurrentTheme()",
                            "Modifiers": "",
                            "Description": "Get the current topic",
                            "link": "pro-api.sys_window.getcurrenttheme.html",
                            "Parameters": "",
                            "Declaration": "getCurrentTheme(): Promise<ESYS_Theme>;",
                            "return": [
                                "Promise<ESYS_Theme>",
                                "Current topic",
                                "Get the current EDA theme, **Light** or **Dark**"
                            ]
                        },
                        {
                            "Method": "open(url, target)",
                            "Modifiers": "",
                            "Description": "(BETA) Open the resource window",
                            "link": "pro-api.sys_window.open.html",
                            "Parameters": [
                                {
                                    "Parameter": "url",
                                    "Type": "string",
                                    "Description": "The URL or path to load the resource",
                                    "link": ""
                                },
                                {
                                    "Parameter": "target",
                                    "Type": "ESYS_WindowOpenTarget",
                                    "Description": "(Optional) context target",
                                    "link": "pro-api.esys_windowopentarget.html"
                                }
                            ],
                            "Declaration": "open(url: string, target?: ESYS_WindowOpenTarget): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "removeEventListener(removableObject)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove event listening",
                            "link": "pro-api.sys_window.removeeventlistener.html",
                            "Parameters": [
                                {
                                    "Parameter": "removableObject",
                                    "Type": "ISYS_WindowEventListenerRemovableObject",
                                    "Description": "Window event listening removes objects",
                                    "link": "pro-api.isys_windoweventlistenerremovableobject.html"
                                }
                            ],
                            "Declaration": "removeEventListener(removableObject: ISYS_WindowEventListenerRemovableObject): void;",
                            "return": [
                                "void"
                            ]
                        }
                    ]
                }
            },
            "Enumerations": {
                "ESYS_LogType": {
                    "description": "Log Type",
                    "url": "./pro-api.esys_logtype.html",
                    "Signature": "export declare enum ESYS_LogType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ERROR",
                            "Value": "\"error\"",
                            "Description": "mistake",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "FATAL_ERROR",
                            "Value": "\"fatalError\"",
                            "Description": "Fatal error",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INFO",
                            "Value": "\"info\"",
                            "Description": "information",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "WARNING",
                            "Value": "\"warn\"",
                            "Description": "warn",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_ToastMessageType": {
                    "description": "Toast Message Type",
                    "url": "./pro-api.esys_toastmessagetype.html",
                    "Signature": "export declare enum ESYS_ToastMessageType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ASK",
                            "Value": "\"question\"",
                            "Description": "Inquiry",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "ERROR",
                            "Value": "\"error\"",
                            "Description": "mistake",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INFO",
                            "Value": "\"info\"",
                            "Description": "information",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SUCCESS",
                            "Value": "\"success\"",
                            "Description": "success",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "WARNING",
                            "Value": "\"warn\"",
                            "Description": "warn",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_BottomPanelTab": {
                    "description": "Bottom Panel Tab",
                    "url": "./pro-api.esys_bottompaneltab.html",
                    "Signature": "export declare enum ESYS_BottomPanelTab",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "FIND",
                            "Value": "\"findResult\"",
                            "Description": "Find results",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "LIBRARY",
                            "Value": "\"library\"",
                            "Description": "Library",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "LOG",
                            "Value": "\"log\"",
                            "Description": "log",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_DRC",
                            "Value": "\"drcResult\"",
                            "Description": "PCB\u00ef\u00bc\u0691DRC",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SCHEMATIC_DRC",
                            "Value": "\"schDrcResult\"",
                            "Description": "Schematic: DRC",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_LeftPanelTab": {
                    "description": "Left Panel Tab",
                    "url": "./pro-api.esys_leftpaneltab.html",
                    "Signature": "export declare enum ESYS_LeftPanelTab",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BASIC_LIBRARY",
                            "Value": "\"basicLibrary\"",
                            "Description": "Commonly used libraries",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DEVICE_STANDARDIZATION",
                            "Value": "\"device-standardization\"",
                            "Description": "Device standardization",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "LIB_DESIGN",
                            "Value": "\"libDesign\"",
                            "Description": "Library design",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PROJECT_DESIGN",
                            "Value": "\"projectDesign\"",
                            "Description": "Engineering Design",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PROJECT_LIST",
                            "Value": "\"project_list\"",
                            "Description": "project",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_RightPanelTab": {
                    "description": "Right Panel Tab",
                    "url": "./pro-api.esys_rightpaneltab.html",
                    "Signature": "export declare enum ESYS_RightPanelTab",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ANNOTATION",
                            "Value": "\"annotation\"",
                            "Description": "annotation",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_3D_PREVIEW_ATTR",
                            "Value": "\"panel3d-attr\"",
                            "Description": "Panel 3D Preview: Properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_3D_PREVIEW_LAYER",
                            "Value": "\"panel3d-layer\"",
                            "Description": "Panel 3D Preview: Layers",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_ATTR",
                            "Value": "\"panel-attr\"",
                            "Description": "Panel: Properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_FILTER",
                            "Value": "\"panel-filter\"",
                            "Description": "Panel: Filter",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_LAYER",
                            "Value": "\"panel-layer\"",
                            "Description": "Panel: Layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_2D_PREVIEW_ATTR",
                            "Value": "\"pcb2d-attr\"",
                            "Description": "PCB 2D Preview: Properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_3D_PREVIEW_ATTR",
                            "Value": "\"pcb3d-attr\"",
                            "Description": "PCB 3D Preview: Properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_3D_PREVIEW_LAYER",
                            "Value": "\"pcb3d-layer\"",
                            "Description": "PCB 3D Preview: Layers",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_ATTR",
                            "Value": "\"pcb-attr\"",
                            "Description": "PCB: Properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_FILTER",
                            "Value": "\"pcb-filter\"",
                            "Description": "PCB: Filter",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_LAYER",
                            "Value": "\"pcb-layer\"",
                            "Description": "PCB: Layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_SKETCHER_ATTR",
                            "Value": "\"pcb-sketcher-attr\"",
                            "Description": "PCB: Measure object properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PROJECT_ATTR",
                            "Value": "\"project-attr\"",
                            "Description": "Project: Properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SCH_ATTR",
                            "Value": "\"sch-attr\"",
                            "Description": "Schematic: Properties",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SCH_FILTER",
                            "Value": "\"sch-filter\"",
                            "Description": "Schematic: Filter",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_ShortcutKeyEffectiveEditorDocumentType": {
                    "description": "Shortcut Key Effective Editor Document Type",
                    "url": "./pro-api.esys_shortcutkeyeffectiveeditordocumenttype.html",
                    "Signature": "export declare enum ESYS_ShortcutKeyEffectiveEditorDocumentType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BLANK",
                            "Value": "0",
                            "Description": "Blank page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "FOOTPRINT",
                            "Value": "5",
                            "Description": "Package",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "HOME",
                            "Value": "1",
                            "Description": "Start Page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL",
                            "Value": "6",
                            "Description": "panel",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_3D_PREVIEW",
                            "Value": "9",
                            "Description": "Panel 3D Preview",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_LIBRARY",
                            "Value": "10",
                            "Description": "Panel library",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB",
                            "Value": "4",
                            "Description": "PCB",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_2D_PREVIEW",
                            "Value": "8",
                            "Description": "PCB 2D Preview",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_3D_PREVIEW",
                            "Value": "7",
                            "Description": "PCB 3D Preview",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SCHEMATIC_PAGE",
                            "Value": "2",
                            "Description": "Schematic diagram page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL",
                            "Value": "3",
                            "Description": "symbol",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_ShortcutKeyEffectiveEditorScene": {
                    "description": "Shortcut Key Effective Editor Scene",
                    "url": "./pro-api.esys_shortcutkeyeffectiveeditorscene.html",
                    "Signature": "export declare enum ESYS_ShortcutKeyEffectiveEditorScene",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "DRAW",
                            "Value": "4",
                            "Description": "Canvas drawing",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "EDITOR",
                            "Value": "1",
                            "Description": "Non-canvas",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "LOCAL",
                            "Value": "6",
                            "Description": "Local shortcut keys",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NOT_SELECT_CANVAS",
                            "Value": "3",
                            "Description": "Canvas not selected",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PLACE",
                            "Value": "5",
                            "Description": "Canvas placement",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SELECT_CANVAS",
                            "Value": "2",
                            "Description": "Canvas selected",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_Unit": {
                    "description": "Unit",
                    "url": "./pro-api.esys_unit.html",
                    "Signature": "export declare enum ESYS_Unit",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "CENTIMETER",
                            "Value": "\"cm\"",
                            "Description": "centimeter",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DECIMETER",
                            "Value": "\"dm\"",
                            "Description": "Decimeter",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "IN",
                            "Value": "\"in\"",
                            "Description": "foot",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INCH",
                            "Value": "\"inch\"",
                            "Description": "inch",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "METER",
                            "Value": "\"m\"",
                            "Description": "rice",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "MIL",
                            "Value": "\"mil\"",
                            "Description": "Mill",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "MILLIMETER",
                            "Value": "\"mm\"",
                            "Description": "mm",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_WindowEventType": {
                    "description": "Window Event Type",
                    "url": "./pro-api.esys_windoweventtype.html",
                    "Signature": "export declare enum ESYS_WindowEventType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BLUR",
                            "Value": "\"blur\"",
                            "Description": "Losing focus",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "FOCUS",
                            "Value": "\"focus\"",
                            "Description": "Get focus",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESYS_WindowOpenTarget": {
                    "description": "Window Open Target",
                    "url": "./pro-api.esys_windowopentarget.html",
                    "Signature": "export declare enum ESYS_WindowOpenTarget",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BLANK",
                            "Value": "\"_blank\"",
                            "Description": "New Tab Page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SELF",
                            "Value": "\"_self\"",
                            "Description": "Current page",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                }
            },
            "Interfaces": {
                "ISYS_FileSystemFileList": {
                    "description": "File System File Path",
                    "url": "./pro-api.isys_filesystemfilelist.html",
                    "Signature": "export interface ISYS_FileSystemFileList",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "fileName",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "File name (no slashes before and after)",
                            "link": "pro-api.isys_filesystemfilelist.filename.html",
                            "Parameters": "",
                            "Declaration": "fileName: string;"
                        },
                        {
                            "Property": "fullPath",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Full path, absolute path containing filename",
                            "link": "pro-api.isys_filesystemfilelist.fullpath.html",
                            "Parameters": "",
                            "Declaration": "fullPath: string;"
                        },
                        {
                            "Property": "isDirectory",
                            "Modifiers": "",
                            "Type": "boolean",
                            "Description": "Is it a directory?",
                            "link": "pro-api.isys_filesystemfilelist.isdirectory.html",
                            "Parameters": "",
                            "Declaration": "isDirectory: boolean;"
                        },
                        {
                            "Property": "relativePath?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Relative path, does not contain the previous incoming path and file name (when there is no incoming path, there is no relative path), and there are no slashes in front and back",
                            "link": "pro-api.isys_filesystemfilelist.relativepath.html",
                            "Parameters": "",
                            "Declaration": "relativePath?: string;"
                        },
                        {
                            "Property": "subFiles?",
                            "Modifiers": "",
                            "Type": "Array<ISYS_FileSystemFileList>",
                            "Description": "(Optional) Directory subfile",
                            "link": "pro-api.isys_filesystemfilelist.html",
                            "Parameters": "",
                            "Declaration": "export interface ISYS_FileSystemFileList"
                        }
                    ]
                },
                "ISYS_LanguageKeyValuePairs": {
                    "description": "Language Data Key-Value Pairs",
                    "url": "./pro-api.isys_languagekeyvaluepairs.html",
                    "Signature": "export interface ISYS_LanguageKeyValuePairs",
                    "Remark": "Single language data",
                    "Ref": ""
                },
                "ISYS_MultilingualLanguagesData": {
                    "description": "Multilingual Data",
                    "url": "./pro-api.isys_multilinguallanguagesdata.html",
                    "Signature": "export interface ISYS_MultilingualLanguagesData",
                    "Remark": "Contains data from multiple languages \u00e2\u20ac\u2039\u00e2\u20ac\u2039under the same namespace",
                    "Ref": ""
                },
                "ISYS_LogLine": {
                    "description": "Log Line",
                    "url": "./pro-api.isys_logline.html",
                    "Signature": "export interface ISYS_LogLine",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "message",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Log content",
                            "link": "pro-api.isys_logline.message.html",
                            "Parameters": "",
                            "Declaration": "message: string;"
                        },
                        {
                            "Property": "timestamp",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Timestamp",
                            "link": "pro-api.isys_logline.timestamp.html",
                            "Parameters": "",
                            "Declaration": "timestamp: number;"
                        },
                        {
                            "Property": "type",
                            "Modifiers": "",
                            "Type": "ESYS_LogType",
                            "Description": "Log Type",
                            "link": "pro-api.esys_logtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ESYS_LogType"
                        }
                    ]
                },
                "ISYS_WindowEventListenerRemovableObject": {
                    "description": "Window Event Listener Removable Object",
                    "url": "./pro-api.isys_windoweventlistenerremovableobject.html",
                    "Signature": "export interface ISYS_WindowEventListenerRemovableObject",
                    "Remark": "This object is obtained from addEventListener and can be used to remove created event listening. You only need to pass it into removeEventListener",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "listener",
                            "Modifiers": "",
                            "Type": "(ev: any) => any",
                            "Description": "",
                            "link": "pro-api.isys_windoweventlistenerremovableobject.listener.html",
                            "Parameters": "",
                            "Declaration": "listener: (ev: any) => any;"
                        },
                        {
                            "Property": "options?",
                            "Modifiers": "",
                            "Type": "{ capture?: boolean; }",
                            "Description": "(Optional)",
                            "link": "pro-api.isys_windoweventlistenerremovableobject.options.html",
                            "Parameters": "",
                            "Declaration": "options?: {\n        capture?: boolean;\n    };"
                        },
                        {
                            "Property": "type",
                            "Modifiers": "",
                            "Type": "ESYS_WindowEventType",
                            "Description": "",
                            "link": "pro-api.esys_windoweventtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ESYS_WindowEventType"
                        }
                    ]
                }
            }
        },
        "Document Tree": {
            "Classes": {
                "DMT_EditorControl": {
                    "description": "Document Tree / Editor Control Class",
                    "url": "./pro-api.dmt_editorcontrol.html",
                    "Signature": "export declare class DMT_EditorControl",
                    "Remark": "Here the editor controls the drawing pages under the currently opened engineering design, and any other documentUuid will be considered non-existent.",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "activateDocument(tabId)",
                            "Modifiers": "",
                            "Description": "Activate the document",
                            "link": "pro-api.dmt_editorcontrol.activatedocument.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "Tag Page ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "activateDocument(tabId: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "Switch to the tab page of the specified document and put the input focus there"
                            ]
                        },
                        {
                            "Method": "activateSplitScreen(splitScreenId)",
                            "Modifiers": "",
                            "Description": "Activate split screen",
                            "link": "pro-api.dmt_editorcontrol.activatesplitscreen.html",
                            "Parameters": [
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "Split Screen ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "activateSplitScreen(splitScreenId: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "Make the input focus"
                            ]
                        },
                        {
                            "Method": "closeDocument(tabId)",
                            "Modifiers": "",
                            "Description": "Close the document",
                            "link": "pro-api.dmt_editorcontrol.closedocument.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "Tag page ID, here supports IDMT_SchematicPageItem.uuid, IDMT_PcbItem.uuid, IDMT_PanelItem.uuid as input",
                                    "link": "pro-api.idmt_schematicpageitem.uuid.html"
                                }
                            ],
                            "Declaration": "closeDocument(tabId: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If the document has not been saved yet, performing this operation will directly lose all unsaved data. Please first execute SCH_Document.save(), PCB_Document.save(), and PNL_Document.save() to save the data after the modification operation is completed."
                            ]
                        },
                        {
                            "Method": "createSplitScreen(splitScreenType, tabId)",
                            "Modifiers": "",
                            "Description": "Create split screen",
                            "link": "pro-api.dmt_editorcontrol.createsplitscreen.html",
                            "Parameters": [
                                {
                                    "Parameter": "splitScreenType",
                                    "Type": "EDMT_EditorSplitScreenDirection",
                                    "Description": "Split screen type, horizontal horizontal, vertical vertical",
                                    "link": "pro-api.edmt_editorsplitscreendirection.html"
                                },
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "Tag page ID, the tag page will be moved into a new split screen",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createSplitScreen(splitScreenType: EDMT_EditorSplitScreenDirection, tabId: string): Promise<{\n        sourceSplitScreenId: string;\n        newSplitScreenId: string;\n    } | undefined>;",
                            "return": [
                                "Promise<{ sourceSplitScreenId: string; newSplitScreenId: string; } | undefined>",
                                "Split Screen ID, sourceSplitScreenId represents source split screen, newSplitScreenId represents new split screen",
                                "Please confirm that there are more than two tab pages on the split screen corresponding to tabId, otherwise the split screen will not be executed and return undefined"
                            ]
                        },
                        {
                            "Method": "generateIndicatorMarkers(markers, color, lineWidth, zoom, tabId)",
                            "Modifiers": "",
                            "Description": "(BETA) Generate indicator marks",
                            "link": "pro-api.dmt_editorcontrol.generateindicatormarkers.html",
                            "Parameters": [
                                {
                                    "Parameter": "markers",
                                    "Type": "Array<IDMT_IndicatorMarkerShape>",
                                    "Description": "Indicator tag shape object array",
                                    "link": "pro-api.idmt_indicatormarkershape.html"
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "{ r: number; g: number; b: number; alpha: number; }",
                                    "Description": "(Optional) Indicates the color of the mark",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "zoom",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to locate and scale",
                                    "link": ""
                                },
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "(Optional) Tab ID, if not passed in, is the canvas where the focus was entered last",
                                    "link": ""
                                }
                            ],
                            "Declaration": "generateIndicatorMarkers(markers: Array<IDMT_IndicatorMarkerShape>, color?: {\n        r: number;\n        g: number;\n        b: number;\n        alpha: number;\n    }, lineWidth?: number, zoom?: boolean, tabId?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Indicates whether the tag generation is successful, false means that the operation is not supported by the canvas or the tabId does not exist",
                                "In the indicator shape data, the unit span of the coordinates of the schematic and symbol canvas is 0.01inch, and the unit span of the coordinates of the PCB and package canvas is mil"
                            ]
                        },
                        {
                            "Method": "getCurrentRenderedAreaImage(tabId)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the image of the rendered area of \u00e2\u20ac\u2039\u00e2\u20ac\u2039the canvas",
                            "link": "pro-api.dmt_editorcontrol.getcurrentrenderedareaimage.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "(Optional) Tab ID, if not passed in, get the canvas where the focus was last entered",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getCurrentRenderedAreaImage(tabId?: string): Promise<Blob | undefined>;",
                            "return": [
                                "Promise<Blob | undefined>"
                            ]
                        },
                        {
                            "Method": "getSplitScreenIdByTabId(tabId)",
                            "Modifiers": "",
                            "Description": "Use Tab ID to get split screen ID",
                            "link": "pro-api.dmt_editorcontrol.getsplitscreenidbytabid.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "Tag Page ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getSplitScreenIdByTabId(tabId: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Split Screen ID"
                            ]
                        },
                        {
                            "Method": "getSplitScreenTree()",
                            "Modifiers": "",
                            "Description": "Get the editor split screen attribute tree",
                            "link": "pro-api.dmt_editorcontrol.getsplitscreentree.html",
                            "Parameters": "",
                            "Declaration": "getSplitScreenTree(): Promise<IDMT_EditorSplitScreenItem | undefined>;",
                            "return": [
                                "Promise<IDMT_EditorSplitScreenItem | undefined>",
                                "The editor split screen attribute tree. If undefined, data acquisition fails"
                            ]
                        },
                        {
                            "Method": "getTabsBySplitScreenId(splitScreenId)",
                            "Modifiers": "",
                            "Description": "Get all tabs under the specified split screen ID",
                            "link": "pro-api.dmt_editorcontrol.gettabsbysplitscreenid.html",
                            "Parameters": [
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "Split Screen ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getTabsBySplitScreenId(splitScreenId: string): Promise<Array<IDMT_EditorTabItem>>;",
                            "return": [
                                "Promise<Array<IDMT_EditorTabItem>>",
                                "Tags list",
                                "If the specified split-screen does not exist directly (i.e. children still exist under it), an empty array is returned"
                            ]
                        },
                        {
                            "Method": "mergeAllDocumentFromSplitScreen()",
                            "Modifiers": "",
                            "Description": "Merge all split screens",
                            "link": "pro-api.dmt_editorcontrol.mergealldocumentfromsplitscreen.html",
                            "Parameters": "",
                            "Declaration": "mergeAllDocumentFromSplitScreen(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "Only available when sub-split screens exist, all sub-split screens will be cancelled and all document tabs will be merged into the initial split screen."
                            ]
                        },
                        {
                            "Method": "moveDocumentToSplitScreen(tabId, splitScreenId)",
                            "Modifiers": "",
                            "Description": "Move the document to the specified split screen",
                            "link": "pro-api.dmt_editorcontrol.movedocumenttosplitscreen.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "Tag Page ID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "Split Screen ID",
                                    "link": "pro-api.idmt_editorsplitscreenitem.id.html"
                                }
                            ],
                            "Declaration": "moveDocumentToSplitScreen(tabId: string, splitScreenId: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "After moving the document, the editor's split-screen attribute tree may change"
                            ]
                        },
                        {
                            "Method": "openDocument(documentUuid, splitScreenId)",
                            "Modifiers": "",
                            "Description": "Open the document",
                            "link": "pro-api.dmt_editorcontrol.opendocument.html",
                            "Parameters": [
                                {
                                    "Parameter": "documentUuid",
                                    "Type": "string",
                                    "Description": "Document UUID, here supports IDMT_SchematicItem.uuid, IDMT_SchematicPageItem.uuid, IDMT_PcbItem.uuid, IDMT_PanelItem.uuid as inputs",
                                    "link": "pro-api.idmt_schematicitem.uuid.html"
                                },
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "(Optional) Split Screen ID, that is, IDMT_EditorSplitScreenItem.id obtained by the DMT_EditorControl.getSplitScreenTree() method",
                                    "link": "pro-api.dmt_editorcontrol.getsplitscreentree.html"
                                }
                            ],
                            "Declaration": "openDocument(documentUuid: string, splitScreenId?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Tag page ID, if undefined, the document is opened fails"
                            ]
                        },
                        {
                            "Method": "openLibraryDocument(libraryUuid, libraryType, uuid, splitScreenId)",
                            "Modifiers": "",
                            "Description": "(BETA) Open library symbols and encapsulate documents",
                            "link": "pro-api.dmt_editorcontrol.openlibrarydocument.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "libraryType",
                                    "Type": "ELIB_LibraryType.SYMBOL | ELIB_LibraryType.FOOTPRINT",
                                    "Description": "Library types, support symbols and encapsulation",
                                    "link": "pro-api.elib_librarytype.html"
                                },
                                {
                                    "Parameter": "uuid",
                                    "Type": "string",
                                    "Description": "Symbols, encapsulation UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "(Optional) Split Screen ID, that is, IDMT_EditorSplitScreenItem.id obtained by the DMT_EditorControl.getSplitScreenTree() method",
                                    "link": "pro-api.dmt_editorcontrol.getsplitscreentree.html"
                                }
                            ],
                            "Declaration": "openLibraryDocument(libraryUuid: string, libraryType: ELIB_LibraryType.SYMBOL | ELIB_LibraryType.FOOTPRINT, uuid: string, splitScreenId?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Tag page ID, if undefined, the document is opened fails"
                            ]
                        },
                        {
                            "Method": "removeIndicatorMarkers(tabId)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove indicator mark",
                            "link": "pro-api.dmt_editorcontrol.removeindicatormarkers.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "(Optional) Tab ID, if not passed in, is the canvas where the focus was entered last",
                                    "link": ""
                                }
                            ],
                            "Declaration": "removeIndicatorMarkers(tabId?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Indicates whether the tag removal is successful, false means that the operation is not supported by the canvas or the tabId does not exist",
                                "This interface removes all generated indicators"
                            ]
                        },
                        {
                            "Method": "tileAllDocumentToSplitScreen()",
                            "Modifiers": "",
                            "Description": "Tile all documents",
                            "link": "pro-api.dmt_editorcontrol.tilealldocumenttosplitscreen.html",
                            "Parameters": "",
                            "Declaration": "tileAllDocumentToSplitScreen(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "Split screens will be automatically created for all open document tabs only if sub-split screens are not available"
                            ]
                        },
                        {
                            "Method": "zoomTo(x, y, scaleRatio, tabId)",
                            "Modifiers": "",
                            "Description": "(BETA) Scale to coordinates",
                            "link": "pro-api.dmt_editorcontrol.zoomto.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "(Optional) Center coordinate X, if not passed in, the current X coordinate will not be changed",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "(Optional) Center coordinate Y. If not passed in, the current Y coordinate will not be changed.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "scaleRatio",
                                    "Type": "number",
                                    "Description": "(Optional) Scaling ratio, if not passed in, the current scaling ratio will not be changed. The unit span is 1/100. If 200 is passed in, it means the scaling ratio is 200%",
                                    "link": ""
                                },
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "(Optional) Tab ID, if not passed in, is the canvas where the focus was entered last",
                                    "link": ""
                                }
                            ],
                            "Declaration": "zoomTo(x?: number, y?: number, scaleRatio?: number, tabId?: string): Promise<{\n        left: number;\n        right: number;\n        top: number;\n        bottom: number;\n    } | false>;",
                            "return": [
                                "Promise<{ left: number; right: number; top: number; bottom: number; } | false>",
                                "Scaling to the area data, false means that the canvas does not support the scaling operation or tabId does not exist",
                                "In the schematic diagram, the unit span of the symbol canvas coordinates is 0.01inch, and in the PCB, the unit span of the packaging canvas coordinates is mil"
                            ]
                        },
                        {
                            "Method": "zoomToAllPrimitives(tabId)",
                            "Modifiers": "",
                            "Description": "(BETA) Scale to all elements (apply to all)",
                            "link": "pro-api.dmt_editorcontrol.zoomtoallprimitives.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "(Optional) Tab ID, if not passed in, is the canvas where the focus was entered last",
                                    "link": ""
                                }
                            ],
                            "Declaration": "zoomToAllPrimitives(tabId?: string): Promise<{\n        left: number;\n        right: number;\n        top: number;\n        bottom: number;\n    } | false>;",
                            "return": [
                                "Promise<{ left: number; right: number; top: number; bottom: number; } | false>",
                                "Scaling to the area data, false means that the canvas does not support the scaling operation or tabId does not exist",
                                "In the return data, the coordinate unit span of the schematic and symbol canvas is 0.01inch, and the coordinate unit span of the PCB and package canvas is mil"
                            ]
                        },
                        {
                            "Method": "zoomToRegion(left, right, top, bottom, tabId)",
                            "Modifiers": "",
                            "Description": "(BETA) Scale to area",
                            "link": "pro-api.dmt_editorcontrol.zoomtoregion.html",
                            "Parameters": [
                                {
                                    "Parameter": "left",
                                    "Type": "number",
                                    "Description": "Rectangle frame first X coordinate",
                                    "link": ""
                                },
                                {
                                    "Parameter": "right",
                                    "Type": "number",
                                    "Description": "Rectangle frame second X coordinate",
                                    "link": ""
                                },
                                {
                                    "Parameter": "top",
                                    "Type": "number",
                                    "Description": "First Y coordinate of rectangular frame",
                                    "link": ""
                                },
                                {
                                    "Parameter": "bottom",
                                    "Type": "number",
                                    "Description": "Rectangle frame second Y coordinate",
                                    "link": ""
                                },
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "(Optional) Tab ID, if not passed in, is the canvas where the focus was entered last",
                                    "link": ""
                                }
                            ],
                            "Declaration": "zoomToRegion(left: number, right: number, top: number, bottom: number, tabId?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "In the schematic diagram, the unit span of the symbol canvas coordinates is 0.01inch, and in the PCB, the unit span of the packaging canvas coordinates is mil"
                            ]
                        },
                        {
                            "Method": "zoomToSelectedPrimitives(tabId)",
                            "Modifiers": "",
                            "Description": "(BETA) Zoom to selected primitives (Adapted to selected)",
                            "link": "pro-api.dmt_editorcontrol.zoomtoselectedprimitives.html",
                            "Parameters": [
                                {
                                    "Parameter": "tabId",
                                    "Type": "string",
                                    "Description": "(Optional) Tab ID, if not passed in, is the canvas where the focus was entered last",
                                    "link": ""
                                }
                            ],
                            "Declaration": "zoomToSelectedPrimitives(tabId?: string): Promise<{\n        left: number;\n        right: number;\n        top: number;\n        bottom: number;\n    } | false>;",
                            "return": [
                                "Promise<{ left: number; right: number; top: number; bottom: number; } | false>",
                                "Scaling to the area data, false means that the canvas does not support the scaling operation or tabId does not exist",
                                "In the return data, the coordinate unit span of the schematic and symbol canvas is 0.01inch, and the coordinate unit span of the PCB and package canvas is mil"
                            ]
                        }
                    ]
                },
                "DMT_SelectControl": {
                    "description": "Document Tree / Selection Control Class",
                    "url": "./pro-api.dmt_selectcontrol.html",
                    "Signature": "export declare class DMT_SelectControl",
                    "Remark": "Search and control the focus selection in the document tree",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getCurrentDocumentInfo()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the properties of the current document",
                            "link": "pro-api.dmt_selectcontrol.getcurrentdocumentinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentDocumentInfo(): Promise<IDMT_EditorDocumentItem | undefined>;",
                            "return": [
                                "Promise<IDMT_EditorDocumentItem | undefined>",
                                "Objects composed of document type, UUID, and UUID of the project to which it belongs. If undefined, it will fail to obtain.",
                                "Only effective after an open project exists, the document type, UUID, and UUID of the project that is currently open and has the last input focus will be obtained."
                            ]
                        }
                    ]
                },
                "DMT_Workspace": {
                    "description": "Document Tree / Workspace Class",
                    "url": "./pro-api.dmt_workspace.html",
                    "Signature": "export declare class DMT_Workspace",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getAllWorkspacesInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties for all workspaces",
                            "link": "pro-api.dmt_workspace.getallworkspacesinfo.html",
                            "Parameters": "",
                            "Declaration": "getAllWorkspacesInfo(): Promise<Array<IDMT_WorkspaceItem>>;",
                            "return": [
                                "Promise<Array<IDMT_WorkspaceItem>>",
                                "Detailed properties for all workspaces"
                            ]
                        },
                        {
                            "Method": "getCurrentWorkspaceInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of the current workspace",
                            "link": "pro-api.dmt_workspace.getcurrentworkspaceinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentWorkspaceInfo(): Promise<IDMT_WorkspaceItem | undefined>;",
                            "return": [
                                "Promise<IDMT_WorkspaceItem | undefined>",
                                "Detailed properties of the workspace, if undefined, the acquisition fails",
                                "The detailed properties of the current workspace will be obtained"
                            ]
                        },
                        {
                            "Method": "toggleToWorkspace(workspaceUuid)",
                            "Modifiers": "",
                            "Description": "Switch to workspace",
                            "link": "pro-api.dmt_workspace.toggletoworkspace.html",
                            "Parameters": [
                                {
                                    "Parameter": "workspaceUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Workspace UUID, if not specified, switch to personal workspace",
                                    "link": ""
                                }
                            ],
                            "Declaration": "toggleToWorkspace(workspaceUuid?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the switch successful?"
                            ]
                        }
                    ]
                },
                "DMT_Team": {
                    "description": "Document Tree / Team Class",
                    "url": "./pro-api.dmt_team.html",
                    "Signature": "export declare class DMT_Team",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getAllInvolvedTeamInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed attributes for all participating teams",
                            "link": "pro-api.dmt_team.getallinvolvedteaminfo.html",
                            "Parameters": "",
                            "Declaration": "getAllInvolvedTeamInfo(): Promise<Array<IDMT_TeamItem>>;",
                            "return": [
                                "Promise<Array<IDMT_TeamItem>>",
                                "Detailed attributes of all participating teams"
                            ]
                        },
                        {
                            "Method": "getAllTeamsInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed attributes for all direct teams",
                            "link": "pro-api.dmt_team.getallteamsinfo.html",
                            "Parameters": "",
                            "Declaration": "getAllTeamsInfo(): Promise<Array<IDMT_TeamItem>>;",
                            "return": [
                                "Promise<Array<IDMT_TeamItem>>",
                                "Detailed attributes for all teams",
                                "Individuals are essentially also a team called **Personals*"
                            ]
                        },
                        {
                            "Method": "getCurrentTeamInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed attributes of the current team",
                            "link": "pro-api.dmt_team.getcurrentteaminfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentTeamInfo(): Promise<IDMT_TeamItem | undefined>;",
                            "return": [
                                "Promise<IDMT_TeamItem | undefined>",
                                "The detailed attributes of the team, if undefined, the acquisition fails",
                                "The detailed properties of the team that is currently open and has the last input focus will be obtained."
                            ]
                        }
                    ]
                },
                "DMT_Folder": {
                    "description": "Document Tree / Folder Class",
                    "url": "./pro-api.dmt_folder.html",
                    "Signature": "export declare class DMT_Folder",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "createFolder(folderName, teamUuid, parentFolderUuid, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a folder",
                            "link": "pro-api.dmt_folder.createfolder.html",
                            "Parameters": [
                                {
                                    "Parameter": "folderName",
                                    "Type": "string",
                                    "Description": "Folder name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "Team UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "parentFolderUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Parent folder UUID, if not specified, is the root folder",
                                    "link": ""
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) folder description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createFolder(folderName: string, teamUuid: string, parentFolderUuid?: string, description?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Folder UUID, if undefined, creation fails"
                            ]
                        },
                        {
                            "Method": "deleteFolder(teamUuid, folderUuid)",
                            "Modifiers": "",
                            "Description": "Delete folder",
                            "link": "pro-api.dmt_folder.deletefolder.html",
                            "Parameters": [
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "Team UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "Folder UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteFolder(teamUuid: string, folderUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "getAllFoldersUuid(teamUuid)",
                            "Modifiers": "",
                            "Description": "Get the UUID of all folders",
                            "link": "pro-api.dmt_folder.getallfoldersuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "Team UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllFoldersUuid(teamUuid: string): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Folder UUID Array",
                                "This interface ignores hierarchical information and will return the UUIDs of folders of all hierarchies and place them in a one-dimensional array."
                            ]
                        },
                        {
                            "Method": "getFolderInfo(teamUuid, folderUuid)",
                            "Modifiers": "",
                            "Description": "Get folder detailed properties",
                            "link": "pro-api.dmt_folder.getfolderinfo.html",
                            "Parameters": [
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "Team UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "Folder UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getFolderInfo(teamUuid: string, folderUuid: string): Promise<IDMT_FolderItem | undefined>;",
                            "return": [
                                "Promise<IDMT_FolderItem | undefined>",
                                "Folder attribute, if undefined, it fails to obtain",
                                "When parentFolderUuid is equal to teamUuid, it represents that the current folder is a first-level folder under the specified team"
                            ]
                        },
                        {
                            "Method": "modifyFolderDescription(teamUuid, folderUuid, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify folder description",
                            "link": "pro-api.dmt_folder.modifyfolderdescription.html",
                            "Parameters": [
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "Team UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "Folder UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) folder description, if undefined, clear the existing project description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyFolderDescription(teamUuid: string, folderUuid: string, description?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful",
                                "Modifying the folder description requires interaction with the workspace system. There is a delay in the modification operation and it takes a short wait before the effect will be presented."
                            ]
                        },
                        {
                            "Method": "modifyFolderName(teamUuid, folderUuid, folderName)",
                            "Modifiers": "",
                            "Description": "Modify folder name",
                            "link": "pro-api.dmt_folder.modifyfoldername.html",
                            "Parameters": [
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "Team UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "Folder UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderName",
                                    "Type": "string",
                                    "Description": "Folder name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyFolderName(teamUuid: string, folderUuid: string, folderName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful"
                            ]
                        },
                        {
                            "Method": "moveFolderToFolder(teamUuid, folderUuid, parentFolderUuid)",
                            "Modifiers": "",
                            "Description": "Move folders",
                            "link": "pro-api.dmt_folder.movefoldertofolder.html",
                            "Parameters": [
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "Team UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "Folder UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "parentFolderUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Parent folder UUID, if not specified, defaults to the root folder",
                                    "link": ""
                                }
                            ],
                            "Declaration": "moveFolderToFolder(teamUuid: string, folderUuid: string, parentFolderUuid?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the move is successful"
                            ]
                        }
                    ]
                },
                "DMT_Project": {
                    "description": "Document Tree / Project Management Class",
                    "url": "./pro-api.dmt_project.html",
                    "Signature": "export declare class DMT_Project",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "createProject(projectFriendlyName, projectName, teamUuid, folderUuid, description, collaborationMode)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a project",
                            "link": "pro-api.dmt_project.createproject.html",
                            "Parameters": [
                                {
                                    "Parameter": "projectFriendlyName",
                                    "Type": "string",
                                    "Description": "Project friendly name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "projectName",
                                    "Type": "string",
                                    "Description": "(Optional) Project name, not repeated, only supports letters a-zA-Z, numbers 0-9, and mid-score -. If not specified, it will be automatically generated based on the project-friendly name.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Team UUID, if not specified, defaults to individual; Team UUID must be specified in the environment where there is no personal project.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "(Optional) folder UUID, if not specified, is the root folder",
                                    "link": ""
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) Project Description",
                                    "link": ""
                                },
                                {
                                    "Parameter": "collaborationMode",
                                    "Type": "EDMT_ProjectCollaborationMode",
                                    "Description": "(Optional) Project Collaboration Mode. If team permissions do not require project settings, this parameter will be ignored.",
                                    "link": "pro-api.edmt_projectcollaborationmode.html"
                                }
                            ],
                            "Declaration": "createProject(projectFriendlyName: string, projectName?: string, teamUuid?: string, folderUuid?: string, description?: string, collaborationMode?: EDMT_ProjectCollaborationMode): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Project UUID, if undefined, creation fails"
                            ]
                        },
                        {
                            "Method": "getAllProjectsUuid(teamUuid, folderUuid, workspaceUuid)",
                            "Modifiers": "",
                            "Description": "Get the UUIDs of all projects",
                            "link": "pro-api.dmt_project.getallprojectsuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "teamUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Team UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "(Optional) folder UUID, if not specified, defaults to the team's root folder",
                                    "link": ""
                                },
                                {
                                    "Parameter": "workspaceUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Workspace UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllProjectsUuid(teamUuid?: string, folderUuid?: string, workspaceUuid?: string): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Project UUID array",
                                "If you specify teamUuid, you will get all projects under the specified team;",
                                "If folderUuid is specified, all projects under the specified folder are obtained;",
                                "teamUuid and folderUuid require and only allow one of them to be specified. If both are specified, only folderUuid will be taken;",
                                "If you specify workspaceUuid, you will get all projects under the specified team/folder under the specified Workspace"
                            ]
                        },
                        {
                            "Method": "getCurrentProjectInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of the current project",
                            "link": "pro-api.dmt_project.getcurrentprojectinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentProjectInfo(): Promise<IDMT_ProjectItem | undefined>;",
                            "return": [
                                "Promise<IDMT_ProjectItem | undefined>",
                                "Project properties, if undefined, the acquisition fails",
                                "The detailed properties of the project associated with the schematic, PCB, and panel that are currently open and have the last input focus will be obtained."
                            ]
                        },
                        {
                            "Method": "getProjectInfo(projectUuid)",
                            "Modifiers": "",
                            "Description": "Get project properties",
                            "link": "pro-api.dmt_project.getprojectinfo.html",
                            "Parameters": [
                                {
                                    "Parameter": "projectUuid",
                                    "Type": "string",
                                    "Description": "Project UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getProjectInfo(projectUuid: string): Promise<IDMT_BriefProjectItem | undefined>;",
                            "return": [
                                "Promise<IDMT_BriefProjectItem | undefined>",
                                "Simple engineering properties, if undefined, the acquisition fails",
                                "This interface can only read simple engineering properties. If you need a detailed project tree, please use the getCurrentProjectInfo interface"
                            ]
                        },
                        {
                            "Method": "moveProjectToFolder(projectUuid, folderUuid)",
                            "Modifiers": "",
                            "Description": "Move project to folder",
                            "link": "pro-api.dmt_project.moveprojecttofolder.html",
                            "Parameters": [
                                {
                                    "Parameter": "projectUuid",
                                    "Type": "string",
                                    "Description": "Project UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "folderUuid",
                                    "Type": "string",
                                    "Description": "(Optional) folder UUID can only be a folder under the team or individual where the current project is located. If undefined, it will be moved to the root folder of the current team.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "moveProjectToFolder(projectUuid: string, folderUuid?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the move is successful"
                            ]
                        },
                        {
                            "Method": "openProject(projectUuid)",
                            "Modifiers": "",
                            "Description": "Open the project",
                            "link": "pro-api.dmt_project.openproject.html",
                            "Parameters": [
                                {
                                    "Parameter": "projectUuid",
                                    "Type": "string",
                                    "Description": "Project UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "openProject(projectUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the project is successfully opened",
                                "This operation will open the specified project on the EDA front end. If other projects have been opened and there are unsaved changes, performing this operation will directly lose all unsaved data."
                            ]
                        }
                    ]
                },
                "DMT_Board": {
                    "description": "Document Tree / Board Management Class",
                    "url": "./pro-api.dmt_board.html",
                    "Signature": "export declare class DMT_Board",
                    "Remark": "Perform board management related operations in the currently opened project",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copyBoard(sourceBoardName)",
                            "Modifiers": "",
                            "Description": "Copy the board",
                            "link": "pro-api.dmt_board.copyboard.html",
                            "Parameters": [
                                {
                                    "Parameter": "sourceBoardName",
                                    "Type": "string",
                                    "Description": "Source board name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copyBoard(sourceBoardName: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "New board name, if undefined, copying fails"
                            ]
                        },
                        {
                            "Method": "createBoard(schematicUuid, pcbUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a Board",
                            "link": "pro-api.dmt_board.createboard.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Association schematic UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pcbUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Associate PCB UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createBoard(schematicUuid?: string, pcbUuid?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Board name, if undefined, creation fails"
                            ]
                        },
                        {
                            "Method": "deleteBoard(boardName)",
                            "Modifiers": "",
                            "Description": "Delete the board",
                            "link": "pro-api.dmt_board.deleteboard.html",
                            "Parameters": [
                                {
                                    "Parameter": "boardName",
                                    "Type": "string",
                                    "Description": "Board name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteBoard(boardName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If the specified board does not exist, the interface will return the result of false, indicating that the operation has failed"
                            ]
                        },
                        {
                            "Method": "getAllBoardsInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of all boards in the project",
                            "link": "pro-api.dmt_board.getallboardsinfo.html",
                            "Parameters": "",
                            "Declaration": "getAllBoardsInfo(): Promise<Array<IDMT_BoardItem>>;",
                            "return": [
                                "Promise<Array<IDMT_BoardItem>>",
                                "Array of detailed properties of all boards"
                            ]
                        },
                        {
                            "Method": "getBoardInfo(boardName)",
                            "Modifiers": "",
                            "Description": "Get detailed properties of the board",
                            "link": "pro-api.dmt_board.getboardinfo.html",
                            "Parameters": [
                                {
                                    "Parameter": "boardName",
                                    "Type": "string",
                                    "Description": "Board name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getBoardInfo(boardName: string): Promise<IDMT_BoardItem | undefined>;",
                            "return": [
                                "Promise<IDMT_BoardItem | undefined>",
                                "The detailed properties of the board, if undefined, the acquisition fails"
                            ]
                        },
                        {
                            "Method": "getCurrentBoardInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of the current board",
                            "link": "pro-api.dmt_board.getcurrentboardinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentBoardInfo(): Promise<IDMT_BoardItem | undefined>;",
                            "return": [
                                "Promise<IDMT_BoardItem | undefined>",
                                "The detailed properties of the board, if undefined, the acquisition fails",
                                "It will obtain the schematic diagram currently open and has the last input focus, the detailed properties of the board associated with the PCB"
                            ]
                        },
                        {
                            "Method": "modifyBoardName(originalBoardName, boardName)",
                            "Modifiers": "",
                            "Description": "Modify the board name",
                            "link": "pro-api.dmt_board.modifyboardname.html",
                            "Parameters": [
                                {
                                    "Parameter": "originalBoardName",
                                    "Type": "string",
                                    "Description": "Original board name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "boardName",
                                    "Type": "string",
                                    "Description": "New board name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyBoardName(originalBoardName: string, boardName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful"
                            ]
                        }
                    ]
                },
                "DMT_Schematic": {
                    "description": "Document Tree / Schematic Management Class",
                    "url": "./pro-api.dmt_schematic.html",
                    "Signature": "export declare class DMT_Schematic",
                    "Remark": "Operations related to schematic management in the currently opened project",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copySchematic(schematicUuid, boardName)",
                            "Modifiers": "",
                            "Description": "(BETA) Copying schematic",
                            "link": "pro-api.dmt_schematic.copyschematic.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "Source schematic UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "boardName",
                                    "Type": "string",
                                    "Description": "(Optional) The name of the board to which the new schematic belongs. If not specified, it is a free schematic",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copySchematic(schematicUuid: string, boardName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "New schematic UUID, if undefined, copying fails",
                                "If the schematic diagram is associated with a multiplexed module (the multiplexed module symbol with the same name exists in the engineering library), the new multiplexed module symbol will be created synchronously when copying the schematic diagram."
                            ]
                        },
                        {
                            "Method": "copySchematicPage(schematicPageUuid, schematicUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Copy the schematic page",
                            "link": "pro-api.dmt_schematic.copyschematicpage.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicPageUuid",
                                    "Type": "string",
                                    "Description": "Source schematic diagram page UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Target schematic UUID, if not specified, it is the current schematic",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copySchematicPage(schematicPageUuid: string, schematicUuid?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "New schematic diagram page UUID, if undefined, copying fails"
                            ]
                        },
                        {
                            "Method": "createSchematic(boardName)",
                            "Modifiers": "",
                            "Description": "(BETA) Creation Schematic",
                            "link": "pro-api.dmt_schematic.createschematic.html",
                            "Parameters": [
                                {
                                    "Parameter": "boardName",
                                    "Type": "string",
                                    "Description": "(Optional) The name of the board belonging to, if not specified, it is a free schematic diagram",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createSchematic(boardName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Schematic UUID, if undefined, creation fails"
                            ]
                        },
                        {
                            "Method": "createSchematicPage(schematicUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a schematic page",
                            "link": "pro-api.dmt_schematic.createschematicpage.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "Schematic diagram UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createSchematicPage(schematicUuid: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Schematic diagram page UUID, if undefined, creation fails"
                            ]
                        },
                        {
                            "Method": "deleteSchematic(schematicUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete Schematic",
                            "link": "pro-api.dmt_schematic.deleteschematic.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "Schematic UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteSchematic(schematicUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If the schematic diagram is associated with a multiplexed module (the multiplexed module symbols with the same name exist in the engineering library), the associated PCB and multiplexed module symbols will be deleted simultaneously when deleting the schematic diagram. If the multiplexed module symbols cannot be deleted, they will be skipped."
                            ]
                        },
                        {
                            "Method": "deleteSchematicPage(schematicPageUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the schematic page",
                            "link": "pro-api.dmt_schematic.deleteschematicpage.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicPageUuid",
                                    "Type": "string",
                                    "Description": "Schematic diagram page UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteSchematicPage(schematicPageUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "getAllSchematicPagesInfo()",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of all schematic pages in the project",
                            "link": "pro-api.dmt_schematic.getallschematicpagesinfo.html",
                            "Parameters": "",
                            "Declaration": "getAllSchematicPagesInfo(): Promise<Array<IDMT_SchematicPageItem>>;",
                            "return": [
                                "Promise<Array<IDMT_SchematicPageItem>>",
                                "Array of detailed properties of all schematic pages"
                            ]
                        },
                        {
                            "Method": "getAllSchematicsInfo()",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of all schematic diagrams in the project",
                            "link": "pro-api.dmt_schematic.getallschematicsinfo.html",
                            "Parameters": "",
                            "Declaration": "getAllSchematicsInfo(): Promise<Array<IDMT_SchematicItem>>;",
                            "return": [
                                "Promise<Array<IDMT_SchematicItem>>",
                                "Array of detailed properties of all schematic diagrams"
                            ]
                        },
                        {
                            "Method": "getCurrentSchematicAllSchematicPagesInfo()",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of all schematic pages in the current schematic",
                            "link": "pro-api.dmt_schematic.getcurrentschematicallschematicpagesinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentSchematicAllSchematicPagesInfo(): Promise<Array<IDMT_SchematicPageItem>>;",
                            "return": [
                                "Promise<Array<IDMT_SchematicPageItem>>",
                                "Array of detailed properties of all schematic pages"
                            ]
                        },
                        {
                            "Method": "getCurrentSchematicInfo()",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of the current schematic",
                            "link": "pro-api.dmt_schematic.getcurrentschematicinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentSchematicInfo(): Promise<IDMT_SchematicItem | undefined>;",
                            "return": [
                                "Promise<IDMT_SchematicItem | undefined>",
                                "Detailed properties of the schematic diagram, if undefined, the acquisition fails",
                                "The detailed properties of the schematic associated with the schematic page that is currently open and has the last input focus will be obtained."
                            ]
                        },
                        {
                            "Method": "getCurrentSchematicPageInfo()",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of the current schematic page",
                            "link": "pro-api.dmt_schematic.getcurrentschematicpageinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentSchematicPageInfo(): Promise<IDMT_SchematicPageItem | undefined>;",
                            "return": [
                                "Promise<IDMT_SchematicPageItem | undefined>",
                                "Detailed properties of the schematic diagram page, if undefined, the acquisition fails",
                                "The detailed properties of the schematic page currently open and has the last input focus will be obtained."
                            ]
                        },
                        {
                            "Method": "getSchematicInfo(schematicUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of the schematic",
                            "link": "pro-api.dmt_schematic.getschematicinfo.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "Schematic UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getSchematicInfo(schematicUuid: string): Promise<IDMT_SchematicItem | undefined>;",
                            "return": [
                                "Promise<IDMT_SchematicItem | undefined>",
                                "Detailed properties of the schematic diagram, if undefined, the acquisition fails"
                            ]
                        },
                        {
                            "Method": "getSchematicPageInfo(schematicPageUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of schematic pages",
                            "link": "pro-api.dmt_schematic.getschematicpageinfo.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicPageUuid",
                                    "Type": "string",
                                    "Description": "Schematic diagram page UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getSchematicPageInfo(schematicPageUuid: string): Promise<IDMT_SchematicPageItem | undefined>;",
                            "return": [
                                "Promise<IDMT_SchematicPageItem | undefined>",
                                "Detailed properties of the schematic diagram page, if undefined, the acquisition fails"
                            ]
                        },
                        {
                            "Method": "modifySchematicName(schematicUuid, schematicName)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the schematic name",
                            "link": "pro-api.dmt_schematic.modifyschematicname.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "Schematic UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "schematicName",
                                    "Type": "string",
                                    "Description": "Schematic name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifySchematicName(schematicUuid: string, schematicName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful",
                                "If the schematic diagram is associated with a multiplexed module (the multiplexed module symbol with the same name exists in the engineering library), the multiplexed module symbol name and associated PCB name will be modified simultaneously when modifying the name."
                            ]
                        },
                        {
                            "Method": "modifySchematicPageName(schematicPageUuid, schematicPageName)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the schematic page name",
                            "link": "pro-api.dmt_schematic.modifyschematicpagename.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicPageUuid",
                                    "Type": "string",
                                    "Description": "Schematic diagram page UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "schematicPageName",
                                    "Type": "string",
                                    "Description": "Schematic diagram page name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifySchematicPageName(schematicPageUuid: string, schematicPageName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful"
                            ]
                        },
                        {
                            "Method": "modifySchematicPageTitleBlock(showTitleBlock, titleBlockData)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the schematic page details list",
                            "link": "pro-api.dmt_schematic.modifyschematicpagetitleblock.html",
                            "Parameters": [
                                {
                                    "Parameter": "showTitleBlock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to display a detailed list, undefined will maintain the current state",
                                    "link": ""
                                },
                                {
                                    "Parameter": "titleBlockData",
                                    "Type": "{ [key: string]: { showTitle?: boolean; showValue?: boolean; value?: any; }; }",
                                    "Description": "(Optional) Details that need to be modified and their modified values",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifySchematicPageTitleBlock(showTitleBlock?: boolean, titleBlockData?: {\n        [key: string]: {\n            showTitle?: boolean;\n            showValue?: boolean;\n            value?: any;\n        };\n    }): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification operation is successful, if the showTitleBlock and titleBlockData are not passed in, it will return false; please note that if there is an unrecognized detail item but the program does not make any errors, it will return a result of true, because the unrecognized detail item is ignored.",
                                "titleBlockData only needs to pass in any detailed items that need to be modified as key, and pass in the value that needs to be modified. Any unrecognized detailed items will be ignored, and any unintroduced items and values \u00e2\u20ac\u2039\u00e2\u20ac\u2039will remain in the default state"
                            ]
                        },
                        {
                            "Method": "reorderSchematicPages(schematicUuid, schematicPageItemsArray)",
                            "Modifiers": "",
                            "Description": "(BETA) Reorder the schematic page",
                            "link": "pro-api.dmt_schematic.reorderschematicpages.html",
                            "Parameters": [
                                {
                                    "Parameter": "schematicUuid",
                                    "Type": "string",
                                    "Description": "The schematic diagram associated with the graph page that performs sorting UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "schematicPageItemsArray",
                                    "Type": "Array<IDMT_SchematicPageItem>",
                                    "Description": "Array of all schematic page properties",
                                    "link": "pro-api.idmt_schematicpageitem.html"
                                }
                            ],
                            "Declaration": "reorderSchematicPages(schematicUuid: string, schematicPageItemsArray: Array<IDMT_SchematicPageItem>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the sorting operation successful?",
                                "Here, the array of the source schematic page attributes needs to be obtained through DMT_Schematic.getAllSchematicPagesInfo() or other upstream methods, and after completing the array sorting, it is passed in."
                            ]
                        }
                    ]
                },
                "DMT_Pcb": {
                    "description": "Document Tree / PCB Management Class",
                    "url": "./pro-api.dmt_pcb.html",
                    "Signature": "export declare class DMT_Pcb",
                    "Remark": "Perform PCB management operations in the currently opened project",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copyPcb(pcbUuid, boardName)",
                            "Modifiers": "",
                            "Description": "Copy PCB",
                            "link": "pro-api.dmt_pcb.copypcb.html",
                            "Parameters": [
                                {
                                    "Parameter": "pcbUuid",
                                    "Type": "string",
                                    "Description": "Source PCB UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "boardName",
                                    "Type": "string",
                                    "Description": "(Optional) The name of the board to which the new PCB belongs, if not specified, it is a free PCB",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copyPcb(pcbUuid: string, boardName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "New PCB UUID, if undefined, copying fails",
                                "Even if the PCB has associated the multiplexed module (the multiplexed module symbol with the same name exists in the project library), the multiplexed module symbol is not created. This operation logic is consistent with the current editor front-end."
                            ]
                        },
                        {
                            "Method": "createPcb(boardName)",
                            "Modifiers": "",
                            "Description": "Create a PCB",
                            "link": "pro-api.dmt_pcb.createpcb.html",
                            "Parameters": [
                                {
                                    "Parameter": "boardName",
                                    "Type": "string",
                                    "Description": "(Optional) The name of the board belonging to, if not specified, it is a free PCB",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createPcb(boardName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "PCB UUID, if undefined, creation fails"
                            ]
                        },
                        {
                            "Method": "deletePcb(pcbUuid)",
                            "Modifiers": "",
                            "Description": "Delete PCB",
                            "link": "pro-api.dmt_pcb.deletepcb.html",
                            "Parameters": [
                                {
                                    "Parameter": "pcbUuid",
                                    "Type": "string",
                                    "Description": "PCB UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deletePcb(pcbUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If the PCB has associated multiplexed modules (the multiplexed module symbols with the same name exist in the project library), the associated schematic and multiplexed module symbols will be deleted simultaneously when deleting the PCB. If the multiplexed module symbols cannot be deleted, they will be skipped"
                            ]
                        },
                        {
                            "Method": "getAllPcbsInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of all PCBs in the project",
                            "link": "pro-api.dmt_pcb.getallpcbsinfo.html",
                            "Parameters": "",
                            "Declaration": "getAllPcbsInfo(): Promise<Array<IDMT_PcbItem>>;",
                            "return": [
                                "Promise<Array<IDMT_PcbItem>>",
                                "Array of detailed properties for all PCBs"
                            ]
                        },
                        {
                            "Method": "getCurrentPcbInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of the current PCB",
                            "link": "pro-api.dmt_pcb.getcurrentpcbinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentPcbInfo(): Promise<IDMT_PcbItem | undefined>;",
                            "return": [
                                "Promise<IDMT_PcbItem | undefined>",
                                "The detailed properties of the PCB, if undefined, the acquisition fails",
                                "The detailed properties of the currently open PCB with the last input focus will be obtained"
                            ]
                        },
                        {
                            "Method": "getPcbInfo(pcbUuid)",
                            "Modifiers": "",
                            "Description": "Get detailed properties of PCB",
                            "link": "pro-api.dmt_pcb.getpcbinfo.html",
                            "Parameters": [
                                {
                                    "Parameter": "pcbUuid",
                                    "Type": "string",
                                    "Description": "PCB UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPcbInfo(pcbUuid: string): Promise<IDMT_PcbItem | undefined>;",
                            "return": [
                                "Promise<IDMT_PcbItem | undefined>",
                                "The detailed properties of the PCB, if undefined, the acquisition fails"
                            ]
                        },
                        {
                            "Method": "modifyPcbName(pcbUuid, pcbName)",
                            "Modifiers": "",
                            "Description": "Modify PCB name",
                            "link": "pro-api.dmt_pcb.modifypcbname.html",
                            "Parameters": [
                                {
                                    "Parameter": "pcbUuid",
                                    "Type": "string",
                                    "Description": "PCB UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pcbName",
                                    "Type": "string",
                                    "Description": "PCB Name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyPcbName(pcbUuid: string, pcbName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful",
                                "If the PCB has associated multiplexed modules (the multiplexed module symbols with the same name exist in the engineering library), the multiplexed module symbol name and associated schematic name will be modified simultaneously when modifying the name."
                            ]
                        }
                    ]
                },
                "DMT_Panel": {
                    "description": "Document Tree / Panel Management Class",
                    "url": "./pro-api.dmt_panel.html",
                    "Signature": "export declare class DMT_Panel",
                    "Remark": "Operations related to panel management in the currently opened project",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copyPanel(panelUuid)",
                            "Modifiers": "",
                            "Description": "Copy Panel",
                            "link": "pro-api.dmt_panel.copypanel.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelUuid",
                                    "Type": "string",
                                    "Description": "Source panel UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copyPanel(panelUuid: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "New panel UUID, if undefined, copying fails"
                            ]
                        },
                        {
                            "Method": "createPanel()",
                            "Modifiers": "",
                            "Description": "(BETA) Create a panel",
                            "link": "pro-api.dmt_panel.createpanel.html",
                            "Parameters": "",
                            "Declaration": "createPanel(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Panel UUID, if undefined, creation fails"
                            ]
                        },
                        {
                            "Method": "deletePanel(panelUuid)",
                            "Modifiers": "",
                            "Description": "Delete the panel",
                            "link": "pro-api.dmt_panel.deletepanel.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelUuid",
                                    "Type": "string",
                                    "Description": "Panel UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deletePanel(panelUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "getAllPanelsInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of all panels in the project",
                            "link": "pro-api.dmt_panel.getallpanelsinfo.html",
                            "Parameters": "",
                            "Declaration": "getAllPanelsInfo(): Promise<Array<IDMT_PanelItem>>;",
                            "return": [
                                "Promise<Array<IDMT_PanelItem>>",
                                "Array of detailed properties for all panels"
                            ]
                        },
                        {
                            "Method": "getCurrentPanelInfo()",
                            "Modifiers": "",
                            "Description": "Get detailed properties of the current panel",
                            "link": "pro-api.dmt_panel.getcurrentpanelinfo.html",
                            "Parameters": "",
                            "Declaration": "getCurrentPanelInfo(): Promise<IDMT_PanelItem | undefined>;",
                            "return": [
                                "Promise<IDMT_PanelItem | undefined>",
                                "The detailed properties of the panel, if undefined, the acquisition fails",
                                "The detailed properties of the panel currently open and with the last input focus will be obtained."
                            ]
                        },
                        {
                            "Method": "getPanelInfo(panelUuid)",
                            "Modifiers": "",
                            "Description": "Get detailed properties of the panel",
                            "link": "pro-api.dmt_panel.getpanelinfo.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelUuid",
                                    "Type": "string",
                                    "Description": "Panel UUID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPanelInfo(panelUuid: string): Promise<IDMT_PanelItem | undefined>;",
                            "return": [
                                "Promise<IDMT_PanelItem | undefined>",
                                "The detailed properties of the panel, if undefined, the acquisition fails"
                            ]
                        },
                        {
                            "Method": "modifyPanelName(panelUuid, panelName)",
                            "Modifiers": "",
                            "Description": "Modify the panel name",
                            "link": "pro-api.dmt_panel.modifypanelname.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelUuid",
                                    "Type": "string",
                                    "Description": "Panel UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "panelName",
                                    "Type": "string",
                                    "Description": "Panel name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyPanelName(panelUuid: string, panelName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the modification is successful"
                            ]
                        }
                    ]
                }
            },
            "Enumerations": {
                "EDMT_ProjectCollaborationMode": {
                    "description": "Project Collaboration Mode",
                    "url": "./pro-api.edmt_projectcollaborationmode.html",
                    "Signature": "export declare enum EDMT_ProjectCollaborationMode",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "FREE",
                            "Value": "1",
                            "Description": "free",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "STRICT",
                            "Value": "3",
                            "Description": "strict",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EDMT_ItemType": {
                    "description": "Document Tree Item Type",
                    "url": "./pro-api.edmt_itemtype.html",
                    "Signature": "export declare enum EDMT_ItemType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BOARD",
                            "Value": "\"Board\"",
                            "Description": "board",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CBB_PCB",
                            "Value": "\"CBB PCB\"",
                            "Description": "Multiplexing module PCB",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CBB_PROJECT",
                            "Value": "\"CBB Project\"",
                            "Description": "Reuse module engineering",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CBB_SCHEMATIC",
                            "Value": "\"CBB Schematic\"",
                            "Description": "Multiplexing module schematic diagram",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "FOLDER",
                            "Value": "\"Folder\"",
                            "Description": "Folders",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL",
                            "Value": "\"Panel\"",
                            "Description": "panel",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB",
                            "Value": "\"PCB\"",
                            "Description": "PCB",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PROJECT",
                            "Value": "\"Project\"",
                            "Description": "project",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SCHEMATIC",
                            "Value": "\"Schematic\"",
                            "Description": "Schematic diagram",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SCHEMATIC_PAGE",
                            "Value": "\"Schematic Page\"",
                            "Description": "Schematic diagram page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TEAM",
                            "Value": "\"Team\"",
                            "Description": "team",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "WORKSPACE",
                            "Value": "\"Workspace\"",
                            "Description": "Workspace",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EDMT_EditorDocumentType": {
                    "description": "Editor Document Type",
                    "url": "./pro-api.edmt_editordocumenttype.html",
                    "Signature": "export declare enum EDMT_EditorDocumentType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BLANK",
                            "Value": "0",
                            "Description": "Blank page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "FOOTPRINT",
                            "Value": "4",
                            "Description": "Package",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "HOME",
                            "Value": "-1",
                            "Description": "Start Page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL",
                            "Value": "26",
                            "Description": "panel",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_3D_PREVIEW",
                            "Value": "27",
                            "Description": "Panel 3D Preview",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_LIBRARY",
                            "Value": "29",
                            "Description": "Panel library",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB",
                            "Value": "3",
                            "Description": "PCB",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_2D_PREVIEW",
                            "Value": "12",
                            "Description": "PCB 2D Preview",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PCB_3D_PREVIEW",
                            "Value": "15",
                            "Description": "PCB 3D Preview",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SCHEMATIC_PAGE",
                            "Value": "1",
                            "Description": "Schematic diagram page",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL_CBB",
                            "Value": "17",
                            "Description": "Multiplexing module symbols",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL_COMPONENT",
                            "Value": "2",
                            "Description": "Component symbols",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL_DRAWING",
                            "Value": "20",
                            "Description": "Drawing symbols",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL_NET_FLAG",
                            "Value": "18",
                            "Description": "Network Identifier",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL_NET_PORT",
                            "Value": "19",
                            "Description": "Network port symbol",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL_NON_ELECTRICAL",
                            "Value": "21",
                            "Description": "No electrical symbols",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL_SHORT_CIRCUIT_FLAG",
                            "Value": "22",
                            "Description": "Short-circuit identifier",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EDMT_EditorSplitScreenDirection": {
                    "description": "Editor Split Screen Direction",
                    "url": "./pro-api.edmt_editorsplitscreendirection.html",
                    "Signature": "export declare enum EDMT_EditorSplitScreenDirection",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "HORIZONTAL",
                            "Value": "\"horizontal\"",
                            "Description": "level",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "VERTICAL",
                            "Value": "\"vertical\"",
                            "Description": "vertical",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                }
            },
            "Interfaces": {
                "IDMT_BoardItem": {
                    "description": "Board Properties",
                    "url": "./pro-api.idmt_boarditem.html",
                    "Signature": "export interface IDMT_BoardItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.BOARD",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Board name",
                            "link": "pro-api.idmt_boarditem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "parentProjectUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Project UUID",
                            "link": "pro-api.idmt_boarditem.parentprojectuuid.html",
                            "Parameters": "",
                            "Declaration": "parentProjectUuid: string;"
                        },
                        {
                            "Property": "pcb",
                            "Modifiers": "",
                            "Type": "IDMT_PcbItem",
                            "Description": "Subordinate PCB",
                            "link": "pro-api.idmt_pcbitem.html",
                            "Parameters": "",
                            "Declaration": "export interface IDMT_PcbItem"
                        },
                        {
                            "Property": "schematic",
                            "Modifiers": "",
                            "Type": "IDMT_SchematicItem",
                            "Description": "Subordinate schematic",
                            "link": "pro-api.idmt_schematicitem.html",
                            "Parameters": "",
                            "Declaration": "export interface IDMT_SchematicItem"
                        }
                    ]
                },
                "IDMT_EditorTabItem": {
                    "description": "Editor Tab Item",
                    "url": "./pro-api.idmt_editortabitem.html",
                    "Signature": "export interface IDMT_EditorTabItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "draggable",
                            "Modifiers": "",
                            "Type": "boolean",
                            "Description": "Is the tab page dragable?",
                            "link": "pro-api.idmt_editortabitem.draggable.html",
                            "Parameters": "",
                            "Declaration": "draggable: boolean;"
                        },
                        {
                            "Property": "isAbleDelete",
                            "Modifiers": "",
                            "Type": "boolean",
                            "Description": "Is the tab page closed",
                            "link": "pro-api.idmt_editortabitem.isabledelete.html",
                            "Parameters": "",
                            "Declaration": "isAbleDelete: boolean;"
                        },
                        {
                            "Property": "tabId",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Tag Page ID",
                            "link": "pro-api.idmt_editortabitem.tabid.html",
                            "Parameters": "",
                            "Declaration": "tabId: string;"
                        },
                        {
                            "Property": "title",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Tag page title",
                            "link": "pro-api.idmt_editortabitem.title.html",
                            "Parameters": "",
                            "Declaration": "title: string;"
                        }
                    ]
                },
                "IDMT_EditorSplitScreenItem": {
                    "description": "Editor Split Screen Properties",
                    "url": "./pro-api.idmt_editorsplitscreenitem.html",
                    "Signature": "export interface IDMT_EditorSplitScreenItem",
                    "Remark": "tabs and children do not exist at the same time. When tabs exist, it means that there is no split screen. Children will be undefined",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "children?",
                            "Modifiers": "",
                            "Type": "Array<IDMT_EditorSplitScreenItem>",
                            "Description": "(Optional) Sub-split screen",
                            "link": "pro-api.idmt_editorsplitscreenitem.html",
                            "Parameters": "",
                            "Declaration": "export interface IDMT_EditorSplitScreenItem"
                        },
                        {
                            "Property": "direction?",
                            "Modifiers": "",
                            "Type": "EDMT_EditorSplitScreenDirection",
                            "Description": "(Optional) Split Screen Orientation",
                            "link": "pro-api.edmt_editorsplitscreendirection.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_EditorSplitScreenDirection"
                        },
                        {
                            "Property": "fatherId?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Parent Split Screen ID",
                            "link": "pro-api.idmt_editorsplitscreenitem.fatherid.html",
                            "Parameters": "",
                            "Declaration": "fatherId?: string;"
                        },
                        {
                            "Property": "id",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Split Screen ID",
                            "link": "pro-api.idmt_editorsplitscreenitem.id.html",
                            "Parameters": "",
                            "Declaration": "id: string;"
                        },
                        {
                            "Property": "tabs?",
                            "Modifiers": "",
                            "Type": "Array<IDMT_EditorTabItem>",
                            "Description": "(Optional) Tags in split screen",
                            "link": "pro-api.idmt_editortabitem.html",
                            "Parameters": "",
                            "Declaration": "export interface IDMT_EditorTabItem"
                        }
                    ]
                },
                "IDMT_FolderItem": {
                    "description": "Folder Properties",
                    "url": "./pro-api.idmt_folderitem.html",
                    "Signature": "export interface IDMT_FolderItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "childrenFoldersUuid?",
                            "Modifiers": "",
                            "Type": "Array<string>",
                            "Description": "(Optional) Subfolder UUID List",
                            "link": "pro-api.idmt_folderitem.childrenfoldersuuid.html",
                            "Parameters": "",
                            "Declaration": "childrenFoldersUuid?: Array<string>;"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) folder description",
                            "link": "pro-api.idmt_folderitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.FOLDER",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Folder name",
                            "link": "pro-api.idmt_folderitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "parentFolderUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Parent folder UUID",
                            "link": "pro-api.idmt_folderitem.parentfolderuuid.html",
                            "Parameters": "",
                            "Declaration": "parentFolderUuid: string;"
                        },
                        {
                            "Property": "teamUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Team UUID",
                            "link": "pro-api.idmt_folderitem.teamuuid.html",
                            "Parameters": "",
                            "Declaration": "teamUuid: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Folder UUID",
                            "link": "pro-api.idmt_folderitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_PanelItem": {
                    "description": "Panel Properties",
                    "url": "./pro-api.idmt_panelitem.html",
                    "Signature": "export interface IDMT_PanelItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.PANEL",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Panel name",
                            "link": "pro-api.idmt_panelitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "parentProjectUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Project UUID",
                            "link": "pro-api.idmt_panelitem.parentprojectuuid.html",
                            "Parameters": "",
                            "Declaration": "parentProjectUuid: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Panel UUID",
                            "link": "pro-api.idmt_panelitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_PcbItem": {
                    "description": "PCB Properties",
                    "url": "./pro-api.idmt_pcbitem.html",
                    "Signature": "export interface IDMT_PcbItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.PCB | EDMT_ItemType.CBB_PCB",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "PCB Name",
                            "link": "pro-api.idmt_pcbitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "parentBoardName?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Name of the board",
                            "link": "pro-api.idmt_pcbitem.parentboardname.html",
                            "Parameters": "",
                            "Declaration": "parentBoardName?: string;"
                        },
                        {
                            "Property": "parentProjectUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Project UUID",
                            "link": "pro-api.idmt_pcbitem.parentprojectuuid.html",
                            "Parameters": "",
                            "Declaration": "parentProjectUuid: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "PCB UUID",
                            "link": "pro-api.idmt_pcbitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_ProjectItem": {
                    "description": "Project Properties",
                    "url": "./pro-api.idmt_projectitem.html",
                    "Signature": "export interface IDMT_ProjectItem extends IDMT_BriefProjectItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "collaborationMode?",
                            "Modifiers": "",
                            "Type": "EDMT_ProjectCollaborationMode",
                            "Description": "(Optional) Engineering Collaboration Mode",
                            "link": "pro-api.edmt_projectcollaborationmode.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ProjectCollaborationMode"
                        },
                        {
                            "Property": "data",
                            "Modifiers": "",
                            "Type": "Array<IDMT_BoardItem | IDMT_SchematicItem | IDMT_PcbItem | IDMT_PanelItem>",
                            "Description": "Document data within the project",
                            "link": "pro-api.idmt_boarditem.html",
                            "Parameters": "",
                            "Declaration": "export interface IDMT_BoardItem"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.idmt_projectitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Project link name",
                            "link": "pro-api.idmt_projectitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        }
                    ]
                },
                "IDMT_BriefProjectItem": {
                    "description": "Brief Project Properties",
                    "url": "./pro-api.idmt_briefprojectitem.html",
                    "Signature": "export interface IDMT_BriefProjectItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "folderUuid?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Folder UUID",
                            "link": "pro-api.idmt_briefprojectitem.folderuuid.html",
                            "Parameters": "",
                            "Declaration": "folderUuid?: string;"
                        },
                        {
                            "Property": "friendlyName",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Project friendly name",
                            "link": "pro-api.idmt_briefprojectitem.friendlyname.html",
                            "Parameters": "",
                            "Declaration": "friendlyName: string;"
                        },
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.PROJECT | EDMT_ItemType.CBB_PROJECT",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "teamUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Team UUID",
                            "link": "pro-api.idmt_briefprojectitem.teamuuid.html",
                            "Parameters": "",
                            "Declaration": "teamUuid: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Project UUID",
                            "link": "pro-api.idmt_briefprojectitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_SchematicItem": {
                    "description": "Schematic Properties",
                    "url": "./pro-api.idmt_schematicitem.html",
                    "Signature": "export interface IDMT_SchematicItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.SCHEMATIC | EDMT_ItemType.CBB_SCHEMATIC",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Schematic name",
                            "link": "pro-api.idmt_schematicitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "page",
                            "Modifiers": "",
                            "Type": "Array<IDMT_SchematicPageItem>",
                            "Description": "Subordinate schematic diagram page",
                            "link": "pro-api.idmt_schematicpageitem.html",
                            "Parameters": "",
                            "Declaration": "export interface IDMT_SchematicPageItem"
                        },
                        {
                            "Property": "parentBoardUuid?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Board UUID",
                            "link": "pro-api.idmt_schematicitem.parentboarduuid.html",
                            "Parameters": "",
                            "Declaration": "parentBoardUuid?: string;"
                        },
                        {
                            "Property": "parentProjectUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Project UUID",
                            "link": "pro-api.idmt_schematicitem.parentprojectuuid.html",
                            "Parameters": "",
                            "Declaration": "parentProjectUuid: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Schematic UUID",
                            "link": "pro-api.idmt_schematicitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_SchematicPageItem": {
                    "description": "Schematic Page Properties",
                    "url": "./pro-api.idmt_schematicpageitem.html",
                    "Signature": "export interface IDMT_SchematicPageItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.SCHEMATIC_PAGE",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Schematic diagram page name",
                            "link": "pro-api.idmt_schematicpageitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "parentSchematicUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Schematic diagram UUID",
                            "link": "pro-api.idmt_schematicpageitem.parentschematicuuid.html",
                            "Parameters": "",
                            "Declaration": "parentSchematicUuid: string;"
                        },
                        {
                            "Property": "showTitleBlock",
                            "Modifiers": "",
                            "Type": "boolean",
                            "Description": "Whether to display a detailed list",
                            "link": "pro-api.idmt_schematicpageitem.showtitleblock.html",
                            "Parameters": "",
                            "Declaration": "showTitleBlock: boolean;"
                        },
                        {
                            "Property": "titleBlockData",
                            "Modifiers": "",
                            "Type": "{ [key: string]: { showTitle: boolean; showValue: boolean; value: any; }; }",
                            "Description": "Detailed table data",
                            "link": "pro-api.idmt_schematicpageitem.titleblockdata.html",
                            "Parameters": "",
                            "Declaration": "titleBlockData: {\n        [key: string]: {\n            showTitle: boolean;\n            showValue: boolean;\n            value: any;\n        };\n    };"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Schematic diagram page UUID",
                            "link": "pro-api.idmt_schematicpageitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_EditorDocumentItem": {
                    "description": "Editor Document Object",
                    "url": "./pro-api.idmt_editordocumentitem.html",
                    "Signature": "export interface IDMT_EditorDocumentItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "documentType",
                            "Modifiers": "",
                            "Type": "EDMT_EditorDocumentType",
                            "Description": "Document Type",
                            "link": "pro-api.edmt_editordocumenttype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_EditorDocumentType"
                        },
                        {
                            "Property": "parentProjectUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "The project to which the document belongs to UUID",
                            "link": "pro-api.idmt_editordocumentitem.parentprojectuuid.html",
                            "Parameters": "",
                            "Declaration": "parentProjectUuid: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Document UUID",
                            "link": "pro-api.idmt_editordocumentitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_TeamItem": {
                    "description": "Team Properties",
                    "url": "./pro-api.idmt_teamitem.html",
                    "Signature": "export interface IDMT_TeamItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "identity",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "The current user's identity (permission group) ID within the team",
                            "link": "pro-api.idmt_teamitem.identity.html",
                            "Parameters": "",
                            "Declaration": "identity: number;"
                        },
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.TEAM",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Team name",
                            "link": "pro-api.idmt_teamitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Team UUID",
                            "link": "pro-api.idmt_teamitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "IDMT_WorkspaceItem": {
                    "description": "Workspace Properties",
                    "url": "./pro-api.idmt_workspaceitem.html",
                    "Signature": "export interface IDMT_WorkspaceItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "itemType",
                            "Modifiers": "readonly",
                            "Type": "EDMT_ItemType.WORKSPACE",
                            "Description": "Project Type",
                            "link": "pro-api.edmt_itemtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EDMT_ItemType"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Workspace name",
                            "link": "pro-api.idmt_workspaceitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Workspace UUID",
                            "link": "pro-api.idmt_workspaceitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                }
            }
        },
        "Schematic & Symbol": {
            "Classes": {
                "SCH_Document": {
                    "description": "Schematic & Symbol / Document Operations Class",
                    "url": "./pro-api.sch_document.html",
                    "Signature": "export declare class SCH_Document",
                    "Remark": "Operations on the overall design document",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "importChanges()",
                            "Modifiers": "",
                            "Description": "Import changes from PCB",
                            "link": "pro-api.sch_document.importchanges.html",
                            "Parameters": "",
                            "Declaration": "importChanges(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the import operation is successful, the import failed or the free schematic returns false"
                            ]
                        },
                        {
                            "Method": "save()",
                            "Modifiers": "",
                            "Description": "Save the document",
                            "link": "pro-api.sch_document.save.html",
                            "Parameters": "",
                            "Declaration": "save(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the save operation is successful, and errors such as the failure to save and upload fail will be returned to false."
                            ]
                        }
                    ]
                },
                "SCH_Drc": {
                    "description": "Schematic & Symbol / Design Rule Check (DRC) Class",
                    "url": "./pro-api.sch_drc.html",
                    "Signature": "export declare class SCH_Drc",
                    "Remark": "Check and set DRC rules",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "check(strict, userInterface)",
                            "Modifiers": "",
                            "Description": "Check DRC",
                            "link": "pro-api.sch_drc.check.html",
                            "Parameters": [
                                {
                                    "Parameter": "strict",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to strictly check, Warning will return false when strictly checked, otherwise return true",
                                    "link": ""
                                },
                                {
                                    "Parameter": "userInterface",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to display the UI (bottom DRC window at the call out)",
                                    "link": ""
                                }
                            ],
                            "Declaration": "check(strict?: boolean, userInterface?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "DRC checks whether there are no errors",
                                "If the check result has an error** or above level, the bottom DRC window will always be called out, ignoring the userInterface parameter"
                            ]
                        }
                    ]
                },
                "SCH_Event": {
                    "description": "Schematic & Symbol / Event Class",
                    "url": "./pro-api.sch_event.html",
                    "Signature": "export declare class SCH_Event",
                    "Remark": "Register event callback",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "addMouseEventListener(id, eventType, callFn, onlyOnce)",
                            "Modifiers": "",
                            "Description": "Added mouse event monitoring",
                            "link": "pro-api.sch_event.addmouseeventlistener.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Event ID to prevent duplicate registration of events",
                                    "link": ""
                                },
                                {
                                    "Parameter": "eventType",
                                    "Type": "'all' | 'selected' | 'clearSelected'",
                                    "Description": "Event Type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callFn",
                                    "Type": "(eventType: 'selected' | 'clearSelected') => void | Promise<void>",
                                    "Description": "Callback function when event triggers",
                                    "link": ""
                                },
                                {
                                    "Parameter": "onlyOnce",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to listen only once",
                                    "link": ""
                                }
                            ],
                            "Declaration": "addMouseEventListener(id: string, eventType: 'all' | 'selected' | 'clearSelected', callFn: (eventType: 'selected' | 'clearSelected') => void | Promise<void>, onlyOnce?: boolean): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "isEventListenerAlreadyExist(id)",
                            "Modifiers": "",
                            "Description": "Query whether the event listening exists",
                            "link": "pro-api.sch_event.iseventlisteneralreadyexist.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Event ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "isEventListenerAlreadyExist(id: string): boolean;",
                            "return": [
                                "boolean",
                                "Whether event listening exists"
                            ]
                        },
                        {
                            "Method": "removeEventListener(id)",
                            "Modifiers": "",
                            "Description": "Remove event listening",
                            "link": "pro-api.sch_event.removeeventlistener.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Event ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "removeEventListener(id: string): boolean;",
                            "return": [
                                "boolean",
                                "Whether to remove the specified event listening"
                            ]
                        }
                    ]
                },
                "SCH_Netlist": {
                    "description": "Schematic & Symbol / Netlist Class",
                    "url": "./pro-api.sch_netlist.html",
                    "Signature": "export declare class SCH_Netlist",
                    "Remark": "Get and update the netlist",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getNetlist(type)",
                            "Modifiers": "",
                            "Description": "Get the netlist",
                            "link": "pro-api.sch_netlist.getnetlist.html",
                            "Parameters": [
                                {
                                    "Parameter": "type",
                                    "Type": "ESYS_NetlistType",
                                    "Description": "(Optional) Netlist format",
                                    "link": "pro-api.esys_netlisttype.html"
                                }
                            ],
                            "Declaration": "getNetlist(type?: ESYS_NetlistType): Promise<string>;",
                            "return": [
                                "Promise<string>",
                                "Netlist data"
                            ]
                        },
                        {
                            "Method": "setNetlist(type, netlist)",
                            "Modifiers": "",
                            "Description": "(BETA) Update the netlist",
                            "link": "pro-api.sch_netlist.setnetlist.html",
                            "Parameters": [
                                {
                                    "Parameter": "type",
                                    "Type": "ESYS_NetlistType | undefined",
                                    "Description": "Netlist format",
                                    "link": "pro-api.esys_netlisttype.html"
                                },
                                {
                                    "Parameter": "netlist",
                                    "Type": "string",
                                    "Description": "Netlist data",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setNetlist(type: ESYS_NetlistType | undefined, netlist: string): Promise<void>;",
                            "return": [
                                "Promise<void>"
                            ]
                        }
                    ]
                },
                "SCH_ManufactureData": {
                    "description": "Schematic & Symbol / Manufacturing Data Class",
                    "url": "./pro-api.sch_manufacturedata.html",
                    "Signature": "export declare class SCH_ManufactureData",
                    "Remark": "Obtain the production materials documents of the current schematic page and place orders quickly",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getBomFile(fileName, fileType, template, filterOptions, statistics, property, columns)",
                            "Modifiers": "",
                            "Description": "(BETA) Get BOM files",
                            "link": "pro-api.sch_manufacturedata.getbomfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileType",
                                    "Type": "'xlsx' | 'csv'",
                                    "Description": "(Optional) File Type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "template",
                                    "Type": "string",
                                    "Description": "(Optional) Template name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "filterOptions",
                                    "Type": "Array<{ property: string; includeValue: boolean | string; }>",
                                    "Description": "(Optional) Filtering rules should only include rules that need to be enabled, property is the rule name, and includeValue is the matching value",
                                    "link": ""
                                },
                                {
                                    "Parameter": "statistics",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Statistics, containing the names of all statistics that need to be enabled",
                                    "link": ""
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) property, containing the names of all attributes that need to be enabled",
                                    "link": ""
                                },
                                {
                                    "Parameter": "columns",
                                    "Type": "Array<IPCB_BomPropertiesTableColumns>",
                                    "Description": "(Optional) column attributes and sorts. If title, sort, group, orderWeight is not passed in, the default value will be taken. null means **None** or **Nine**",
                                    "link": "pro-api.ipcb_bompropertiestablecolumns.html"
                                }
                            ],
                            "Declaration": "getBomFile(fileName?: string, fileType?: 'xlsx' | 'csv', template?: string, filterOptions?: Array<{\n        property: string;\n        includeValue: boolean | string;\n    }>, statistics?: Array<string>, property?: Array<string>, columns?: Array<IPCB_BomPropertiesTableColumns>): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "BOM file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getNetlistFile(fileName, netlistType)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Netlist Files (Netlist)",
                            "link": "pro-api.sch_manufacturedata.getnetlistfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "netlistType",
                                    "Type": "ESYS_NetlistType",
                                    "Description": "(Optional) Netlist Type",
                                    "link": "pro-api.esys_netlisttype.html"
                                }
                            ],
                            "Declaration": "getNetlistFile(fileName?: string, netlistType?: ESYS_NetlistType): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Netlist file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "placeComponentsOrder(interactive, ignoreWarning)",
                            "Modifiers": "",
                            "Description": "(BETA) Component Order",
                            "link": "pro-api.sch_manufacturedata.placecomponentsorder.html",
                            "Parameters": [
                                {
                                    "Parameter": "interactive",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to enable interactive checking If enabled, there will be pop-up windows waiting for the user to interact, and the ignoreWarning parameter cannot be used to ignore the warning, that is, the ignoreWarning parameter will be ignored; if disabled, there will be no internal EDA pop-up window after the call, and the program will perform a silent check. If the order condition is reached, true will be returned and the order page will be opened on the new tab.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "ignoreWarning",
                                    "Type": "boolean",
                                    "Description": "(Optional) Ignore warnings during non-interactive inspections If set to true, all check warning items will be ignored and order information will be generated as much as possible; if set to false, any warning will interrupt execution and return the result of false",
                                    "link": ""
                                }
                            ],
                            "Declaration": "placeComponentsOrder(interactive?: boolean, ignoreWarning?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Passed the order check"
                            ]
                        },
                        {
                            "Method": "placeSmtComponentsOrder(interactive, ignoreWarning)",
                            "Modifiers": "",
                            "Description": "(BETA) SMT component order",
                            "link": "pro-api.sch_manufacturedata.placesmtcomponentsorder.html",
                            "Parameters": [
                                {
                                    "Parameter": "interactive",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to enable interactive checking If enabled, there will be pop-up windows waiting for the user to interact, and the ignoreWarning parameter cannot be used to ignore the warning, that is, the ignoreWarning parameter will be ignored; if disabled, there will be no internal EDA pop-up window after the call, and the program will perform a silent check. If the order condition is reached, true will be returned and the order page will be opened on the new tab.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "ignoreWarning",
                                    "Type": "boolean",
                                    "Description": "(Optional) Ignore warnings during non-interactive inspections If set to true, all check warning items will be ignored and order information will be generated as much as possible; if set to false, any warning will interrupt execution and return the result of false",
                                    "link": ""
                                }
                            ],
                            "Declaration": "placeSmtComponentsOrder(interactive?: boolean, ignoreWarning?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Passed the order check"
                            ]
                        }
                    ]
                },
                "SCH_Primitive": {
                    "description": "Schematic & Symbol / Primitive Class",
                    "url": "./pro-api.sch_primitive.html",
                    "Signature": "export declare class SCH_Primitive",
                    "Remark": "Unified operation of elements",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getPrimitiveByPrimitiveId(id)",
                            "Modifiers": "",
                            "Description": "Gets all properties of the primitive of the specified ID",
                            "link": "pro-api.sch_primitive.getprimitivebyprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Essence ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPrimitiveByPrimitiveId(id: string): Promise<ISCH_Primitive | undefined>;",
                            "return": [
                                "Promise<ISCH_Primitive | undefined>",
                                "All properties of the primitive"
                            ]
                        },
                        {
                            "Method": "getPrimitivesBBox(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the BBox of the primitive",
                            "link": "pro-api.sch_primitive.getprimitivesbbox.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string | ISCH_Primitive>",
                                    "Description": "Essence ID array or element object array",
                                    "link": "pro-api.isch_primitive.html"
                                }
                            ],
                            "Declaration": "getPrimitivesBBox(primitiveIds: Array<string | ISCH_Primitive>): Promise<{\n        minX: number;\n        minY: number;\n        maxX: number;\n        maxY: number;\n    } | undefined>;",
                            "return": [
                                "Promise<{ minX: number; minY: number; maxX: number; maxY: number; } | undefined>",
                                "If the BBox of the element does not exist or does not have a BBox, the undefined result will be returned"
                            ]
                        },
                        {
                            "Method": "getPrimitiveTypeByPrimitiveId(id)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets the element type of the element of the specified ID",
                            "link": "pro-api.sch_primitive.getprimitivetypebyprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Essence ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPrimitiveTypeByPrimitiveId(id: string): Promise<ESCH_PrimitiveType | undefined>;",
                            "return": [
                                "Promise<ESCH_PrimitiveType | undefined>",
                                "Element Type"
                            ]
                        }
                    ]
                },
                "SCH_PrimitiveArc": {
                    "description": "Schematic & Symbol / Arc Primitive Class",
                    "url": "./pro-api.sch_primitivearc.html",
                    "Signature": "export declare class SCH_PrimitiveArc implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(startX, startY, referenceX, referenceY, endX, endY, color, fillColor, lineWidth, lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Create an arc",
                            "link": "pro-api.sch_primitivearc.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "startX",
                                    "Type": "number",
                                    "Description": "Start point X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "startY",
                                    "Type": "number",
                                    "Description": "Starting point Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "referenceX",
                                    "Type": "number",
                                    "Description": "Reference point X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "referenceY",
                                    "Type": "number",
                                    "Description": "Reference point Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "endX",
                                    "Type": "number",
                                    "Description": "Termination point X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "endY",
                                    "Type": "number",
                                    "Description": "Termination point Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "(Optional) color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "(Optional) Fill color, none means no fill, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "(Optional) Line width, range 1-10, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "(Optional) Linear type, null means default",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "create(startX: number, startY: number, referenceX: number, referenceY: number, endX: number, endY: number, color?: string | null, fillColor?: string | null, lineWidth?: number | null, lineType?: ESCH_PrimitiveLineType | null): Promise<ISCH_PrimitiveArc | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveArc | undefined>",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete arcs",
                            "link": "pro-api.sch_primitivearc.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitiveArc | Array<string> | Array<ISCH_PrimitiveArc>",
                                    "Description": "The primitive ID of an arc or an arc primitive object",
                                    "link": "pro-api.isch_primitivearc.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitiveArc | Array<string> | Array<ISCH_PrimitiveArc>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Arcs",
                            "link": "pro-api.sch_primitivearc.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the arc can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitiveArc | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveArc | undefined>",
                                "Arc primitive object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Arcs",
                            "link": "pro-api.sch_primitivearc.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the arc can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveArc>>",
                                "Arc primitive object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll()",
                            "Modifiers": "",
                            "Description": "(BETA) Get all arcs",
                            "link": "pro-api.sch_primitivearc.getall.html",
                            "Parameters": "",
                            "Declaration": "getAll(): Promise<Array<ISCH_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveArc>>",
                                "Arc primitive object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all arcs",
                            "link": "pro-api.sch_primitivearc.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Arc primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the arc",
                            "link": "pro-api.sch_primitivearc.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitiveArc",
                                    "Description": "Essence ID",
                                    "link": "pro-api.isch_primitivearc.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ startX?: number; startY?: number; referenceX?: number; referenceY?: number; endX?: number; endY?: number; color?: string | null; fillColor?: string | null; lineWidth?: number | null; lineType?: ESCH_PrimitiveLineType | null; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitiveArc, property: {\n        startX?: number;\n        startY?: number;\n        referenceX?: number;\n        referenceY?: number;\n        endX?: number;\n        endY?: number;\n        color?: string | null;\n        fillColor?: string | null;\n        lineWidth?: number | null;\n        lineType?: ESCH_PrimitiveLineType | null;\n    }): Promise<ISCH_PrimitiveArc | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveArc | undefined>",
                                "Arc primitive object"
                            ]
                        }
                    ]
                },
                "SCH_PrimitiveBus": {
                    "description": "Schematic & Symbol / Bus Primitive Class",
                    "url": "./pro-api.sch_primitivebus.html",
                    "Signature": "export declare class SCH_PrimitiveBus implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(busName, line, color, lineWidth, lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a bus",
                            "link": "pro-api.sch_primitivebus.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "busName",
                                    "Type": "string",
                                    "Description": "Bus name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "line",
                                    "Type": "Array<number> | Array<Array<number>>",
                                    "Description": "Polyline coordinate groups, each segment is a continuous group of lines described in [x1, y1, x2, y2, x3, y3]. If the polylines have no connection to each other, the creation will fail.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "(Optional) bus color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "(Optional) Line width, range 1-10, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "(Optional) Linear type, null means default",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "create(busName: string, line: Array<number> | Array<Array<number>>, color?: string | null, lineWidth?: number | null, lineType?: ESCH_PrimitiveLineType | null): Promise<ISCH_PrimitiveBus | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveBus | undefined>",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the bus",
                            "link": "pro-api.sch_primitivebus.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitiveBus | Array<string> | Array<ISCH_PrimitiveBus>",
                                    "Description": "Bus primitive ID or bus primitive object",
                                    "link": "pro-api.isch_primitivebus.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitiveBus | Array<string> | Array<ISCH_PrimitiveBus>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the bus",
                            "link": "pro-api.sch_primitivebus.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the bus can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitiveBus | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveBus | undefined>",
                                "Bus element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the bus",
                            "link": "pro-api.sch_primitivebus.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the bus can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitiveBus>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveBus>>",
                                "Bus primitive object, empty array indicates failed acquisition",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll()",
                            "Modifiers": "",
                            "Description": "(BETA) Get all buses",
                            "link": "pro-api.sch_primitivebus.getall.html",
                            "Parameters": "",
                            "Declaration": "getAll(): Promise<Array<ISCH_PrimitiveBus>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveBus>>",
                                "Bus primitive object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all buses",
                            "link": "pro-api.sch_primitivebus.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Bus primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the bus",
                            "link": "pro-api.sch_primitivebus.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitiveBus",
                                    "Description": "Bus primitive ID or bus primitive object",
                                    "link": "pro-api.isch_primitivebus.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ busName?: string; line?: Array<number> | Array<Array<number>>; color?: string | null; lineWidth?: number | null; lineType?: ESCH_PrimitiveLineType | null; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitiveBus, property: {\n        busName?: string;\n        line?: Array<number> | Array<Array<number>>;\n        color?: string | null;\n        lineWidth?: number | null;\n        lineType?: ESCH_PrimitiveLineType | null;\n    }): Promise<ISCH_PrimitiveBus | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveBus | undefined>",
                                "Bus primitive object"
                            ]
                        }
                    ]
                },
                "SCH_PrimitiveCircle": {
                    "description": "Schematic & Symbol / Circle Primitive Class",
                    "url": "./pro-api.sch_primitivecircle.html",
                    "Signature": "export declare class SCH_PrimitiveCircle implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(centerX, centerY, radius, color, fillColor, lineWidth, lineType, fillStyle)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a circle",
                            "link": "pro-api.sch_primitivecircle.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "centerX",
                                    "Type": "number",
                                    "Description": "Centre X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "centerY",
                                    "Type": "number",
                                    "Description": "Centre Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "radius",
                                    "Type": "number",
                                    "Description": "radius",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "(Optional) color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "(Optional) Fill color, none means no fill, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "(Optional) Line width, range 1-10, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "(Optional) Linear type, null means default",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                },
                                {
                                    "Parameter": "fillStyle",
                                    "Type": "ESCH_PrimitiveFillStyle | null",
                                    "Description": "(Optional) Fill style, null means default",
                                    "link": "pro-api.esch_primitivefillstyle.html"
                                }
                            ],
                            "Declaration": "create(centerX: number, centerY: number, radius: number, color?: string | null, fillColor?: string | null, lineWidth?: number | null, lineType?: ESCH_PrimitiveLineType | null, fillStyle?: ESCH_PrimitiveFillStyle | null): Promise<ISCH_PrimitiveCircle>;",
                            "return": [
                                "Promise<ISCH_PrimitiveCircle>",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the circle",
                            "link": "pro-api.sch_primitivecircle.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitiveCircle | Array<string> | Array<ISCH_PrimitiveCircle>",
                                    "Description": "Circular primitive ID or circle primitive object",
                                    "link": "pro-api.isch_primitivecircle.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitiveCircle | Array<string> | Array<ISCH_PrimitiveCircle>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Circles",
                            "link": "pro-api.sch_primitivecircle.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of a circle can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitiveCircle | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveCircle | undefined>",
                                "Circular primitive object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Circles",
                            "link": "pro-api.sch_primitivecircle.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of a circle can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitiveCircle>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveCircle>>",
                                "Circular primitive object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll()",
                            "Modifiers": "",
                            "Description": "(BETA) Get all circles",
                            "link": "pro-api.sch_primitivecircle.getall.html",
                            "Parameters": "",
                            "Declaration": "getAll(): Promise<Array<ISCH_PrimitiveCircle>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveCircle>>",
                                "Circular primitive object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all circles",
                            "link": "pro-api.sch_primitivecircle.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Circular primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the circle",
                            "link": "pro-api.sch_primitivecircle.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitiveCircle",
                                    "Description": "Essence ID",
                                    "link": "pro-api.isch_primitivecircle.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ centerX?: number; centerY?: number; radius?: number; color?: string | null; fillColor?: string | null; lineWidth?: number | null; lineType?: ESCH_PrimitiveLineType | null; fillStyle?: ESCH_PrimitiveFillStyle | null; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitiveCircle, property: {\n        centerX?: number;\n        centerY?: number;\n        radius?: number;\n        color?: string | null;\n        fillColor?: string | null;\n        lineWidth?: number | null;\n        lineType?: ESCH_PrimitiveLineType | null;\n        fillStyle?: ESCH_PrimitiveFillStyle | null;\n    }): Promise<ISCH_PrimitiveCircle | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveCircle | undefined>",
                                "Circular Object"
                            ]
                        }
                    ]
                },
                "SCH_PrimitiveComponent": {
                    "description": "Schematic & Symbol / Component Primitive Class",
                    "url": "./pro-api.sch_primitivecomponent.html",
                    "Signature": "export declare class SCH_PrimitiveComponent implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(component, x, y, subPartName, rotation, mirror, addIntoBom, addIntoPcb)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a device",
                            "link": "pro-api.sch_primitivecomponent.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                },
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "subPartName",
                                    "Type": "string",
                                    "Description": "(Optional) Subtitle name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "mirror",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to mirror",
                                    "link": ""
                                },
                                {
                                    "Parameter": "addIntoBom",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to join BOM",
                                    "link": ""
                                },
                                {
                                    "Parameter": "addIntoPcb",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to go to PCB",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem, x: number, y: number, subPartName?: string, rotation?: number, mirror?: boolean, addIntoBom?: boolean, addIntoPcb?: boolean): Promise<ISCH_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent | undefined>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "createNetFlag(identification, net, x, y, rotation, mirror)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a network identity",
                            "link": "pro-api.sch_primitivecomponent.createnetflag.html",
                            "Parameters": [
                                {
                                    "Parameter": "identification",
                                    "Type": "'Power' | 'Ground' | 'AnalogGround' | 'ProtectGround'",
                                    "Description": "Identification Type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "mirror",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to mirror",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createNetFlag(identification: 'Power' | 'Ground' | 'AnalogGround' | 'ProtectGround', net: string, x: number, y: number, rotation?: number, mirror?: boolean): Promise<ISCH_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent | undefined>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "createNetPort(direction, net, x, y, rotation, mirror)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a network port",
                            "link": "pro-api.sch_primitivecomponent.createnetport.html",
                            "Parameters": [
                                {
                                    "Parameter": "direction",
                                    "Type": "'IN' | 'OUT' | 'BI'",
                                    "Description": "Port Direction",
                                    "link": ""
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "mirror",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to mirror",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createNetPort(direction: 'IN' | 'OUT' | 'BI', net: string, x: number, y: number, rotation?: number, mirror?: boolean): Promise<ISCH_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent | undefined>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "createShortCircuitFlag(x, y, rotation, mirror)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a short-circuit identifier",
                            "link": "pro-api.sch_primitivecomponent.createshortcircuitflag.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "mirror",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to mirror",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createShortCircuitFlag(x: number, y: number, rotation?: number, mirror?: boolean): Promise<ISCH_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent | undefined>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove device",
                            "link": "pro-api.sch_primitivecomponent.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitiveComponent | Array<string> | Array<ISCH_PrimitiveComponent>",
                                    "Description": "Device primitive ID or device primitive object",
                                    "link": "pro-api.isch_primitivecomponent.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitiveComponent | Array<string> | Array<ISCH_PrimitiveComponent>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtaining Devices",
                            "link": "pro-api.sch_primitivecomponent.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the device can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent | undefined>",
                                "Device element object, undefined means acquisition failure"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtaining Devices",
                            "link": "pro-api.sch_primitivecomponent.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the device can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitiveComponent>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveComponent>>",
                                "Device element object, empty array indicates acquisition failure",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(componentType, allSchematicPages)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all devices",
                            "link": "pro-api.sch_primitivecomponent.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "componentType",
                                    "Type": "ESCH_PrimitiveComponentType",
                                    "Description": "(Optional) Device Type",
                                    "link": "pro-api.esch_primitivecomponenttype.html"
                                },
                                {
                                    "Parameter": "allSchematicPages",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to obtain all schematic pages of the device",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(componentType?: ESCH_PrimitiveComponentType, allSchematicPages?: boolean): Promise<Array<ISCH_PrimitiveComponent>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveComponent>>",
                                "Device element object array"
                            ]
                        },
                        {
                            "Method": "getAllPinsByPrimitiveId(primitiveId)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all pins associated with the device",
                            "link": "pro-api.sch_primitivecomponent.getallpinsbyprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string",
                                    "Description": "Device Entity ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPinsByPrimitiveId(primitiveId: string): Promise<Array<ISCH_PrimitiveComponentPin> | undefined>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveComponentPin> | undefined>",
                                "Device pin element array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(componentType, allSchematicPages)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive IDs of all devices",
                            "link": "pro-api.sch_primitivecomponent.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "componentType",
                                    "Type": "ESCH_PrimitiveComponentType",
                                    "Description": "(Optional) Device Type",
                                    "link": "pro-api.esch_primitivecomponenttype.html"
                                },
                                {
                                    "Parameter": "allSchematicPages",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to obtain all schematic pages of the device",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(componentType?: ESCH_PrimitiveComponentType, allSchematicPages?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Device primitive ID array"
                            ]
                        },
                        {
                            "Method": "getAllPropertyNames()",
                            "Modifiers": "",
                            "Description": "(BETA) Gets the set of all attribute names for all devices",
                            "link": "pro-api.sch_primitivecomponent.getallpropertynames.html",
                            "Parameters": "",
                            "Declaration": "getAllPropertyNames(): Promise<string[]>;",
                            "return": [
                                "Promise<string[]>",
                                "A collection of all attribute names for all devices"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the device",
                            "link": "pro-api.sch_primitivecomponent.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitiveComponent",
                                    "Description": "Essence ID",
                                    "link": "pro-api.isch_primitivecomponent.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ x?: number; y?: number; rotation?: number; mirror?: boolean; addIntoBom?: boolean; addIntoPcb?: boolean; designator?: string | null; name?: string | null; uniqueId?: string | null; manufacturer?: string | null; manufacturerId?: string | null; supplier?: string | null; supplierId?: string | null; otherProperty?: { [key: string]: string | number | boolean; }; }",
                                    "Description": "",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitiveComponent, property: {\n        x?: number;\n        y?: number;\n        rotation?: number;\n        mirror?: boolean;\n        addIntoBom?: boolean;\n        addIntoPcb?: boolean;\n        designator?: string | null;\n        name?: string | null;\n        uniqueId?: string | null;\n        manufacturer?: string | null;\n        manufacturerId?: string | null;\n        supplier?: string | null;\n        supplierId?: string | null;\n        otherProperty?: {\n            [key: string]: string | number | boolean;\n        };\n    }): Promise<ISCH_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent | undefined>",
                                "Device element object",
                                "This method is allowed to modify only if the device type is COMPONENT"
                            ]
                        },
                        {
                            "Method": "placeComponentWithMouse(component, subPartName)",
                            "Modifiers": "",
                            "Description": "(BETA) Place the device using the mouse",
                            "link": "pro-api.sch_primitivecomponent.placecomponentwithmouse.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                },
                                {
                                    "Parameter": "subPartName",
                                    "Type": "string",
                                    "Description": "(Optional)",
                                    "link": ""
                                }
                            ],
                            "Declaration": "placeComponentWithMouse(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem, subPartName?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the device is found",
                                "This interface simulates the front-end clicking the place button, and the specified device will be bound to the current mouse and placed on the canvas when the user clicks in the future.",
                                "The return time of this interface does not wait for the user to place the user. Once the device is bound to the mouse, this interface will immediately return the result of true."
                            ]
                        },
                        {
                            "Method": "setNetFlagComponentUuid_AnalogGround(component)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the AnalogGround Network Identification Device UUID in Extended API",
                            "link": "pro-api.sch_primitivecomponent.setnetflagcomponentuuid_analogground.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                }
                            ],
                            "Declaration": "setNetFlagComponentUuid_AnalogGround(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setNetFlagComponentUuid_Ground(component)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the device UUID associated with Ground Network Identification in Extended API",
                            "link": "pro-api.sch_primitivecomponent.setnetflagcomponentuuid_ground.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                }
                            ],
                            "Declaration": "setNetFlagComponentUuid_Ground(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setNetFlagComponentUuid_Power(component)",
                            "Modifiers": "",
                            "Description": "(BETA) Sets the Power Network Identification associated device UUID in the Extended API",
                            "link": "pro-api.sch_primitivecomponent.setnetflagcomponentuuid_power.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                }
                            ],
                            "Declaration": "setNetFlagComponentUuid_Power(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setNetFlagComponentUuid_ProtectGround(component)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the device UUID associated with ProtectGround network identification in the extension API",
                            "link": "pro-api.sch_primitivecomponent.setnetflagcomponentuuid_protectground.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                }
                            ],
                            "Declaration": "setNetFlagComponentUuid_ProtectGround(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setNetPortComponentUuid_BI(component)",
                            "Modifiers": "",
                            "Description": "(BETA) Sets the device UUID associated with the BI network port in the extended API",
                            "link": "pro-api.sch_primitivecomponent.setnetportcomponentuuid_bi.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                }
                            ],
                            "Declaration": "setNetPortComponentUuid_BI(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setNetPortComponentUuid_IN(component)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the device UUID associated with IN network port in the extension API",
                            "link": "pro-api.sch_primitivecomponent.setnetportcomponentuuid_in.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                }
                            ],
                            "Declaration": "setNetPortComponentUuid_IN(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setNetPortComponentUuid_OUT(component)",
                            "Modifiers": "",
                            "Description": "(BETA) Sets the device UUID associated with OUT network port in the extension API",
                            "link": "pro-api.sch_primitivecomponent.setnetportcomponentuuid_out.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem | ILIB_DeviceSearchItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                }
                            ],
                            "Declaration": "setNetPortComponentUuid_OUT(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem | ILIB_DeviceSearchItem): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        }
                    ]
                },
                "SCH_PrimitivePin": {
                    "description": "Schematic & Symbol / Pin Primitive Class",
                    "url": "./pro-api.sch_primitivepin.html",
                    "Signature": "export declare class SCH_PrimitivePin implements ISCH_PrimitiveAPI",
                    "Remark": "Pin primitives are only available with the symbol editor. In the schematic page, the pins associated with the symbol are called Device Pin primitives",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(x, y, pinNumber, pinName, rotation, pinLength, pinColor, pinShape, pinType)",
                            "Modifiers": "",
                            "Description": "(BETA) Create pins",
                            "link": "pro-api.sch_primitivepin.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pinNumber",
                                    "Type": "string",
                                    "Description": "Pin number",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pinName",
                                    "Type": "string",
                                    "Description": "(Optional) Pin Name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle, optional 0 90 180 270",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pinLength",
                                    "Type": "number",
                                    "Description": "(Optional) Pin Length",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pinColor",
                                    "Type": "string | null",
                                    "Description": "(Optional) pin color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pinShape",
                                    "Type": "ESCH_PrimitivePinShape",
                                    "Description": "(Optional) Pin Shape",
                                    "link": "pro-api.esch_primitivepinshape.html"
                                },
                                {
                                    "Parameter": "pinType",
                                    "Type": "ESCH_PrimitivePinType",
                                    "Description": "(Optional) Pin Type",
                                    "link": "pro-api.esch_primitivepintype.html"
                                }
                            ],
                            "Declaration": "create(x: number, y: number, pinNumber: string, pinName?: string, rotation?: number, pinLength?: number, pinColor?: string | null, pinShape?: ESCH_PrimitivePinShape, pinType?: ESCH_PrimitivePinType): Promise<ISCH_PrimitivePin | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitivePin | undefined>",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove pins",
                            "link": "pro-api.sch_primitivepin.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitivePin | Array<string> | Array<ISCH_PrimitivePin>",
                                    "Description": "Pin primitive ID or pin primitive object",
                                    "link": "pro-api.isch_primitivepin.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitivePin | Array<string> | Array<ISCH_PrimitivePin>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get pins",
                            "link": "pro-api.sch_primitivepin.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the pin can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitivePin | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitivePin | undefined>",
                                "Pin element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get pins",
                            "link": "pro-api.sch_primitivepin.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the pin can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitivePin>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitivePin>>",
                                "Pin element object, empty array indicates acquisition failure",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll()",
                            "Modifiers": "",
                            "Description": "(BETA) Get all pins",
                            "link": "pro-api.sch_primitivepin.getall.html",
                            "Parameters": "",
                            "Declaration": "getAll(): Promise<Array<ISCH_PrimitivePin>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitivePin>>",
                                "Pin element object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all pins",
                            "link": "pro-api.sch_primitivepin.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Pin primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify pins",
                            "link": "pro-api.sch_primitivepin.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitivePin",
                                    "Description": "Essence ID",
                                    "link": "pro-api.isch_primitivepin.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ x?: number; y?: number; pinNumber?: string; pinName?: string; rotation?: number; pinLength?: number; pinColor?: string | null; pinShape?: ESCH_PrimitivePinShape; pinType?: ESCH_PrimitivePinType; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.esch_primitivepinshape.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitivePin, property: {\n        x?: number;\n        y?: number;\n        pinNumber?: string;\n        pinName?: string;\n        rotation?: number;\n        pinLength?: number;\n        pinColor?: string | null;\n        pinShape?: ESCH_PrimitivePinShape;\n        pinType?: ESCH_PrimitivePinType;\n    }): Promise<ISCH_PrimitivePin | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitivePin | undefined>",
                                "Pin element object"
                            ]
                        }
                    ]
                },
                "SCH_PrimitivePolygon": {
                    "description": "Schematic & Symbol / Polygon (Polyline) Primitive Class",
                    "url": "./pro-api.sch_primitivepolygon.html",
                    "Signature": "export declare class SCH_PrimitivePolygon implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(line, color, fillColor, lineWidth, lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a polygon",
                            "link": "pro-api.sch_primitivepolygon.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "line",
                                    "Type": "Array<number>",
                                    "Description": "Coordinate group, a continuous set of lines described by [x1, y1, x2, y2, x3, y3]",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "(Optional) color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "(Optional) Fill color, none means no fill, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "(Optional) Line width, range 1-10, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "(Optional) Linear type, null means default",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "create(line: Array<number>, color?: string | null, fillColor?: string | null, lineWidth?: number | null, lineType?: ESCH_PrimitiveLineType | null): Promise<ISCH_PrimitivePolygon | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitivePolygon | undefined>",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete polygons",
                            "link": "pro-api.sch_primitivepolygon.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitivePolygon | Array<string> | Array<ISCH_PrimitivePolygon>",
                                    "Description": "Polygon primitive ID or polygon primitive object",
                                    "link": "pro-api.isch_primitivepolygon.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitivePolygon | Array<string> | Array<ISCH_PrimitivePolygon>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get polygons",
                            "link": "pro-api.sch_primitivepolygon.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of a polygon can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitivePolygon | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitivePolygon | undefined>",
                                "Polygon primitive object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get polygons",
                            "link": "pro-api.sch_primitivepolygon.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of a polygon can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitivePolygon>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitivePolygon>>",
                                "Polygon primitive object, empty array indicates failed acquisition",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll()",
                            "Modifiers": "",
                            "Description": "(BETA) Get all polygons",
                            "link": "pro-api.sch_primitivepolygon.getall.html",
                            "Parameters": "",
                            "Declaration": "getAll(): Promise<Array<ISCH_PrimitivePolygon>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitivePolygon>>",
                                "Array of polygon primitive objects"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all polygons",
                            "link": "pro-api.sch_primitivepolygon.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Polygon primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify polygons",
                            "link": "pro-api.sch_primitivepolygon.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitivePolygon",
                                    "Description": "Essence ID",
                                    "link": "pro-api.isch_primitivepolygon.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ line?: Array<number>; color?: string | null; fillColor?: string | null; lineWidth?: number | null; lineType?: ESCH_PrimitiveLineType | null; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitivePolygon, property: {\n        line?: Array<number>;\n        color?: string | null;\n        fillColor?: string | null;\n        lineWidth?: number | null;\n        lineType?: ESCH_PrimitiveLineType | null;\n    }): Promise<ISCH_PrimitivePolygon | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitivePolygon | undefined>",
                                "Polygonal primitive object"
                            ]
                        }
                    ]
                },
                "SCH_PrimitiveRectangle": {
                    "description": "Schematic & Symbol / Rectangle Primitive Class",
                    "url": "./pro-api.sch_primitiverectangle.html",
                    "Signature": "export declare class SCH_PrimitiveRectangle implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(topLeftX, topLeftY, width, height, cornerRadius, rotation, color, fillColor, lineWidth, lineType, fillStyle)",
                            "Modifiers": "",
                            "Description": "Create a rectangle",
                            "link": "pro-api.sch_primitiverectangle.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "topLeftX",
                                    "Type": "number",
                                    "Description": "Top left point X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "topLeftY",
                                    "Type": "number",
                                    "Description": "Top left point Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "width",
                                    "Type": "number",
                                    "Description": "Width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "height",
                                    "Type": "number",
                                    "Description": "high",
                                    "link": ""
                                },
                                {
                                    "Parameter": "cornerRadius",
                                    "Type": "number",
                                    "Description": "(Optional) Round corner radius",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle, rotate around the upper left point, optional 0 90 180 270",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "(Optional) color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "(Optional) Fill color, none means no fill, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "(Optional) Line width, range 1-10, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "(Optional) Linear type, null means default",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                },
                                {
                                    "Parameter": "fillStyle",
                                    "Type": "ESCH_PrimitiveFillStyle | null",
                                    "Description": "(Optional) Fill style, null means default",
                                    "link": "pro-api.esch_primitivefillstyle.html"
                                }
                            ],
                            "Declaration": "create(topLeftX: number, topLeftY: number, width: number, height: number, cornerRadius?: number, rotation?: number, color?: string | null, fillColor?: string | null, lineWidth?: number | null, lineType?: ESCH_PrimitiveLineType | null, fillStyle?: ESCH_PrimitiveFillStyle | null): Promise<ISCH_PrimitiveRectangle | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveRectangle | undefined>",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "Delete rectangle",
                            "link": "pro-api.sch_primitiverectangle.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitiveRectangle | Array<string> | Array<ISCH_PrimitiveRectangle>",
                                    "Description": "Rectangle primitive ID or rectangle primitive object",
                                    "link": "pro-api.isch_primitiverectangle.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitiveRectangle | Array<string> | Array<ISCH_PrimitiveRectangle>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the rectangle",
                            "link": "pro-api.sch_primitiverectangle.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of a rectangle can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitiveRectangle | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveRectangle | undefined>",
                                "Rectangular element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the rectangle",
                            "link": "pro-api.sch_primitiverectangle.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of a rectangle can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitiveRectangle>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveRectangle>>",
                                "Rectangular element object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll()",
                            "Modifiers": "",
                            "Description": "Get all rectangles",
                            "link": "pro-api.sch_primitiverectangle.getall.html",
                            "Parameters": "",
                            "Declaration": "getAll(): Promise<Array<ISCH_PrimitiveRectangle>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveRectangle>>",
                                "Array of rectangular primitive objects"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get the primitive ID of all rectangles",
                            "link": "pro-api.sch_primitiverectangle.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Rectangle primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify rectangle",
                            "link": "pro-api.sch_primitiverectangle.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitiveRectangle",
                                    "Description": "Essence ID",
                                    "link": "pro-api.isch_primitiverectangle.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ topLeftX?: number; topLeftY?: number; width?: number; height?: number; cornerRadius?: number; rotation?: number; color?: string | null; fillColor?: string | null; lineWidth?: number | null; lineType?: ESCH_PrimitiveLineType | null; fillStyle?: ESCH_PrimitiveFillStyle | null; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitiveRectangle, property: {\n        topLeftX?: number;\n        topLeftY?: number;\n        width?: number;\n        height?: number;\n        cornerRadius?: number;\n        rotation?: number;\n        color?: string | null;\n        fillColor?: string | null;\n        lineWidth?: number | null;\n        lineType?: ESCH_PrimitiveLineType | null;\n        fillStyle?: ESCH_PrimitiveFillStyle | null;\n    }): Promise<ISCH_PrimitiveRectangle | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveRectangle | undefined>",
                                "Rectangular primitive object"
                            ]
                        }
                    ]
                },
                "SCH_PrimitiveText": {
                    "description": "Schematic & Symbol / Text Primitive Class",
                    "url": "./pro-api.sch_primitivetext.html",
                    "Signature": "export declare class SCH_PrimitiveText implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(x, y, content, rotation, textColor, fontName, fontSize, bold, italic, underLine, alignMode)",
                            "Modifiers": "",
                            "Description": "(BETA) Create text",
                            "link": "pro-api.sch_primitivetext.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "content",
                                    "Type": "string",
                                    "Description": "Text content",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle, optional 0 90 180 270",
                                    "link": ""
                                },
                                {
                                    "Parameter": "textColor",
                                    "Type": "string | null",
                                    "Description": "(Optional) Text color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fontName",
                                    "Type": "string | null",
                                    "Description": "(Optional) Font name, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fontSize",
                                    "Type": "number | null",
                                    "Description": "(Optional) Font size, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "bold",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to thicken",
                                    "link": ""
                                },
                                {
                                    "Parameter": "italic",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether italics",
                                    "link": ""
                                },
                                {
                                    "Parameter": "underLine",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to underline",
                                    "link": ""
                                },
                                {
                                    "Parameter": "alignMode",
                                    "Type": "number",
                                    "Description": "(Optional) Alignment mode, 0 left top, 1 center top, 2 right top, 3 left middle, 4 middle middle, 5 right middle, 6 left bottom, 7 mid bottom, 8 right bottom",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(x: number, y: number, content: string, rotation?: number, textColor?: string | null, fontName?: string | null, fontSize?: number | null, bold?: boolean, italic?: boolean, underLine?: boolean, alignMode?: number): Promise<ISCH_PrimitiveText | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveText | undefined>",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete text",
                            "link": "pro-api.sch_primitivetext.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitiveText | Array<string> | Array<ISCH_PrimitiveText>",
                                    "Description": "Essential ID of text or text element object",
                                    "link": "pro-api.isch_primitivetext.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitiveText | Array<string> | Array<ISCH_PrimitiveText>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get text",
                            "link": "pro-api.sch_primitivetext.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the text can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitiveText | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveText | undefined>",
                                "Text element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get text",
                            "link": "pro-api.sch_primitivetext.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the text can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitiveText>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveText>>",
                                "Text element object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll()",
                            "Modifiers": "",
                            "Description": "(BETA) Get all text",
                            "link": "pro-api.sch_primitivetext.getall.html",
                            "Parameters": "",
                            "Declaration": "getAll(): Promise<Array<ISCH_PrimitiveText>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveText>>",
                                "Text primitive object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all text",
                            "link": "pro-api.sch_primitivetext.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Element ID array of text"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify text",
                            "link": "pro-api.sch_primitivetext.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitiveText",
                                    "Description": "Essence ID",
                                    "link": "pro-api.isch_primitivetext.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ x?: number; y?: number; content?: string; rotation?: number; textColor?: string | null; fontName?: string | null; fontSize?: number | null; bold?: boolean; italic?: boolean; underLine?: boolean; alignMode?: number; }",
                                    "Description": "Modify parameters",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitiveText, property: {\n        x?: number;\n        y?: number;\n        content?: string;\n        rotation?: number;\n        textColor?: string | null;\n        fontName?: string | null;\n        fontSize?: number | null;\n        bold?: boolean;\n        italic?: boolean;\n        underLine?: boolean;\n        alignMode?: number;\n    }): Promise<ISCH_PrimitiveText | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveText | undefined>",
                                "Text primitive object"
                            ]
                        }
                    ]
                },
                "SCH_PrimitiveWire": {
                    "description": "Schematic & Symbol / Wire Primitive Class",
                    "url": "./pro-api.sch_primitivewire.html",
                    "Signature": "export declare class SCH_PrimitiveWire implements ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(line, net, color, lineWidth, lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a wire",
                            "link": "pro-api.sch_primitivewire.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "line",
                                    "Type": "Array<number> | Array<Array<number>>",
                                    "Description": "Polyline coordinate groups, each segment is a continuous group of lines described in [x1, y1, x2, y2, x3, y3]. If the polylines have no connection to each other, the creation will fail.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name, if not specified, follow: 1. If no coordinates fall on any element, it defaults to an empty network; 2. If there is a coordinate point on the element of a network, follow the element; 3. If there is multiple coordinate points on the element of multiple different networks, creation fails. If specified, follow: 1. If there is one or more coordinate points on the element of other networks, and other elements are not explicitly specified (usually referring to containing network tags or network ports), other elements follow the specified network; 2. If other elements specify the network, creation fails.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "(Optional) Wire color, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "(Optional) Line width, range 1-10, null means default",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "(Optional) Linear type, null means default",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "create(line: Array<number> | Array<Array<number>>, net?: string, color?: string | null, lineWidth?: number | null, lineType?: ESCH_PrimitiveLineType | null): Promise<ISCH_PrimitiveWire | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveWire | undefined>",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete wires",
                            "link": "pro-api.sch_primitivewire.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | ISCH_PrimitiveWire | Array<string> | Array<ISCH_PrimitiveWire>",
                                    "Description": "The element ID of the wire or the element object of the wire",
                                    "link": "pro-api.isch_primitivewire.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | ISCH_PrimitiveWire | Array<string> | Array<ISCH_PrimitiveWire>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get wires",
                            "link": "pro-api.sch_primitivewire.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the wire can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<ISCH_PrimitiveWire | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveWire | undefined>",
                                "Wire element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get wires",
                            "link": "pro-api.sch_primitivewire.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the wire can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<ISCH_PrimitiveWire>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveWire>>",
                                "Wire element object, empty array indicates acquisition failure",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all wires",
                            "link": "pro-api.sch_primitivewire.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string | Array<string>",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(net?: string | Array<string>): Promise<Array<ISCH_PrimitiveWire>>;",
                            "return": [
                                "Promise<Array<ISCH_PrimitiveWire>>",
                                "Wire element object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all wires",
                            "link": "pro-api.sch_primitivewire.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string | Array<string>",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(net?: string | Array<string>): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Wire primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the wire",
                            "link": "pro-api.sch_primitivewire.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | ISCH_PrimitiveWire",
                                    "Description": "The element ID of the wire or the element object of the wire",
                                    "link": "pro-api.isch_primitivewire.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ line?: Array<number> | Array<Array<number>>; net?: string; color?: string | null; lineWidth?: number | null; lineType?: ESCH_PrimitiveLineType | null; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | ISCH_PrimitiveWire, property: {\n        line?: Array<number> | Array<Array<number>>;\n        net?: string;\n        color?: string | null;\n        lineWidth?: number | null;\n        lineType?: ESCH_PrimitiveLineType | null;\n    }): Promise<ISCH_PrimitiveWire | undefined>;",
                            "return": [
                                "Promise<ISCH_PrimitiveWire | undefined>",
                                "Wire element object"
                            ]
                        }
                    ]
                },
                "SCH_SelectControl": {
                    "description": "Schematic & Symbol / Selection Control Class",
                    "url": "./pro-api.sch_selectcontrol.html",
                    "Signature": "export declare class SCH_SelectControl",
                    "Remark": "Get or manipulate selected elements",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "clearSelected()",
                            "Modifiers": "",
                            "Description": "Clear Selected",
                            "link": "pro-api.sch_selectcontrol.clearselected.html",
                            "Parameters": "",
                            "Declaration": "clearSelected(): boolean;",
                            "return": [
                                "boolean",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "doCrossProbeSelect(components, pins, nets, highlight, select)",
                            "Modifiers": "",
                            "Description": "Make cross selection",
                            "link": "pro-api.sch_selectcontrol.docrossprobeselect.html",
                            "Parameters": [
                                {
                                    "Parameter": "components",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Device bit number",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pins",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Device bit number_pin number, format ['U1_1', 'U1_2']",
                                    "link": ""
                                },
                                {
                                    "Parameter": "nets",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "highlight",
                                    "Type": "boolean",
                                    "Description": "(Optional) Is it highlighted",
                                    "link": ""
                                },
                                {
                                    "Parameter": "select",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to select",
                                    "link": ""
                                }
                            ],
                            "Declaration": "doCrossProbeSelect(components?: Array<string>, pins?: Array<string>, nets?: Array<string>, highlight?: boolean, select?: boolean): boolean;",
                            "return": [
                                "boolean",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "doSelectPrimitives(primitiveIds)",
                            "Modifiers": "",
                            "Description": "Use the primitive ID to select the primitive",
                            "link": "pro-api.sch_selectcontrol.doselectprimitives.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | Array<string>",
                                    "Description": "Essence ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "doSelectPrimitives(primitiveIds: string | Array<string>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "getAllSelectedPrimitives_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Query all selected entries IDs",
                            "link": "pro-api.sch_selectcontrol.getallselectedprimitives_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllSelectedPrimitives_PrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "All selected primitive IDs"
                            ]
                        },
                        {
                            "Method": "getAllSelectedPrimitives()",
                            "Modifiers": "",
                            "Description": "(BETA) Query all selected primitive objects",
                            "link": "pro-api.sch_selectcontrol.getallselectedprimitives.html",
                            "Parameters": "",
                            "Declaration": "getAllSelectedPrimitives(): Promise<Array<ISCH_Primitive>>;",
                            "return": [
                                "Promise<Array<ISCH_Primitive>>",
                                "All selected primitive objects"
                            ]
                        },
                        {
                            "Method": "getCurrentMousePosition()",
                            "Modifiers": "",
                            "Description": "(BETA) Gets the current position of the mouse on the canvas",
                            "link": "pro-api.sch_selectcontrol.getcurrentmouseposition.html",
                            "Parameters": "",
                            "Declaration": "getCurrentMousePosition(): Promise<{\n        x: number;\n        y: number;\n    } | undefined>;",
                            "return": [
                                "Promise<{ x: number; y: number; } | undefined>",
                                "The position of the mouse on the canvas, undefined means that the current mouse is not on the canvas"
                            ]
                        },
                        {
                            "Method": "getSelectedPrimitives_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Query the primitive ID of the selected primitive",
                            "link": "pro-api.sch_selectcontrol.getselectedprimitives_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getSelectedPrimitives_PrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "The primitive ID of the selected primitive"
                            ]
                        },
                        {
                            "Method": "getSelectedPrimitives()",
                            "Modifiers": "",
                            "Description": "(BETA) Query all parameters of selected primitives",
                            "link": "pro-api.sch_selectcontrol.getselectedprimitives.html",
                            "Parameters": "",
                            "Declaration": "getSelectedPrimitives(): Promise<Array<Object>>;",
                            "return": [
                                "Promise<Array<Object>>",
                                "Select all parameters of the primitive"
                            ]
                        }
                    ]
                },
                "SCH_Utils": {
                    "description": "Schematic & Symbol / Utility Class",
                    "url": "./pro-api.sch_utils.html",
                    "Signature": "export declare class SCH_Utils",
                    "Remark": "",
                    "Ref": ""
                }
            },
            "Primitives": {
                "ISCH_PrimitiveArc": {
                    "description": "Arc Primitive",
                    "url": "./pro-api.isch_primitivearc.html",
                    "Signature": "export declare class ISCH_PrimitiveArc implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivearc.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<ISCH_PrimitiveArc>;",
                            "return": [
                                "Promise<ISCH_PrimitiveArc>",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "getState_Color()",
                            "Modifiers": "",
                            "Description": "Get attribute status: color",
                            "link": "pro-api.isch_primitivearc.getstate_color.html",
                            "Parameters": "",
                            "Declaration": "getState_Color(): string | null;",
                            "return": [
                                "string | null",
                                "color"
                            ]
                        },
                        {
                            "Method": "getState_EndX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Terminal point X",
                            "link": "pro-api.isch_primitivearc.getstate_endx.html",
                            "Parameters": "",
                            "Declaration": "getState_EndX(): number;",
                            "return": [
                                "number",
                                "Termination point X"
                            ]
                        },
                        {
                            "Method": "getState_EndY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Termination point Y",
                            "link": "pro-api.isch_primitivearc.getstate_endy.html",
                            "Parameters": "",
                            "Declaration": "getState_EndY(): number;",
                            "return": [
                                "number",
                                "Termination point Y"
                            ]
                        },
                        {
                            "Method": "getState_FillColor()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Fill color",
                            "link": "pro-api.isch_primitivearc.getstate_fillcolor.html",
                            "Parameters": "",
                            "Declaration": "getState_FillColor(): string | null;",
                            "return": [
                                "string | null",
                                "Fill color"
                            ]
                        },
                        {
                            "Method": "getState_LineType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line type",
                            "link": "pro-api.isch_primitivearc.getstate_linetype.html",
                            "Parameters": "",
                            "Declaration": "getState_LineType(): ESCH_PrimitiveLineType | null;",
                            "return": [
                                "ESCH_PrimitiveLineType | null",
                                "Line type"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.isch_primitivearc.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number | null;",
                            "return": [
                                "number | null",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivearc.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivearc.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_ReferenceX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: reference point X",
                            "link": "pro-api.isch_primitivearc.getstate_referencex.html",
                            "Parameters": "",
                            "Declaration": "getState_ReferenceX(): number;",
                            "return": [
                                "number",
                                "Reference point X"
                            ]
                        },
                        {
                            "Method": "getState_ReferenceY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: reference point Y",
                            "link": "pro-api.isch_primitivearc.getstate_referencey.html",
                            "Parameters": "",
                            "Declaration": "getState_ReferenceY(): number;",
                            "return": [
                                "number",
                                "Reference point Y"
                            ]
                        },
                        {
                            "Method": "getState_StartX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Start point X",
                            "link": "pro-api.isch_primitivearc.getstate_startx.html",
                            "Parameters": "",
                            "Declaration": "getState_StartX(): number;",
                            "return": [
                                "number",
                                "Start point X"
                            ]
                        },
                        {
                            "Method": "getState_StartY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Start point Y",
                            "link": "pro-api.isch_primitivearc.getstate_starty.html",
                            "Parameters": "",
                            "Declaration": "getState_StartY(): number;",
                            "return": [
                                "number",
                                "Starting point Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivearc.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.isch_primitivearc.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<ISCH_PrimitiveArc>;",
                            "return": [
                                "Promise<ISCH_PrimitiveArc>",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Color(color)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: color",
                            "link": "pro-api.isch_primitivearc.setstate_color.html",
                            "Parameters": [
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Color(color: string | null): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_EndX(endX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Termination point X",
                            "link": "pro-api.isch_primitivearc.setstate_endx.html",
                            "Parameters": [
                                {
                                    "Parameter": "endX",
                                    "Type": "number",
                                    "Description": "Termination point X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_EndX(endX: number): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_EndY(endY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Termination point Y",
                            "link": "pro-api.isch_primitivearc.setstate_endy.html",
                            "Parameters": [
                                {
                                    "Parameter": "endY",
                                    "Type": "number",
                                    "Description": "Termination point Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_EndY(endY: number): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_FillColor(fillColor)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Fill color",
                            "link": "pro-api.isch_primitivearc.setstate_fillcolor.html",
                            "Parameters": [
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "Fill color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_FillColor(fillColor: string | null): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineType(lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line type",
                            "link": "pro-api.isch_primitivearc.setstate_linetype.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "Line type",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "setState_LineType(lineType: ESCH_PrimitiveLineType | null): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.isch_primitivearc.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number | null): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_ReferenceX(referenceX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: reference point X",
                            "link": "pro-api.isch_primitivearc.setstate_referencex.html",
                            "Parameters": [
                                {
                                    "Parameter": "referenceX",
                                    "Type": "number",
                                    "Description": "Reference point X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_ReferenceX(referenceX: number): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_ReferenceY(referenceY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: reference point Y",
                            "link": "pro-api.isch_primitivearc.setstate_referencey.html",
                            "Parameters": [
                                {
                                    "Parameter": "referenceY",
                                    "Type": "number",
                                    "Description": "Reference point Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_ReferenceY(referenceY: number): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_StartX(startX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Start point X",
                            "link": "pro-api.isch_primitivearc.setstate_startx.html",
                            "Parameters": [
                                {
                                    "Parameter": "startX",
                                    "Type": "number",
                                    "Description": "Start point X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_StartX(startX: number): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_StartY(startY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Start point Y",
                            "link": "pro-api.isch_primitivearc.setstate_starty.html",
                            "Parameters": [
                                {
                                    "Parameter": "startY",
                                    "Type": "number",
                                    "Description": "Starting point Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_StartY(startY: number): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivearc.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivearc.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitiveArc;",
                            "return": [
                                "ISCH_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitiveBus": {
                    "description": "Bus Primitive",
                    "url": "./pro-api.isch_primitivebus.html",
                    "Signature": "export declare class ISCH_PrimitiveBus implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivebus.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<ISCH_PrimitiveBus>;",
                            "return": [
                                "Promise<ISCH_PrimitiveBus>",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "getState_BusName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: bus name",
                            "link": "pro-api.isch_primitivebus.getstate_busname.html",
                            "Parameters": "",
                            "Declaration": "getState_BusName(): string;",
                            "return": [
                                "string",
                                "Bus name"
                            ]
                        },
                        {
                            "Method": "getState_Color()",
                            "Modifiers": "",
                            "Description": "Get attribute status: bus color",
                            "link": "pro-api.isch_primitivebus.getstate_color.html",
                            "Parameters": "",
                            "Declaration": "getState_Color(): string | null;",
                            "return": [
                                "string | null",
                                "Bus color"
                            ]
                        },
                        {
                            "Method": "getState_Line()",
                            "Modifiers": "",
                            "Description": "Get attribute status: polyline coordinate group",
                            "link": "pro-api.isch_primitivebus.getstate_line.html",
                            "Parameters": "",
                            "Declaration": "getState_Line(): Array<number> | Array<Array<number>>;",
                            "return": [
                                "Array<number> | Array<Array<number>>",
                                "Polyline coordinate group"
                            ]
                        },
                        {
                            "Method": "getState_LineType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line type",
                            "link": "pro-api.isch_primitivebus.getstate_linetype.html",
                            "Parameters": "",
                            "Declaration": "getState_LineType(): ESCH_PrimitiveLineType | null;",
                            "return": [
                                "ESCH_PrimitiveLineType | null",
                                "Line type"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.isch_primitivebus.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number | null;",
                            "return": [
                                "number | null",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivebus.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivebus.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivebus.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "setState_BusName(busName)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: bus name",
                            "link": "pro-api.isch_primitivebus.setstate_busname.html",
                            "Parameters": [
                                {
                                    "Parameter": "busName",
                                    "Type": "string",
                                    "Description": "Bus name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_BusName(busName: string): ISCH_PrimitiveBus;",
                            "return": [
                                "ISCH_PrimitiveBus",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Color(color)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: bus color",
                            "link": "pro-api.isch_primitivebus.setstate_color.html",
                            "Parameters": [
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "Bus color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Color(color: string | null): ISCH_PrimitiveBus;",
                            "return": [
                                "ISCH_PrimitiveBus",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Line(line)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: polyline coordinate group",
                            "link": "pro-api.isch_primitivebus.setstate_line.html",
                            "Parameters": [
                                {
                                    "Parameter": "line",
                                    "Type": "Array<number> | Array<Array<number>>",
                                    "Description": "Polyline coordinate group",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Line(line: Array<number> | Array<Array<number>>): ISCH_PrimitiveBus;",
                            "return": [
                                "ISCH_PrimitiveBus",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineType(lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line type",
                            "link": "pro-api.isch_primitivebus.setstate_linetype.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "Line type",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "setState_LineType(lineType: ESCH_PrimitiveLineType | null): ISCH_PrimitiveBus;",
                            "return": [
                                "ISCH_PrimitiveBus",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.isch_primitivebus.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number | null): ISCH_PrimitiveBus;",
                            "return": [
                                "ISCH_PrimitiveBus",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivebus.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitiveBus;",
                            "return": [
                                "ISCH_PrimitiveBus",
                                "Bus primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivebus.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitiveBus;",
                            "return": [
                                "ISCH_PrimitiveBus",
                                "Bus primitive object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitiveCircle": {
                    "description": "Circle Primitive",
                    "url": "./pro-api.isch_primitivecircle.html",
                    "Signature": "export declare class ISCH_PrimitiveCircle implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivecircle.done.html",
                            "Parameters": "",
                            "Declaration": "done(): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "getState_CenterX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: center of circle X",
                            "link": "pro-api.isch_primitivecircle.getstate_centerx.html",
                            "Parameters": "",
                            "Declaration": "getState_CenterX(): number;",
                            "return": [
                                "number",
                                "Centre X"
                            ]
                        },
                        {
                            "Method": "getState_CenterY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: center Y",
                            "link": "pro-api.isch_primitivecircle.getstate_centery.html",
                            "Parameters": "",
                            "Declaration": "getState_CenterY(): number;",
                            "return": [
                                "number",
                                "Centre Y"
                            ]
                        },
                        {
                            "Method": "getState_Color()",
                            "Modifiers": "",
                            "Description": "Get attribute status: color",
                            "link": "pro-api.isch_primitivecircle.getstate_color.html",
                            "Parameters": "",
                            "Declaration": "getState_Color(): string | null;",
                            "return": [
                                "string | null",
                                "color"
                            ]
                        },
                        {
                            "Method": "getState_FillColor()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Fill color",
                            "link": "pro-api.isch_primitivecircle.getstate_fillcolor.html",
                            "Parameters": "",
                            "Declaration": "getState_FillColor(): string | null;",
                            "return": [
                                "string | null",
                                "Fill color"
                            ]
                        },
                        {
                            "Method": "getState_FillStyle()",
                            "Modifiers": "",
                            "Description": "Get attribute status: fill style",
                            "link": "pro-api.isch_primitivecircle.getstate_fillstyle.html",
                            "Parameters": "",
                            "Declaration": "getState_FillStyle(): ESCH_PrimitiveFillStyle | null;",
                            "return": [
                                "ESCH_PrimitiveFillStyle | null",
                                "Fill style"
                            ]
                        },
                        {
                            "Method": "getState_LineType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line type",
                            "link": "pro-api.isch_primitivecircle.getstate_linetype.html",
                            "Parameters": "",
                            "Declaration": "getState_LineType(): ESCH_PrimitiveLineType | null;",
                            "return": [
                                "ESCH_PrimitiveLineType | null",
                                "Line type"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.isch_primitivecircle.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number | null;",
                            "return": [
                                "number | null",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivecircle.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivecircle.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Radius()",
                            "Modifiers": "",
                            "Description": "Get attribute status: radius",
                            "link": "pro-api.isch_primitivecircle.getstate_radius.html",
                            "Parameters": "",
                            "Declaration": "getState_Radius(): number;",
                            "return": [
                                "number",
                                "radius"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivecircle.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.isch_primitivecircle.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<ISCH_PrimitiveCircle>;",
                            "return": [
                                "Promise<ISCH_PrimitiveCircle>",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_CenterX(centerX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: center of circle X",
                            "link": "pro-api.isch_primitivecircle.setstate_centerx.html",
                            "Parameters": [
                                {
                                    "Parameter": "centerX",
                                    "Type": "number",
                                    "Description": "Centre X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_CenterX(centerX: number): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_CenterY(centerY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: center Y",
                            "link": "pro-api.isch_primitivecircle.setstate_centery.html",
                            "Parameters": [
                                {
                                    "Parameter": "centerY",
                                    "Type": "number",
                                    "Description": "Centre Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_CenterY(centerY: number): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_Color(color)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: color",
                            "link": "pro-api.isch_primitivecircle.setstate_color.html",
                            "Parameters": [
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Color(color: string | null): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_FillColor(fillColor)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Fill color",
                            "link": "pro-api.isch_primitivecircle.setstate_fillcolor.html",
                            "Parameters": [
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "Fill color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_FillColor(fillColor: string | null): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_FillStyle(fillStyle)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Fill style",
                            "link": "pro-api.isch_primitivecircle.setstate_fillstyle.html",
                            "Parameters": [
                                {
                                    "Parameter": "fillStyle",
                                    "Type": "ESCH_PrimitiveFillStyle | null",
                                    "Description": "Fill style",
                                    "link": "pro-api.esch_primitivefillstyle.html"
                                }
                            ],
                            "Declaration": "setState_FillStyle(fillStyle: ESCH_PrimitiveFillStyle | null): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_LineType(lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line type",
                            "link": "pro-api.isch_primitivecircle.setstate_linetype.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "Line type",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "setState_LineType(lineType: ESCH_PrimitiveLineType | null): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.isch_primitivecircle.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number | null): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "setState_Radius(radius)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: radius",
                            "link": "pro-api.isch_primitivecircle.setstate_radius.html",
                            "Parameters": [
                                {
                                    "Parameter": "radius",
                                    "Type": "number",
                                    "Description": "radius",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Radius(radius: number): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivecircle.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivecircle.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitiveCircle;",
                            "return": [
                                "ISCH_PrimitiveCircle",
                                "Circular Object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitiveComponent": {
                    "description": "Component Primitive",
                    "url": "./pro-api.isch_primitivecomponent.html",
                    "Signature": "export declare class ISCH_PrimitiveComponent implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivecomponent.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<ISCH_PrimitiveComponent>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "getState_AddIntoBom()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether to join BOM",
                            "link": "pro-api.isch_primitivecomponent.getstate_addintobom.html",
                            "Parameters": "",
                            "Declaration": "getState_AddIntoBom(): boolean | undefined;",
                            "return": [
                                "boolean | undefined",
                                "Whether to join BOM"
                            ]
                        },
                        {
                            "Method": "getState_AddIntoPcb()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether to go to PCB",
                            "link": "pro-api.isch_primitivecomponent.getstate_addintopcb.html",
                            "Parameters": "",
                            "Declaration": "getState_AddIntoPcb(): boolean | undefined;",
                            "return": [
                                "boolean | undefined",
                                "Go to PCB"
                            ]
                        },
                        {
                            "Method": "getState_Component()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Associate library device",
                            "link": "pro-api.isch_primitivecomponent.getstate_component.html",
                            "Parameters": "",
                            "Declaration": "getState_Component(): {\n        libraryUuid: string;\n        uuid: string;\n    };",
                            "return": [
                                "{ libraryUuid: string; uuid: string; }",
                                "Associated library devices"
                            ]
                        },
                        {
                            "Method": "getState_ComponentType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: device type",
                            "link": "pro-api.isch_primitivecomponent.getstate_componenttype.html",
                            "Parameters": "",
                            "Declaration": "getState_ComponentType(): ESCH_PrimitiveComponentType;",
                            "return": [
                                "ESCH_PrimitiveComponentType",
                                "Device Type"
                            ]
                        },
                        {
                            "Method": "getState_Designator()",
                            "Modifiers": "",
                            "Description": "Get attribute status: bit number",
                            "link": "pro-api.isch_primitivecomponent.getstate_designator.html",
                            "Parameters": "",
                            "Declaration": "getState_Designator(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Position number"
                            ]
                        },
                        {
                            "Method": "getState_Footprint()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Associate library encapsulation",
                            "link": "pro-api.isch_primitivecomponent.getstate_footprint.html",
                            "Parameters": "",
                            "Declaration": "getState_Footprint(): {\n        libraryUuid: string;\n        uuid: string;\n    } | undefined;",
                            "return": [
                                "{ libraryUuid: string; uuid: string; } | undefined",
                                "Associated library encapsulation"
                            ]
                        },
                        {
                            "Method": "getState_Manufacturer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Manufacturer",
                            "link": "pro-api.isch_primitivecomponent.getstate_manufacturer.html",
                            "Parameters": "",
                            "Declaration": "getState_Manufacturer(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Manufacturer"
                            ]
                        },
                        {
                            "Method": "getState_ManufacturerId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Manufacturer number",
                            "link": "pro-api.isch_primitivecomponent.getstate_manufacturerid.html",
                            "Parameters": "",
                            "Declaration": "getState_ManufacturerId(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Manufacturer number"
                            ]
                        },
                        {
                            "Method": "getState_Mirror()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is mirrored",
                            "link": "pro-api.isch_primitivecomponent.getstate_mirror.html",
                            "Parameters": "",
                            "Declaration": "getState_Mirror(): boolean;",
                            "return": [
                                "boolean",
                                "Is it mirrored or not"
                            ]
                        },
                        {
                            "Method": "getState_Name()",
                            "Modifiers": "",
                            "Description": "Get attribute status: name",
                            "link": "pro-api.isch_primitivecomponent.getstate_name.html",
                            "Parameters": "",
                            "Declaration": "getState_Name(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "name"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.isch_primitivecomponent.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_OtherProperty()",
                            "Modifiers": "",
                            "Description": "Get attribute status: other parameters",
                            "link": "pro-api.isch_primitivecomponent.getstate_otherproperty.html",
                            "Parameters": "",
                            "Declaration": "getState_OtherProperty(): {\n        [key: string]: string | number | boolean;\n    } | undefined;",
                            "return": [
                                "{ [key: string]: string | number | boolean; } | undefined",
                                "Other parameters"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivecomponent.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivecomponent.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.isch_primitivecomponent.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_SubPartName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: subtile name",
                            "link": "pro-api.isch_primitivecomponent.getstate_subpartname.html",
                            "Parameters": "",
                            "Declaration": "getState_SubPartName(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Subtitle name"
                            ]
                        },
                        {
                            "Method": "getState_Supplier()",
                            "Modifiers": "",
                            "Description": "Get attribute status: vendor",
                            "link": "pro-api.isch_primitivecomponent.getstate_supplier.html",
                            "Parameters": "",
                            "Declaration": "getState_Supplier(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "supplier"
                            ]
                        },
                        {
                            "Method": "getState_SupplierId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: vendor number",
                            "link": "pro-api.isch_primitivecomponent.getstate_supplierid.html",
                            "Parameters": "",
                            "Declaration": "getState_SupplierId(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Supplier number"
                            ]
                        },
                        {
                            "Method": "getState_Symbol()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Associate library symbol",
                            "link": "pro-api.isch_primitivecomponent.getstate_symbol.html",
                            "Parameters": "",
                            "Declaration": "getState_Symbol(): {\n        libraryUuid: string;\n        uuid: string;\n    } | undefined;",
                            "return": [
                                "{ libraryUuid: string; uuid: string; } | undefined",
                                "Associate library symbols"
                            ]
                        },
                        {
                            "Method": "getState_UniqueId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: unique ID",
                            "link": "pro-api.isch_primitivecomponent.getstate_uniqueid.html",
                            "Parameters": "",
                            "Declaration": "getState_UniqueId(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Unique ID"
                            ]
                        },
                        {
                            "Method": "getState_X()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate X",
                            "link": "pro-api.isch_primitivecomponent.getstate_x.html",
                            "Parameters": "",
                            "Declaration": "getState_X(): number;",
                            "return": [
                                "number",
                                "Coordinate X"
                            ]
                        },
                        {
                            "Method": "getState_Y()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate Y",
                            "link": "pro-api.isch_primitivecomponent.getstate_y.html",
                            "Parameters": "",
                            "Declaration": "getState_Y(): number;",
                            "return": [
                                "number",
                                "Coordinate Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivecomponent.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.isch_primitivecomponent.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<ISCH_PrimitiveComponent>;",
                            "return": [
                                "Promise<ISCH_PrimitiveComponent>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_AddIntoBom(addIntoBom)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to join BOM",
                            "link": "pro-api.isch_primitivecomponent.setstate_addintobom.html",
                            "Parameters": [
                                {
                                    "Parameter": "addIntoBom",
                                    "Type": "boolean | undefined",
                                    "Description": "Whether to join BOM",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_AddIntoBom(addIntoBom: boolean | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_AddIntoPcb(addIntoPcb)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Whether to go to PCB",
                            "link": "pro-api.isch_primitivecomponent.setstate_addintopcb.html",
                            "Parameters": [
                                {
                                    "Parameter": "addIntoPcb",
                                    "Type": "boolean | undefined",
                                    "Description": "Go to PCB",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_AddIntoPcb(addIntoPcb: boolean | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Designator(designator)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: bit number",
                            "link": "pro-api.isch_primitivecomponent.setstate_designator.html",
                            "Parameters": [
                                {
                                    "Parameter": "designator",
                                    "Type": "string | undefined",
                                    "Description": "Position number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Designator(designator: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Manufacturer(manufacturer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Manufacturer",
                            "link": "pro-api.isch_primitivecomponent.setstate_manufacturer.html",
                            "Parameters": [
                                {
                                    "Parameter": "manufacturer",
                                    "Type": "string | undefined",
                                    "Description": "Manufacturer",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Manufacturer(manufacturer: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_ManufacturerId(manufacturerId)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Manufacturer number",
                            "link": "pro-api.isch_primitivecomponent.setstate_manufacturerid.html",
                            "Parameters": [
                                {
                                    "Parameter": "manufacturerId",
                                    "Type": "string | undefined",
                                    "Description": "Manufacturer number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_ManufacturerId(manufacturerId: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Mirror(mirror)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to mirror",
                            "link": "pro-api.isch_primitivecomponent.setstate_mirror.html",
                            "Parameters": [
                                {
                                    "Parameter": "mirror",
                                    "Type": "boolean",
                                    "Description": "Is it mirrored or not",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Mirror(mirror: boolean): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Name(name)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: name",
                            "link": "pro-api.isch_primitivecomponent.setstate_name.html",
                            "Parameters": [
                                {
                                    "Parameter": "name",
                                    "Type": "string | undefined",
                                    "Description": "name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Name(name: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.isch_primitivecomponent.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string | undefined",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_OtherProperty(otherProperty)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: other parameters",
                            "link": "pro-api.isch_primitivecomponent.setstate_otherproperty.html",
                            "Parameters": [
                                {
                                    "Parameter": "otherProperty",
                                    "Type": "{ [key: string]: string | number | boolean; }",
                                    "Description": "Other parameters",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_OtherProperty(otherProperty: {\n        [key: string]: string | number | boolean;\n    }): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rotation angle",
                            "link": "pro-api.isch_primitivecomponent.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Supplier(supplier)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: vendor",
                            "link": "pro-api.isch_primitivecomponent.setstate_supplier.html",
                            "Parameters": [
                                {
                                    "Parameter": "supplier",
                                    "Type": "string | undefined",
                                    "Description": "supplier",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Supplier(supplier: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_SupplierId(supplierId)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: vendor number",
                            "link": "pro-api.isch_primitivecomponent.setstate_supplierid.html",
                            "Parameters": [
                                {
                                    "Parameter": "supplierId",
                                    "Type": "string | undefined",
                                    "Description": "Supplier number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_SupplierId(supplierId: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_UniqueId(uniqueId)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Unique ID",
                            "link": "pro-api.isch_primitivecomponent.setstate_uniqueid.html",
                            "Parameters": [
                                {
                                    "Parameter": "uniqueId",
                                    "Type": "string | undefined",
                                    "Description": "Unique ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_UniqueId(uniqueId: string | undefined): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_X(x)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Coordinate X",
                            "link": "pro-api.isch_primitivecomponent.setstate_x.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_X(x: number): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Y(y)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: coordinate Y",
                            "link": "pro-api.isch_primitivecomponent.setstate_y.html",
                            "Parameters": [
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Y(y: number): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivecomponent.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivecomponent.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitiveComponent;",
                            "return": [
                                "ISCH_PrimitiveComponent",
                                "Arc primitive object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitivePin": {
                    "description": "Pin Primitive",
                    "url": "./pro-api.isch_primitivepin.html",
                    "Signature": "export declare class ISCH_PrimitivePin implements ISCH_Primitive",
                    "Remark": "Pin primitives are only available with the symbol editor. In the schematic page, the pins associated with the symbol are called Device Pin primitives",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "async",
                            "Modifiers": "protected",
                            "Type": "boolean",
                            "Description": "asynchronous",
                            "link": "pro-api.isch_primitivepin.async.html",
                            "Parameters": "",
                            "Declaration": "protected async: boolean;"
                        },
                        {
                            "Property": "pinColor",
                            "Modifiers": "protected",
                            "Type": "string | null",
                            "Description": "Pin color",
                            "link": "pro-api.isch_primitivepin.pincolor.html",
                            "Parameters": "",
                            "Declaration": "protected pinColor: string | null;"
                        },
                        {
                            "Property": "pinLength",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Pin length",
                            "link": "pro-api.isch_primitivepin.pinlength.html",
                            "Parameters": "",
                            "Declaration": "protected pinLength: number;"
                        },
                        {
                            "Property": "pinName",
                            "Modifiers": "protected",
                            "Type": "string",
                            "Description": "Pin name",
                            "link": "pro-api.isch_primitivepin.pinname.html",
                            "Parameters": "",
                            "Declaration": "protected pinName: string;"
                        },
                        {
                            "Property": "pinNumber",
                            "Modifiers": "protected",
                            "Type": "string",
                            "Description": "Pin number",
                            "link": "pro-api.isch_primitivepin.pinnumber.html",
                            "Parameters": "",
                            "Declaration": "protected pinNumber: string;"
                        },
                        {
                            "Property": "pinShape",
                            "Modifiers": "protected",
                            "Type": "ESCH_PrimitivePinShape",
                            "Description": "Pin shape",
                            "link": "pro-api.esch_primitivepinshape.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ESCH_PrimitivePinShape"
                        },
                        {
                            "Property": "pinType",
                            "Modifiers": "protected",
                            "Type": "ESCH_PrimitivePinType",
                            "Description": "Pin Type",
                            "link": "pro-api.esch_primitivepintype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ESCH_PrimitivePinType"
                        },
                        {
                            "Property": "primitiveId?",
                            "Modifiers": "protected",
                            "Type": "string",
                            "Description": "(Optional) Element ID",
                            "link": "pro-api.isch_primitivepin.primitiveid.html",
                            "Parameters": "",
                            "Declaration": "protected primitiveId?: string;"
                        },
                        {
                            "Property": "primitiveType",
                            "Modifiers": "protected readonly",
                            "Type": "ESCH_PrimitiveType",
                            "Description": "Element Type",
                            "link": "pro-api.esch_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ESCH_PrimitiveType"
                        },
                        {
                            "Property": "rotation",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Rotation angle",
                            "link": "pro-api.isch_primitivepin.rotation.html",
                            "Parameters": "",
                            "Declaration": "protected rotation: number;"
                        },
                        {
                            "Property": "x",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Coordinate X",
                            "link": "pro-api.isch_primitivepin.x.html",
                            "Parameters": "",
                            "Declaration": "protected x: number;"
                        },
                        {
                            "Property": "y",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Coordinate Y",
                            "link": "pro-api.isch_primitivepin.y.html",
                            "Parameters": "",
                            "Declaration": "protected y: number;"
                        },
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivepin.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<ISCH_PrimitivePin>;",
                            "return": [
                                "Promise<ISCH_PrimitivePin>",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "getState_OtherProperty()",
                            "Modifiers": "",
                            "Description": "Get attribute status: other parameters",
                            "link": "pro-api.isch_primitivepin.getstate_otherproperty.html",
                            "Parameters": "",
                            "Declaration": "getState_OtherProperty(): {\n        [key: string]: string | number | boolean;\n    } | undefined;",
                            "return": [
                                "{ [key: string]: string | number | boolean; } | undefined",
                                "Other parameters"
                            ]
                        },
                        {
                            "Method": "getState_PinColor()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pin color",
                            "link": "pro-api.isch_primitivepin.getstate_pincolor.html",
                            "Parameters": "",
                            "Declaration": "getState_PinColor(): string | null;",
                            "return": [
                                "string | null",
                                "Pin color"
                            ]
                        },
                        {
                            "Method": "getState_PinLength()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pin length",
                            "link": "pro-api.isch_primitivepin.getstate_pinlength.html",
                            "Parameters": "",
                            "Declaration": "getState_PinLength(): number;",
                            "return": [
                                "number",
                                "Pin length"
                            ]
                        },
                        {
                            "Method": "getState_PinName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pin name",
                            "link": "pro-api.isch_primitivepin.getstate_pinname.html",
                            "Parameters": "",
                            "Declaration": "getState_PinName(): string;",
                            "return": [
                                "string",
                                "Pin name"
                            ]
                        },
                        {
                            "Method": "getState_PinNumber()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pin number",
                            "link": "pro-api.isch_primitivepin.getstate_pinnumber.html",
                            "Parameters": "",
                            "Declaration": "getState_PinNumber(): string;",
                            "return": [
                                "string",
                                "Pin number"
                            ]
                        },
                        {
                            "Method": "getState_PinShape()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pin shape",
                            "link": "pro-api.isch_primitivepin.getstate_pinshape.html",
                            "Parameters": "",
                            "Declaration": "getState_PinShape(): ESCH_PrimitivePinShape;",
                            "return": [
                                "ESCH_PrimitivePinShape",
                                "Pin shape"
                            ]
                        },
                        {
                            "Method": "getState_pinType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pin type",
                            "link": "pro-api.isch_primitivepin.getstate_pintype.html",
                            "Parameters": "",
                            "Declaration": "getState_pinType(): ESCH_PrimitivePinType;",
                            "return": [
                                "ESCH_PrimitivePinType",
                                "Pin Type"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivepin.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivepin.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.isch_primitivepin.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_X()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate X",
                            "link": "pro-api.isch_primitivepin.getstate_x.html",
                            "Parameters": "",
                            "Declaration": "getState_X(): number;",
                            "return": [
                                "number",
                                "Coordinate X"
                            ]
                        },
                        {
                            "Method": "getState_Y()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate Y",
                            "link": "pro-api.isch_primitivepin.getstate_y.html",
                            "Parameters": "",
                            "Declaration": "getState_Y(): number;",
                            "return": [
                                "number",
                                "Coordinate Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivepin.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.isch_primitivepin.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<ISCH_PrimitivePin>;",
                            "return": [
                                "Promise<ISCH_PrimitivePin>",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_OtherProperty(otherProperty)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: other parameters",
                            "link": "pro-api.isch_primitivepin.setstate_otherproperty.html",
                            "Parameters": [
                                {
                                    "Parameter": "otherProperty",
                                    "Type": "{ [key: string]: string | number | boolean; }",
                                    "Description": "Other parameters",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_OtherProperty(otherProperty: {\n        [key: string]: string | number | boolean;\n    }): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_PinColor(pinColor)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pin color",
                            "link": "pro-api.isch_primitivepin.setstate_pincolor.html",
                            "Parameters": [
                                {
                                    "Parameter": "pinColor",
                                    "Type": "string | null",
                                    "Description": "Pin color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PinColor(pinColor: string | null): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_PinLength(pinLength)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pin length",
                            "link": "pro-api.isch_primitivepin.setstate_pinlength.html",
                            "Parameters": [
                                {
                                    "Parameter": "pinLength",
                                    "Type": "number",
                                    "Description": "Pin length",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PinLength(pinLength: number): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_PinName(pinName)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pin name",
                            "link": "pro-api.isch_primitivepin.setstate_pinname.html",
                            "Parameters": [
                                {
                                    "Parameter": "pinName",
                                    "Type": "string",
                                    "Description": "Pin name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PinName(pinName: string): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_PinNumber(pinNumber)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pin number",
                            "link": "pro-api.isch_primitivepin.setstate_pinnumber.html",
                            "Parameters": [
                                {
                                    "Parameter": "pinNumber",
                                    "Type": "string",
                                    "Description": "Pin number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PinNumber(pinNumber: string): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_PinShape(pinShape)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pin shape",
                            "link": "pro-api.isch_primitivepin.setstate_pinshape.html",
                            "Parameters": [
                                {
                                    "Parameter": "pinShape",
                                    "Type": "ESCH_PrimitivePinShape",
                                    "Description": "Pin shape",
                                    "link": "pro-api.esch_primitivepinshape.html"
                                }
                            ],
                            "Declaration": "setState_PinShape(pinShape: ESCH_PrimitivePinShape): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_PinType(pinType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pin type",
                            "link": "pro-api.isch_primitivepin.setstate_pintype.html",
                            "Parameters": [
                                {
                                    "Parameter": "pinType",
                                    "Type": "ESCH_PrimitivePinType",
                                    "Description": "Pin Type",
                                    "link": "pro-api.esch_primitivepintype.html"
                                }
                            ],
                            "Declaration": "setState_PinType(pinType: ESCH_PrimitivePinType): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rotation angle",
                            "link": "pro-api.isch_primitivepin.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_X(x)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Coordinate X",
                            "link": "pro-api.isch_primitivepin.setstate_x.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_X(x: number): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "setState_Y(y)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: coordinate Y",
                            "link": "pro-api.isch_primitivepin.setstate_y.html",
                            "Parameters": [
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Y(y: number): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivepin.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivepin.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitivePin;",
                            "return": [
                                "ISCH_PrimitivePin",
                                "Pin element object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitiveComponentPin": {
                    "description": "Component Pin Primitive",
                    "url": "./pro-api.isch_primitivecomponentpin.html",
                    "Signature": "export declare class ISCH_PrimitiveComponentPin extends ISCH_PrimitivePin",
                    "Remark": "The device pin element is a special element that refers to the pins associated with symbols on the schematic canvas.",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "primitiveType",
                            "Modifiers": "protected readonly",
                            "Type": "ESCH_PrimitiveType.COMPONENT_PIN",
                            "Description": "Element Type",
                            "link": "pro-api.esch_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ESCH_PrimitiveType"
                        }
                    ]
                },
                "ISCH_PrimitivePolygon": {
                    "description": "Polygon (Polyline) Primitive",
                    "url": "./pro-api.isch_primitivepolygon.html",
                    "Signature": "export declare class ISCH_PrimitivePolygon implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivepolygon.done.html",
                            "Parameters": "",
                            "Declaration": "done(): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "getState_Color()",
                            "Modifiers": "",
                            "Description": "Get attribute status: color",
                            "link": "pro-api.isch_primitivepolygon.getstate_color.html",
                            "Parameters": "",
                            "Declaration": "getState_Color(): string | null;",
                            "return": [
                                "string | null",
                                "color"
                            ]
                        },
                        {
                            "Method": "getState_FillColor()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Fill color",
                            "link": "pro-api.isch_primitivepolygon.getstate_fillcolor.html",
                            "Parameters": "",
                            "Declaration": "getState_FillColor(): string | null;",
                            "return": [
                                "string | null",
                                "Fill color"
                            ]
                        },
                        {
                            "Method": "getState_Line()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate group",
                            "link": "pro-api.isch_primitivepolygon.getstate_line.html",
                            "Parameters": "",
                            "Declaration": "getState_Line(): Array<number>;",
                            "return": [
                                "Array<number>",
                                "Coordinate group"
                            ]
                        },
                        {
                            "Method": "getState_LineType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line type",
                            "link": "pro-api.isch_primitivepolygon.getstate_linetype.html",
                            "Parameters": "",
                            "Declaration": "getState_LineType(): ESCH_PrimitiveLineType | null;",
                            "return": [
                                "ESCH_PrimitiveLineType | null",
                                "Line type"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.isch_primitivepolygon.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number | null;",
                            "return": [
                                "number | null",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivepolygon.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivepolygon.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivepolygon.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.isch_primitivepolygon.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<ISCH_PrimitivePolygon>;",
                            "return": [
                                "Promise<ISCH_PrimitivePolygon>",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Color(color)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: color",
                            "link": "pro-api.isch_primitivepolygon.setstate_color.html",
                            "Parameters": [
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Color(color: string | null): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "setState_FillColor(fillColor)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Fill color",
                            "link": "pro-api.isch_primitivepolygon.setstate_fillcolor.html",
                            "Parameters": [
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "Fill color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_FillColor(fillColor: string | null): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Line(line)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: coordinate group",
                            "link": "pro-api.isch_primitivepolygon.setstate_line.html",
                            "Parameters": [
                                {
                                    "Parameter": "line",
                                    "Type": "Array<number>",
                                    "Description": "Coordinate group",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Line(line: Array<number>): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineType(lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line type",
                            "link": "pro-api.isch_primitivepolygon.setstate_linetype.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "Line type",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "setState_LineType(lineType: ESCH_PrimitiveLineType | null): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.isch_primitivepolygon.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number | null): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivepolygon.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivepolygon.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitivePolygon;",
                            "return": [
                                "ISCH_PrimitivePolygon",
                                "Polygonal primitive object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitiveRectangle": {
                    "description": "Rectangle Primitive",
                    "url": "./pro-api.isch_primitiverectangle.html",
                    "Signature": "export declare class ISCH_PrimitiveRectangle implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitiverectangle.done.html",
                            "Parameters": "",
                            "Declaration": "done(): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "getState_Color()",
                            "Modifiers": "",
                            "Description": "Get attribute status: border color",
                            "link": "pro-api.isch_primitiverectangle.getstate_color.html",
                            "Parameters": "",
                            "Declaration": "getState_Color(): string | null;",
                            "return": [
                                "string | null",
                                "Border color"
                            ]
                        },
                        {
                            "Method": "getState_CornerRadius()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rounded corner radius",
                            "link": "pro-api.isch_primitiverectangle.getstate_cornerradius.html",
                            "Parameters": "",
                            "Declaration": "getState_CornerRadius(): number;",
                            "return": [
                                "number",
                                "Round corner radius"
                            ]
                        },
                        {
                            "Method": "getState_FillColor()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Fill color",
                            "link": "pro-api.isch_primitiverectangle.getstate_fillcolor.html",
                            "Parameters": "",
                            "Declaration": "getState_FillColor(): string | null;",
                            "return": [
                                "string | null",
                                "Fill color"
                            ]
                        },
                        {
                            "Method": "getState_FillStyle()",
                            "Modifiers": "",
                            "Description": "Get attribute status: fill style",
                            "link": "pro-api.isch_primitiverectangle.getstate_fillstyle.html",
                            "Parameters": "",
                            "Declaration": "getState_FillStyle(): ESCH_PrimitiveFillStyle | null;",
                            "return": [
                                "ESCH_PrimitiveFillStyle | null",
                                "Fill style"
                            ]
                        },
                        {
                            "Method": "getState_Height()",
                            "Modifiers": "",
                            "Description": "Get attribute status: high",
                            "link": "pro-api.isch_primitiverectangle.getstate_height.html",
                            "Parameters": "",
                            "Declaration": "getState_Height(): number;",
                            "return": [
                                "number",
                                "high"
                            ]
                        },
                        {
                            "Method": "getState_LineType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line type",
                            "link": "pro-api.isch_primitiverectangle.getstate_linetype.html",
                            "Parameters": "",
                            "Declaration": "getState_LineType(): ESCH_PrimitiveLineType | null;",
                            "return": [
                                "ESCH_PrimitiveLineType | null",
                                "Line type"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.isch_primitiverectangle.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number | null;",
                            "return": [
                                "number | null",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitiverectangle.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitiverectangle.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.isch_primitiverectangle.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_TopLeftX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: upper left point X",
                            "link": "pro-api.isch_primitiverectangle.getstate_topleftx.html",
                            "Parameters": "",
                            "Declaration": "getState_TopLeftX(): number;",
                            "return": [
                                "number",
                                "Top left point X"
                            ]
                        },
                        {
                            "Method": "getState_TopLeftY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: upper left point Y",
                            "link": "pro-api.isch_primitiverectangle.getstate_toplefty.html",
                            "Parameters": "",
                            "Declaration": "getState_TopLeftY(): number;",
                            "return": [
                                "number",
                                "Top left point Y"
                            ]
                        },
                        {
                            "Method": "getState_Width()",
                            "Modifiers": "",
                            "Description": "Get attribute status: wide",
                            "link": "pro-api.isch_primitiverectangle.getstate_width.html",
                            "Parameters": "",
                            "Declaration": "getState_Width(): number;",
                            "return": [
                                "number",
                                "Width"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitiverectangle.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.isch_primitiverectangle.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<ISCH_PrimitiveRectangle>;",
                            "return": [
                                "Promise<ISCH_PrimitiveRectangle>",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Color(color)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: border color",
                            "link": "pro-api.isch_primitiverectangle.setstate_color.html",
                            "Parameters": [
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "Border color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Color(color: string | null): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_CornerRadius(cornerRadius)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rounded corner radius",
                            "link": "pro-api.isch_primitiverectangle.setstate_cornerradius.html",
                            "Parameters": [
                                {
                                    "Parameter": "cornerRadius",
                                    "Type": "number",
                                    "Description": "Round corner radius",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_CornerRadius(cornerRadius: number): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_FillColor(fillColor)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Fill color",
                            "link": "pro-api.isch_primitiverectangle.setstate_fillcolor.html",
                            "Parameters": [
                                {
                                    "Parameter": "fillColor",
                                    "Type": "string | null",
                                    "Description": "Fill color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_FillColor(fillColor: string | null): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_FillStyle(fillStyle)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Fill style",
                            "link": "pro-api.isch_primitiverectangle.setstate_fillstyle.html",
                            "Parameters": [
                                {
                                    "Parameter": "fillStyle",
                                    "Type": "ESCH_PrimitiveFillStyle | null",
                                    "Description": "Fill style",
                                    "link": "pro-api.esch_primitivefillstyle.html"
                                }
                            ],
                            "Declaration": "setState_FillStyle(fillStyle: ESCH_PrimitiveFillStyle | null): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Height(height)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: high",
                            "link": "pro-api.isch_primitiverectangle.setstate_height.html",
                            "Parameters": [
                                {
                                    "Parameter": "height",
                                    "Type": "number",
                                    "Description": "high",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Height(height: number): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineType(lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line type",
                            "link": "pro-api.isch_primitiverectangle.setstate_linetype.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "Line type",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "setState_LineType(lineType: ESCH_PrimitiveLineType | null): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.isch_primitiverectangle.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number | null): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rotation angle",
                            "link": "pro-api.isch_primitiverectangle.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_TopLeftX(topLeftX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: upper left point X",
                            "link": "pro-api.isch_primitiverectangle.setstate_topleftx.html",
                            "Parameters": [
                                {
                                    "Parameter": "topLeftX",
                                    "Type": "number",
                                    "Description": "Top left point X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_TopLeftX(topLeftX: number): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_TopLeftY(topLeftY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: upper left point Y",
                            "link": "pro-api.isch_primitiverectangle.setstate_toplefty.html",
                            "Parameters": [
                                {
                                    "Parameter": "topLeftY",
                                    "Type": "number",
                                    "Description": "Top left point Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_TopLeftY(topLeftY: number): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Width(width)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Width",
                            "link": "pro-api.isch_primitiverectangle.setstate_width.html",
                            "Parameters": [
                                {
                                    "Parameter": "width",
                                    "Type": "number",
                                    "Description": "Width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Width(width: number): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitiverectangle.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitiverectangle.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitiveRectangle;",
                            "return": [
                                "ISCH_PrimitiveRectangle",
                                "Rectangular primitive object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitiveText": {
                    "description": "Text Primitive",
                    "url": "./pro-api.isch_primitivetext.html",
                    "Signature": "export declare class ISCH_PrimitiveText implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivetext.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<ISCH_PrimitiveText>;",
                            "return": [
                                "Promise<ISCH_PrimitiveText>",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "getState_AlignMode()",
                            "Modifiers": "",
                            "Description": "Get attribute status: alignment mode",
                            "link": "pro-api.isch_primitivetext.getstate_alignmode.html",
                            "Parameters": "",
                            "Declaration": "getState_AlignMode(): number;",
                            "return": [
                                "number",
                                "Alignment mode"
                            ]
                        },
                        {
                            "Method": "getState_Bold()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether to thicken it",
                            "link": "pro-api.isch_primitivetext.getstate_bold.html",
                            "Parameters": "",
                            "Declaration": "getState_Bold(): boolean;",
                            "return": [
                                "boolean",
                                "Is it thicker"
                            ]
                        },
                        {
                            "Method": "getState_Content()",
                            "Modifiers": "",
                            "Description": "Get attribute status: text content",
                            "link": "pro-api.isch_primitivetext.getstate_content.html",
                            "Parameters": "",
                            "Declaration": "getState_Content(): string;",
                            "return": [
                                "string",
                                "Text content"
                            ]
                        },
                        {
                            "Method": "getState_FontName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: font name",
                            "link": "pro-api.isch_primitivetext.getstate_fontname.html",
                            "Parameters": "",
                            "Declaration": "getState_FontName(): string | null;",
                            "return": [
                                "string | null",
                                "Font name"
                            ]
                        },
                        {
                            "Method": "getState_FontSize()",
                            "Modifiers": "",
                            "Description": "Get attribute status: font size",
                            "link": "pro-api.isch_primitivetext.getstate_fontsize.html",
                            "Parameters": "",
                            "Declaration": "getState_FontSize(): number | null;",
                            "return": [
                                "number | null",
                                "Font size"
                            ]
                        },
                        {
                            "Method": "getState_Italic()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Whether italics",
                            "link": "pro-api.isch_primitivetext.getstate_italic.html",
                            "Parameters": "",
                            "Declaration": "getState_Italic(): boolean;",
                            "return": [
                                "boolean",
                                "Is italic?"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivetext.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivetext.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.isch_primitivetext.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_TextColor()",
                            "Modifiers": "",
                            "Description": "Get attribute status: text color",
                            "link": "pro-api.isch_primitivetext.getstate_textcolor.html",
                            "Parameters": "",
                            "Declaration": "getState_TextColor(): string | null;",
                            "return": [
                                "string | null",
                                "Text color"
                            ]
                        },
                        {
                            "Method": "getState_UnderLine()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether to underline it",
                            "link": "pro-api.isch_primitivetext.getstate_underline.html",
                            "Parameters": "",
                            "Declaration": "getState_UnderLine(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to underline"
                            ]
                        },
                        {
                            "Method": "getState_X()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate X",
                            "link": "pro-api.isch_primitivetext.getstate_x.html",
                            "Parameters": "",
                            "Declaration": "getState_X(): number;",
                            "return": [
                                "number",
                                "Coordinate X"
                            ]
                        },
                        {
                            "Method": "getState_Y()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate Y",
                            "link": "pro-api.isch_primitivetext.getstate_y.html",
                            "Parameters": "",
                            "Declaration": "getState_Y(): number;",
                            "return": [
                                "number",
                                "Coordinate Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivetext.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.isch_primitivetext.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<ISCH_PrimitiveText>;",
                            "return": [
                                "Promise<ISCH_PrimitiveText>",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_AlignMode(alignMode)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: alignment mode",
                            "link": "pro-api.isch_primitivetext.setstate_alignmode.html",
                            "Parameters": [
                                {
                                    "Parameter": "alignMode",
                                    "Type": "number",
                                    "Description": "Alignment mode",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_AlignMode(alignMode: number): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Bold(bold)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to add boldness",
                            "link": "pro-api.isch_primitivetext.setstate_bold.html",
                            "Parameters": [
                                {
                                    "Parameter": "bold",
                                    "Type": "boolean",
                                    "Description": "Is it thicker",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Bold(bold: boolean): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Content(content)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: text content",
                            "link": "pro-api.isch_primitivetext.setstate_content.html",
                            "Parameters": [
                                {
                                    "Parameter": "content",
                                    "Type": "string",
                                    "Description": "Text content",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Content(content: string): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_FontName(fontName)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: font name",
                            "link": "pro-api.isch_primitivetext.setstate_fontname.html",
                            "Parameters": [
                                {
                                    "Parameter": "fontName",
                                    "Type": "string | null",
                                    "Description": "Font name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_FontName(fontName: string | null): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_FontSize(fontSize)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: font size",
                            "link": "pro-api.isch_primitivetext.setstate_fontsize.html",
                            "Parameters": [
                                {
                                    "Parameter": "fontSize",
                                    "Type": "number | null",
                                    "Description": "Font size",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_FontSize(fontSize: number | null): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Italic(italic)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Whether italics",
                            "link": "pro-api.isch_primitivetext.setstate_italic.html",
                            "Parameters": [
                                {
                                    "Parameter": "italic",
                                    "Type": "boolean",
                                    "Description": "Is italic?",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Italic(italic: boolean): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rotation angle",
                            "link": "pro-api.isch_primitivetext.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_TextColor(textColor)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: text color",
                            "link": "pro-api.isch_primitivetext.setstate_textcolor.html",
                            "Parameters": [
                                {
                                    "Parameter": "textColor",
                                    "Type": "string | null",
                                    "Description": "Text color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_TextColor(textColor: string | null): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_UnderLine(underLine)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Whether to underline it",
                            "link": "pro-api.isch_primitivetext.setstate_underline.html",
                            "Parameters": [
                                {
                                    "Parameter": "underLine",
                                    "Type": "boolean",
                                    "Description": "Whether to underline",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_UnderLine(underLine: boolean): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_X(x)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Coordinate X",
                            "link": "pro-api.isch_primitivetext.setstate_x.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_X(x: number): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Y(y)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: coordinate Y",
                            "link": "pro-api.isch_primitivetext.setstate_y.html",
                            "Parameters": [
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Y(y: number): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivetext.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivetext.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitiveText;",
                            "return": [
                                "ISCH_PrimitiveText",
                                "Text primitive object"
                            ]
                        }
                    ]
                },
                "ISCH_PrimitiveWire": {
                    "description": "Wire Primitive",
                    "url": "./pro-api.isch_primitivewire.html",
                    "Signature": "export declare class ISCH_PrimitiveWire implements ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.isch_primitivewire.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<ISCH_PrimitiveWire>;",
                            "return": [
                                "Promise<ISCH_PrimitiveWire>",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "getState_Color()",
                            "Modifiers": "",
                            "Description": "Get attribute status: bus color",
                            "link": "pro-api.isch_primitivewire.getstate_color.html",
                            "Parameters": "",
                            "Declaration": "getState_Color(): string | null;",
                            "return": [
                                "string | null",
                                "Bus color"
                            ]
                        },
                        {
                            "Method": "getState_Line()",
                            "Modifiers": "",
                            "Description": "Get attribute status: polyline coordinate group",
                            "link": "pro-api.isch_primitivewire.getstate_line.html",
                            "Parameters": "",
                            "Declaration": "getState_Line(): Array<number> | Array<Array<number>>;",
                            "return": [
                                "Array<number> | Array<Array<number>>",
                                "Polyline coordinate group"
                            ]
                        },
                        {
                            "Method": "getState_LineType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line type",
                            "link": "pro-api.isch_primitivewire.getstate_linetype.html",
                            "Parameters": "",
                            "Declaration": "getState_LineType(): ESCH_PrimitiveLineType | null;",
                            "return": [
                                "ESCH_PrimitiveLineType | null",
                                "Line type"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.isch_primitivewire.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number | null;",
                            "return": [
                                "number | null",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.isch_primitivewire.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string;",
                            "return": [
                                "string",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.isch_primitivewire.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.isch_primitivewire.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): ESCH_PrimitiveType;",
                            "return": [
                                "ESCH_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.isch_primitivewire.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "setState_Color(color)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: wire color",
                            "link": "pro-api.isch_primitivewire.setstate_color.html",
                            "Parameters": [
                                {
                                    "Parameter": "color",
                                    "Type": "string | null",
                                    "Description": "Wire color",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Color(color: string | null): ISCH_PrimitiveWire;",
                            "return": [
                                "ISCH_PrimitiveWire",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "setState_Line(line)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: polyline coordinate group",
                            "link": "pro-api.isch_primitivewire.setstate_line.html",
                            "Parameters": [
                                {
                                    "Parameter": "line",
                                    "Type": "Array<number> | Array<Array<number>>",
                                    "Description": "Polyline coordinate group",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Line(line: Array<number> | Array<Array<number>>): ISCH_PrimitiveWire;",
                            "return": [
                                "ISCH_PrimitiveWire",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "setState_LineType(lineType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line type",
                            "link": "pro-api.isch_primitivewire.setstate_linetype.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineType",
                                    "Type": "ESCH_PrimitiveLineType | null",
                                    "Description": "Line type",
                                    "link": "pro-api.esch_primitivelinetype.html"
                                }
                            ],
                            "Declaration": "setState_LineType(lineType: ESCH_PrimitiveLineType | null): ISCH_PrimitiveWire;",
                            "return": [
                                "ISCH_PrimitiveWire",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.isch_primitivewire.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number | null",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number | null): ISCH_PrimitiveWire;",
                            "return": [
                                "ISCH_PrimitiveWire",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.isch_primitivewire.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string): ISCH_PrimitiveWire;",
                            "return": [
                                "ISCH_PrimitiveWire",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.isch_primitivewire.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): ISCH_PrimitiveWire;",
                            "return": [
                                "ISCH_PrimitiveWire",
                                "Wire element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.isch_primitivewire.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): ISCH_PrimitiveWire;",
                            "return": [
                                "ISCH_PrimitiveWire",
                                "Wire element object"
                            ]
                        }
                    ]
                }
            },
            "Enumerations": {
                "ESCH_PrimitiveType": {
                    "description": "Primitive Type",
                    "url": "./pro-api.esch_primitivetype.html",
                    "Signature": "export declare enum ESCH_PrimitiveType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ARC",
                            "Value": "\"Arc\"",
                            "Description": "Arc",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BEZIER",
                            "Value": "\"Bezier\"",
                            "Description": "Third-order Bessel line",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BUS",
                            "Value": "\"Bus\"",
                            "Description": "bus",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CIRCLE",
                            "Value": "\"Circle\"",
                            "Description": "round",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "COMPONENT",
                            "Value": "\"Component\"",
                            "Description": "Devices",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "COMPONENT_PIN",
                            "Value": "\"ComponentPin\"",
                            "Description": "Device pins",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "ELLIPSE",
                            "Value": "\"Ellipse\"",
                            "Description": "oval",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "OBJECT",
                            "Value": "\"Object\"",
                            "Description": "Binary embedded objects",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PIN",
                            "Value": "\"Pin\"",
                            "Description": "Pin",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "POLYGON",
                            "Value": "\"Polygon\"",
                            "Description": "Polygons",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "RECTANGLE",
                            "Value": "\"Rectangle\"",
                            "Description": "rectangle",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TEXT",
                            "Value": "\"Text\"",
                            "Description": "text",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "WIRE",
                            "Value": "\"Wire\"",
                            "Description": "wire",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESCH_PrimitiveComponentType": {
                    "description": "Component Type",
                    "url": "./pro-api.esch_primitivecomponenttype.html",
                    "Signature": "export declare enum ESCH_PrimitiveComponentType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "COMPONENT",
                            "Value": "\"part\"",
                            "Description": "element",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DRAWING",
                            "Value": "\"sheet\"",
                            "Description": "drawing",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NET_FLAG",
                            "Value": "\"netflag\"",
                            "Description": "Network Identification",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NET_LABEL",
                            "Value": "\"netlabel\"",
                            "Description": "Network tags",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NET_PORT",
                            "Value": "\"netport\"",
                            "Description": "Network port",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NON_ELECTRICAL_FLAG",
                            "Value": "\"nonElectrical_symbol\"",
                            "Description": "No electrical marking",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SHORT_CIRCUIT_FLAG",
                            "Value": "\"short_symbol\"",
                            "Description": "Short-circuit logo",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESCH_PrimitivePinShape": {
                    "description": "Pin Shape",
                    "url": "./pro-api.esch_primitivepinshape.html",
                    "Signature": "export declare enum ESCH_PrimitivePinShape",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "CLOCK",
                            "Value": "\"Clock\"",
                            "Description": "clock",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INVERTED",
                            "Value": "\"Inverted\"",
                            "Description": "Reverse",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INVERTED_CLOCK",
                            "Value": "\"Inverted Clock\"",
                            "Description": "Reverse clock",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NONE",
                            "Value": "\"None\"",
                            "Description": "none",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ESCH_PrimitivePinType": {
                    "description": "Pin Type",
                    "url": "./pro-api.esch_primitivepintype.html",
                    "Signature": "export declare enum ESCH_PrimitivePinType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BI",
                            "Value": "\"BI\"",
                            "Description": "Two-way",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "GROUND",
                            "Value": "\"Ground\"",
                            "Description": "land",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "HIZ",
                            "Value": "\"HIZ\"",
                            "Description": "High resistance",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "IN",
                            "Value": "\"IN\"",
                            "Description": "enter",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "OPEN_COLLECTOR",
                            "Value": "\"Open Collector\"",
                            "Description": "Open collector",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "OPEN_EMITTER",
                            "Value": "\"Open Emitter\"",
                            "Description": "Development of emitter",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "OUT",
                            "Value": "\"OUT\"",
                            "Description": "Output",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PASSIVE",
                            "Value": "\"Passive\"",
                            "Description": "No source",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "POWER",
                            "Value": "\"Power\"",
                            "Description": "power supply",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TERMINATOR",
                            "Value": "\"Terminator\"",
                            "Description": "Signal terminal",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "UNDEFINED",
                            "Value": "\"Undefined\"",
                            "Description": "Undefined",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                }
            },
            "Interfaces": {
                "ISCH_Primitive": {
                    "description": "Schematic Primitive",
                    "url": "./pro-api.isch_primitive.html",
                    "Signature": "export interface ISCH_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "create",
                            "Modifiers": "",
                            "Type": "() => ISCH_Primitive | Promise<ISCH_Primitive>",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        },
                        {
                            "Property": "done",
                            "Modifiers": "",
                            "Type": "() => ISCH_Primitive | Promise<ISCH_Primitive>",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        },
                        {
                            "Property": "getState_PrimitiveId",
                            "Modifiers": "",
                            "Type": "() => string",
                            "Description": "",
                            "link": "pro-api.isch_primitive.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId: () => string;"
                        },
                        {
                            "Property": "getState_PrimitiveType",
                            "Modifiers": "",
                            "Type": "() => ESCH_PrimitiveType",
                            "Description": "",
                            "link": "pro-api.esch_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ESCH_PrimitiveType"
                        },
                        {
                            "Property": "isAsync",
                            "Modifiers": "",
                            "Type": "() => boolean",
                            "Description": "",
                            "link": "pro-api.isch_primitive.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync: () => boolean;"
                        },
                        {
                            "Property": "reset",
                            "Modifiers": "",
                            "Type": "() => ISCH_Primitive | Promise<ISCH_Primitive>",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        },
                        {
                            "Property": "toAsync",
                            "Modifiers": "",
                            "Type": "() => ISCH_Primitive",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        },
                        {
                            "Property": "toSync",
                            "Modifiers": "",
                            "Type": "() => ISCH_Primitive",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        }
                    ]
                },
                "ISCH_PrimitiveAPI": {
                    "description": "Schematic Primitive Interface",
                    "url": "./pro-api.isch_primitiveapi.html",
                    "Signature": "export interface ISCH_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "create",
                            "Modifiers": "",
                            "Type": "(...args: any[]) => ISCH_Primitive | undefined | Promise<ISCH_Primitive> | Promise<ISCH_Primitive | undefined>",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        },
                        {
                            "Property": "delete",
                            "Modifiers": "",
                            "Type": "(primitiveIds: string | any | Array<string> | Array<any>) => boolean | Promise<boolean>",
                            "Description": "",
                            "link": "pro-api.isch_primitiveapi.delete.html",
                            "Parameters": "",
                            "Declaration": "delete: (primitiveIds: string | any | Array<string> | Array<any>) => boolean | Promise<boolean>;"
                        },
                        {
                            "Property": "get",
                            "Modifiers": "",
                            "Type": "{ (primitiveIds: string): ISCH_Primitive | undefined | Promise<ISCH_Primitive | undefined>; (primitiveIds: Array<string>): Array<ISCH_Primitive> | Promise<Array<ISCH_Primitive>>; }",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        },
                        {
                            "Property": "getAll",
                            "Modifiers": "",
                            "Type": "(...args: any[]) => Array<ISCH_Primitive> | Promise<Array<ISCH_Primitive>>",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        },
                        {
                            "Property": "getAllPrimitiveId",
                            "Modifiers": "",
                            "Type": "(...args: any[]) => Array<string> | Promise<Array<string>>",
                            "Description": "",
                            "link": "pro-api.isch_primitiveapi.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId: (...args: any[]) => Array<string> | Promise<Array<string>>;"
                        },
                        {
                            "Property": "modify",
                            "Modifiers": "",
                            "Type": "(primitiveId: string | any, ...args: any[]) => ISCH_Primitive | undefined | Promise<ISCH_Primitive> | Promise<ISCH_Primitive | undefined>",
                            "Description": "",
                            "link": "pro-api.isch_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface ISCH_Primitive"
                        }
                    ]
                }
            }
        },
        "PCB & Footprint": {
            "Classes": {
                "PCB_Document": {
                    "description": "PCB & Footprint / Document Operations Class",
                    "url": "./pro-api.pcb_document.html",
                    "Signature": "export declare class PCB_Document",
                    "Remark": "Operations on the overall design document",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "convertCanvasOriginToDataOrigin(x, y)",
                            "Modifiers": "",
                            "Description": "Enter the canvas coordinate to return the data coordinate corresponding to the coordinate",
                            "link": "pro-api.pcb_document.convertcanvasorigintodataorigin.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "",
                                    "link": ""
                                }
                            ],
                            "Declaration": "convertCanvasOriginToDataOrigin(x: number, y: number): Promise<{\n        x: number;\n        y: number;\n    }>;",
                            "return": [
                                "Promise<{ x: number; y: number; }>",
                                "Data origin coordinates",
                                "The coordinates displayed on the front end of the Jialichuang EDA are all the canvas origins; the Jialichuang EDA API uses the data origins; when creating a PCB, the default canvas origin is equal to the data origin."
                            ]
                        },
                        {
                            "Method": "convertDataOriginToCanvasOrigin(x, y)",
                            "Modifiers": "",
                            "Description": "Enter the data coordinates to return the corresponding canvas coordinates of the coordinates",
                            "link": "pro-api.pcb_document.convertdataorigintocanvasorigin.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Data origin X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Data origin Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "convertDataOriginToCanvasOrigin(x: number, y: number): Promise<{\n        x: number;\n        y: number;\n    }>;",
                            "return": [
                                "Promise<{ x: number; y: number; }>",
                                "Canvas origin coordinates",
                                "The coordinates displayed on the front end of the Jialichuang EDA are all the canvas origins; the Jialichuang EDA API uses the data origins; when creating a PCB, the default canvas origin is equal to the data origin."
                            ]
                        },
                        {
                            "Method": "getCalculatingRatlineStatus()",
                            "Modifiers": "",
                            "Description": "Get the current fly line calculation function status",
                            "link": "pro-api.pcb_document.getcalculatingratlinestatus.html",
                            "Parameters": "",
                            "Declaration": "getCalculatingRatlineStatus(): Promise<EPCB_DocumentRatlineCalculatingActiveStatus>;",
                            "return": [
                                "Promise<EPCB_DocumentRatlineCalculatingActiveStatus>",
                                "Functional status"
                            ]
                        },
                        {
                            "Method": "getCanvasOrigin()",
                            "Modifiers": "",
                            "Description": "Get the offset coordinates of the canvas origin relative to the data origin",
                            "link": "pro-api.pcb_document.getcanvasorigin.html",
                            "Parameters": "",
                            "Declaration": "getCanvasOrigin(): Promise<{\n        offsetX: number;\n        offsetY: number;\n    }>;",
                            "return": [
                                "Promise<{ offsetX: number; offsetY: number; }>",
                                "The offset coordinates of the canvas origin relative to the data origin",
                                "The coordinates displayed on the front end of the Jialichuang EDA Professional Edition are all the canvas origins;",
                                "All the data origins used by the Jialichuang EDA Professional API are data origins;",
                                "If the returned data is { canvasOriginOffsetX: 100, canvasOriginOffsetY: 200 }, it represents the position where the canvas origin is 100 units to the right and 200 units upwards of the data origin;",
                                "The units here are data-level units, which are equivalent to mil at the canvas level in span"
                            ]
                        },
                        {
                            "Method": "importAutoLayoutJsonFile(autoLayoutFile)",
                            "Modifiers": "",
                            "Description": "(BETA) Import automatic layout files (JSON)",
                            "link": "pro-api.pcb_document.importautolayoutjsonfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "autoLayoutFile",
                                    "Type": "File",
                                    "Description": "JSON file to be imported",
                                    "link": ""
                                }
                            ],
                            "Declaration": "importAutoLayoutJsonFile(autoLayoutFile: File): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the import operation successful?",
                                "You can use SYS_FileSystem.openReadFileDialog() to read into the file"
                            ]
                        },
                        {
                            "Method": "importAutoRouteJsonFile(autoRouteFile)",
                            "Modifiers": "",
                            "Description": "(BETA) Importing automatic cabling files (JSON)",
                            "link": "pro-api.pcb_document.importautoroutejsonfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "autoRouteFile",
                                    "Type": "File",
                                    "Description": "JSON file to be imported",
                                    "link": ""
                                }
                            ],
                            "Declaration": "importAutoRouteJsonFile(autoRouteFile: File): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the import operation successful?",
                                "You can use SYS_FileSystem.openReadFileDialog() to read into the file"
                            ]
                        },
                        {
                            "Method": "importChanges(uuid)",
                            "Modifiers": "",
                            "Description": "Import changes from schematic diagram",
                            "link": "pro-api.pcb_document.importchanges.html",
                            "Parameters": [
                                {
                                    "Parameter": "uuid",
                                    "Type": "string",
                                    "Description": "(Optional) Schematic UUID, default to the schematic associated with the same board",
                                    "link": ""
                                }
                            ],
                            "Declaration": "importChanges(uuid?: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the import operation is successful, the free PCB with the UUID that failed to pass in the schematic will return false"
                            ]
                        },
                        {
                            "Method": "navigateToCoordinates(x, y)",
                            "Modifiers": "",
                            "Description": "Positioning to the canvas coordinates",
                            "link": "pro-api.pcb_document.navigatetocoordinates.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "navigateToCoordinates(x: number, y: number): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This interface locates the specified data-level coordinates on the front-end canvas;",
                                "If you want the front-end canvas coordinates to be consistent with the incoming data when performing this operation, it is recommended to call the PCB_Document.setCanvasOrigin() method and set the offset to zero;",
                                "The units here are data-level units, which are equivalent to mil at the canvas level in span"
                            ]
                        },
                        {
                            "Method": "save(uuid)",
                            "Modifiers": "",
                            "Description": "Save the document",
                            "link": "pro-api.pcb_document.save.html",
                            "Parameters": [
                                {
                                    "Parameter": "uuid",
                                    "Type": "string",
                                    "Description": "",
                                    "link": ""
                                }
                            ],
                            "Declaration": "save(uuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the save operation is successful, and errors such as the failure to save and upload fail will be returned to false."
                            ]
                        },
                        {
                            "Method": "setCanvasOrigin(offsetX, offsetY)",
                            "Modifiers": "",
                            "Description": "Set the offset coordinates of the canvas origin relative to the data origin",
                            "link": "pro-api.pcb_document.setcanvasorigin.html",
                            "Parameters": [
                                {
                                    "Parameter": "offsetX",
                                    "Type": "number",
                                    "Description": "The X coordinate offset of the canvas origin relative to the data origin",
                                    "link": ""
                                },
                                {
                                    "Parameter": "offsetY",
                                    "Type": "number",
                                    "Description": "Y coordinate offset of the canvas origin relative to the data origin",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setCanvasOrigin(offsetX: number, offsetY: number): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "The coordinates displayed on the front end of the Jialichuang EDA Professional Edition are all the canvas origins;",
                                "All the data origins used by the Jialichuang EDA Professional API are data origins;",
                                "If you want the front-end canvas coordinates to be consistent with the data during API operation, it is recommended to call this method and set the offset to zero, that is, setCanvasOrigin(0, 0);",
                                "The units here are data-level units, which are equivalent to mil at the canvas level in span"
                            ]
                        },
                        {
                            "Method": "startCalculatingRatline()",
                            "Modifiers": "",
                            "Description": "Activate the fly line calculation function",
                            "link": "pro-api.pcb_document.startcalculatingratline.html",
                            "Parameters": "",
                            "Declaration": "startCalculatingRatline(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "At startup, a fly line calculation will be triggered"
                            ]
                        },
                        {
                            "Method": "stopCalculatingRatline()",
                            "Modifiers": "",
                            "Description": "Stop the fly line calculation function",
                            "link": "pro-api.pcb_document.stopcalculatingratline.html",
                            "Parameters": "",
                            "Declaration": "stopCalculatingRatline(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        }
                    ]
                },
                "PCB_Drc": {
                    "description": "PCB & Footprint / Design Rule Check (DRC) Class",
                    "url": "./pro-api.pcb_drc.html",
                    "Signature": "export declare class PCB_Drc",
                    "Remark": "Check and set DRC rules",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "addNetToEqualLengthNetGroup(equalLengthNetGroupName, net)",
                            "Modifiers": "",
                            "Description": "(BETA) Add a network to an isometric network group",
                            "link": "pro-api.pcb_drc.addnettoequallengthnetgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "equalLengthNetGroupName",
                                    "Type": "string",
                                    "Description": "Isometric network group name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string | Array<string>",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "addNetToEqualLengthNetGroup(equalLengthNetGroupName: string, net: string | Array<string>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "addNetToNetClass(netClassName, net)",
                            "Modifiers": "",
                            "Description": "(BETA) Add a network to a network class",
                            "link": "pro-api.pcb_drc.addnettonetclass.html",
                            "Parameters": [
                                {
                                    "Parameter": "netClassName",
                                    "Type": "string",
                                    "Description": "Network class name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string | Array<string>",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "addNetToNetClass(netClassName: string, net: string | Array<string>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "addPadPairToPadPairGroup(padPairGroupName, padPair)",
                            "Modifiers": "",
                            "Description": "(BETA) Add pad pairs to pad pair groups",
                            "link": "pro-api.pcb_drc.addpadpairtopadpairgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "padPairGroupName",
                                    "Type": "string",
                                    "Description": "Pad pair group name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "padPair",
                                    "Type": "[string, string] | Array<[string, string]>",
                                    "Description": "Pad pair",
                                    "link": ""
                                }
                            ],
                            "Declaration": "addPadPairToPadPairGroup(padPairGroupName: string, padPair: [string, string] | Array<[string, string]>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "There are three different uses to ensure that the corresponding pads are already on the canvas. 1. Free pad - free pad; 2. Device pad - device pad; 3. Device pad - free pad await eda.pcb_Drc.addPadPairToPadPairGroup('test',['e0','e1']) // Free pad - free pad await eda.pcb_Drc.addPadPairToPadPairGroup('test',['R1:1','R1:2']) // Device pad - free pad"
                            ]
                        },
                        {
                            "Method": "check(strict, userInterface, includeVerboseError)",
                            "Modifiers": "",
                            "Description": "(BETA) Check DRC",
                            "link": "pro-api.pcb_drc.check.html",
                            "Parameters": [
                                {
                                    "Parameter": "strict",
                                    "Type": "boolean",
                                    "Description": "Whether to strictly check, the current PCB is unified into a strict inspection mode",
                                    "link": ""
                                },
                                {
                                    "Parameter": "userInterface",
                                    "Type": "boolean",
                                    "Description": "Whether to display the UI (bottom DRC window at the call out)",
                                    "link": ""
                                },
                                {
                                    "Parameter": "includeVerboseError",
                                    "Type": "false",
                                    "Description": "Whether to include detailed error information in the return value, if true, the return value will always be an array",
                                    "link": ""
                                }
                            ],
                            "Declaration": "check(strict: boolean, userInterface: boolean, includeVerboseError: false): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "DRC check whether it passes"
                            ]
                        },
                        {
                            "Method": "check(strict, userInterface, includeVerboseError)",
                            "Modifiers": "",
                            "Description": "(BETA) Check DRC",
                            "link": "pro-api.pcb_drc.check_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "strict",
                                    "Type": "boolean",
                                    "Description": "Whether to strictly check, the current PCB is unified into a strict inspection mode",
                                    "link": ""
                                },
                                {
                                    "Parameter": "userInterface",
                                    "Type": "boolean",
                                    "Description": "Whether to display the UI (bottom DRC window at the call out)",
                                    "link": ""
                                },
                                {
                                    "Parameter": "includeVerboseError",
                                    "Type": "true",
                                    "Description": "Whether to include detailed error information in the return value, if true, the return value will always be an array",
                                    "link": ""
                                }
                            ],
                            "Declaration": "check(strict: boolean, userInterface: boolean, includeVerboseError: true): Promise<Array<any>>;",
                            "return": [
                                "Promise<Array<any>>",
                                "Detailed results of DRC inspection"
                            ]
                        },
                        {
                            "Method": "createDifferentialPair(differentialPairName, positiveNet, negativeNet)",
                            "Modifiers": "",
                            "Description": "(BETA) Create differential pairs",
                            "link": "pro-api.pcb_drc.createdifferentialpair.html",
                            "Parameters": [
                                {
                                    "Parameter": "differentialPairName",
                                    "Type": "string",
                                    "Description": "Differential pair name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "positiveNet",
                                    "Type": "string",
                                    "Description": "The network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "negativeNet",
                                    "Type": "string",
                                    "Description": "Negative network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createDifferentialPair(differentialPairName: string, positiveNet: string, negativeNet: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "createEqualLengthNetGroup(equalLengthNetGroupName, nets, color)",
                            "Modifiers": "",
                            "Description": "(BETA) Create equal length network groups",
                            "link": "pro-api.pcb_drc.createequallengthnetgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "equalLengthNetGroupName",
                                    "Type": "string",
                                    "Description": "Isometric network group name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "nets",
                                    "Type": "Array<string>",
                                    "Description": "Network name array",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "IPCB_EqualLengthNetGroupItem['color']",
                                    "Description": "Isometric network group color",
                                    "link": "pro-api.ipcb_equallengthnetgroupitem.html"
                                }
                            ],
                            "Declaration": "createEqualLengthNetGroup(equalLengthNetGroupName: string, nets: Array<string>, color: IPCB_EqualLengthNetGroupItem['color']): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "createNetClass(netClassName, nets, color)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a network class",
                            "link": "pro-api.pcb_drc.createnetclass.html",
                            "Parameters": [
                                {
                                    "Parameter": "netClassName",
                                    "Type": "string",
                                    "Description": "Network class name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "nets",
                                    "Type": "Array<string>",
                                    "Description": "Network name array",
                                    "link": ""
                                },
                                {
                                    "Parameter": "color",
                                    "Type": "IPCB_EqualLengthNetGroupItem['color']",
                                    "Description": "Network color",
                                    "link": "pro-api.ipcb_equallengthnetgroupitem.html"
                                }
                            ],
                            "Declaration": "createNetClass(netClassName: string, nets: Array<string>, color: IPCB_EqualLengthNetGroupItem['color']): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "createPadPairGroup(padPairGroupName, padPairs)",
                            "Modifiers": "",
                            "Description": "(BETA) Create pad pairs",
                            "link": "pro-api.pcb_drc.createpadpairgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "padPairGroupName",
                                    "Type": "string",
                                    "Description": "Pad pair group name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "padPairs",
                                    "Type": "Array<[string, string]>",
                                    "Description": "Pad p-array",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createPadPairGroup(padPairGroupName: string, padPairs: Array<[string, string]>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "There are three different uses to ensure that the corresponding pads are already on the canvas. are: 1. Free pad - Free pad; 2. Device pad - Device pad; 3. Device pad - Free pad await eda.pcb_Drc.createPadPairGroup('test',[['e0','e1']]) // Free pad - Free pad await eda.pcb_Drc.createPadPairGroup('test',[['R1:1','R1:2'],['R2:1','R2:2']]) // Device pad - Device pad await eda.pcb_Drc.createPadPairGroup('test',[['R1:1','e0'],['R1:2','e1']]]) // Device pad - Free solder pad"
                            ]
                        },
                        {
                            "Method": "deleteDifferentialPair(differentialPairName)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete differential pairs",
                            "link": "pro-api.pcb_drc.deletedifferentialpair.html",
                            "Parameters": [
                                {
                                    "Parameter": "differentialPairName",
                                    "Type": "string",
                                    "Description": "Differential pair name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteDifferentialPair(differentialPairName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "deleteEqualLengthNetGroup(equalLengthNetGroupName)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete equal length network groups",
                            "link": "pro-api.pcb_drc.deleteequallengthnetgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "equalLengthNetGroupName",
                                    "Type": "string",
                                    "Description": "Isometric network group name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteEqualLengthNetGroup(equalLengthNetGroupName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "deleteNetClass(netClassName)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete network classes",
                            "link": "pro-api.pcb_drc.deletenetclass.html",
                            "Parameters": [
                                {
                                    "Parameter": "netClassName",
                                    "Type": "string",
                                    "Description": "Network class name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteNetClass(netClassName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "deletePadPairGroup(padPairGroupName)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete pad pairs",
                            "link": "pro-api.pcb_drc.deletepadpairgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "padPairGroupName",
                                    "Type": "string",
                                    "Description": "Pad pair group name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deletePadPairGroup(padPairGroupName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "deleteRuleConfiguration(configurationName)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete design rules configuration",
                            "link": "pro-api.pcb_drc.deleteruleconfiguration.html",
                            "Parameters": [
                                {
                                    "Parameter": "configurationName",
                                    "Type": "string",
                                    "Description": "Configuration name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteRuleConfiguration(configurationName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the deletion was successful",
                                "System configuration does not allow deletion"
                            ]
                        },
                        {
                            "Method": "getAllDifferentialPairs()",
                            "Modifiers": "",
                            "Description": "(BETA) Gets detailed properties for all differential pairs",
                            "link": "pro-api.pcb_drc.getalldifferentialpairs.html",
                            "Parameters": "",
                            "Declaration": "getAllDifferentialPairs(): Promise<Array<IPCB_DifferentialPairItem>>;",
                            "return": [
                                "Promise<Array<IPCB_DifferentialPairItem>>",
                                "Detailed properties of all differential pairs"
                            ]
                        },
                        {
                            "Method": "getAllEqualLengthNetGroups()",
                            "Modifiers": "",
                            "Description": "(BETA) Gets detailed properties for all equal length network groups",
                            "link": "pro-api.pcb_drc.getallequallengthnetgroups.html",
                            "Parameters": "",
                            "Declaration": "getAllEqualLengthNetGroups(): Promise<Array<IPCB_EqualLengthNetGroupItem>>;",
                            "return": [
                                "Promise<Array<IPCB_EqualLengthNetGroupItem>>",
                                "Detailed properties of all equal length network groups"
                            ]
                        },
                        {
                            "Method": "getAllNetClasses()",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties of all network classes",
                            "link": "pro-api.pcb_drc.getallnetclasses.html",
                            "Parameters": "",
                            "Declaration": "getAllNetClasses(): Promise<Array<IPCB_NetClassItem>>;",
                            "return": [
                                "Promise<Array<IPCB_NetClassItem>>",
                                "Detailed properties of all network classes"
                            ]
                        },
                        {
                            "Method": "getAllPadPairGroups()",
                            "Modifiers": "",
                            "Description": "(BETA) Gets detailed properties for all pad pairs",
                            "link": "pro-api.pcb_drc.getallpadpairgroups.html",
                            "Parameters": "",
                            "Declaration": "getAllPadPairGroups(): Promise<Array<IPCB_PadPairGroupItem>>;",
                            "return": [
                                "Promise<Array<IPCB_PadPairGroupItem>>",
                                "Detailed properties of all pad pairs"
                            ]
                        },
                        {
                            "Method": "getAllRuleConfigurations(includeSystem)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all design rules configurations",
                            "link": "pro-api.pcb_drc.getallruleconfigurations.html",
                            "Parameters": [
                                {
                                    "Parameter": "includeSystem",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to obtain system design rules and configuration",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllRuleConfigurations(includeSystem?: boolean): Promise<Array<{\n        [key: string]: any;\n    }>>;",
                            "return": [
                                "Promise<Array<{ [key: string]: any; }>>",
                                "All design rules and configurations"
                            ]
                        },
                        {
                            "Method": "getCurrentRuleConfiguration()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the current design rule configuration",
                            "link": "pro-api.pcb_drc.getcurrentruleconfiguration.html",
                            "Parameters": "",
                            "Declaration": "getCurrentRuleConfiguration(): Promise<{\n        [key: string]: any;\n    } | undefined>;",
                            "return": [
                                "Promise<{ [key: string]: any; } | undefined>",
                                "The current design rule configuration, undefined failed to obtain"
                            ]
                        },
                        {
                            "Method": "getCurrentRuleConfigurationName()",
                            "Modifiers": "",
                            "Description": "Get the current design rule configuration name",
                            "link": "pro-api.pcb_drc.getcurrentruleconfigurationname.html",
                            "Parameters": "",
                            "Declaration": "getCurrentRuleConfigurationName(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "The current design rule configuration name, undefined failed to obtain"
                            ]
                        },
                        {
                            "Method": "getDefaultRuleConfigurationName()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the name of the new PCB default design rule configuration",
                            "link": "pro-api.pcb_drc.getdefaultruleconfigurationname.html",
                            "Parameters": "",
                            "Declaration": "getDefaultRuleConfigurationName(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "The name of the default design rule configuration, undefined is failed to obtain"
                            ]
                        },
                        {
                            "Method": "getNetByNetRules()",
                            "Modifiers": "",
                            "Description": "(BETA) Get Network-Network Rules",
                            "link": "pro-api.pcb_drc.getnetbynetrules.html",
                            "Parameters": "",
                            "Declaration": "getNetByNetRules(): Promise<{\n        [key: string]: any;\n    }>;",
                            "return": [
                                "Promise<{ [key: string]: any; }>",
                                "All networks of the current PCB - network rules"
                            ]
                        },
                        {
                            "Method": "getNetRules()",
                            "Modifiers": "",
                            "Description": "(BETA) Get network rules",
                            "link": "pro-api.pcb_drc.getnetrules.html",
                            "Parameters": "",
                            "Declaration": "getNetRules(): Promise<Array<{\n        [key: string]: any;\n    }>>;",
                            "return": [
                                "Promise<Array<{ [key: string]: any; }>>",
                                "All network rules for the current PCB"
                            ]
                        },
                        {
                            "Method": "getPadPairGroupMinWireLength(padPairGroupName)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the minimum wire length of the pad pair group",
                            "link": "pro-api.pcb_drc.getpadpairgroupminwirelength.html",
                            "Parameters": [
                                {
                                    "Parameter": "padPairGroupName",
                                    "Type": "string",
                                    "Description": "Pad pair group name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPadPairGroupMinWireLength(padPairGroupName: string): Promise<Array<IPCB_PadPairMinWireLengthItem>>;",
                            "return": [
                                "Promise<Array<IPCB_PadPairMinWireLengthItem>>",
                                "Minimum wire length for all pad pairs"
                            ]
                        },
                        {
                            "Method": "getRegionRules()",
                            "Modifiers": "",
                            "Description": "(BETA) Get Regional Rules",
                            "link": "pro-api.pcb_drc.getregionrules.html",
                            "Parameters": "",
                            "Declaration": "getRegionRules(): Promise<Array<{\n        [key: string]: any;\n    }>>;",
                            "return": [
                                "Promise<Array<{ [key: string]: any; }>>"
                            ]
                        },
                        {
                            "Method": "getRuleConfiguration(configurationName)",
                            "Modifiers": "",
                            "Description": "Get the specified design rule configuration",
                            "link": "pro-api.pcb_drc.getruleconfiguration.html",
                            "Parameters": [
                                {
                                    "Parameter": "configurationName",
                                    "Type": "string",
                                    "Description": "Configuration name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getRuleConfiguration(configurationName: string): Promise<{\n        [key: string]: any;\n    } | undefined>;",
                            "return": [
                                "Promise<{ [key: string]: any; } | undefined>",
                                "Design rules are configured, undefined is that the design rules do not exist"
                            ]
                        },
                        {
                            "Method": "modifyDifferentialPairName(originalDifferentialPairName, differentialPairName)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the name of the differential pair",
                            "link": "pro-api.pcb_drc.modifydifferentialpairname.html",
                            "Parameters": [
                                {
                                    "Parameter": "originalDifferentialPairName",
                                    "Type": "string",
                                    "Description": "Original difference pair name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "differentialPairName",
                                    "Type": "string",
                                    "Description": "New differential pair name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyDifferentialPairName(originalDifferentialPairName: string, differentialPairName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "modifyDifferentialPairNegativeNet(differentialPairName, negativeNet)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify differential to negative networks",
                            "link": "pro-api.pcb_drc.modifydifferentialpairnegativenet.html",
                            "Parameters": [
                                {
                                    "Parameter": "differentialPairName",
                                    "Type": "string",
                                    "Description": "Differential pair name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "negativeNet",
                                    "Type": "string",
                                    "Description": "Negative network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyDifferentialPairNegativeNet(differentialPairName: string, negativeNet: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "modifyDifferentialPairPositiveNet(differentialPairName, positiveNet)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify differential alignment network",
                            "link": "pro-api.pcb_drc.modifydifferentialpairpositivenet.html",
                            "Parameters": [
                                {
                                    "Parameter": "differentialPairName",
                                    "Type": "string",
                                    "Description": "Differential pair name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "positiveNet",
                                    "Type": "string",
                                    "Description": "The network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyDifferentialPairPositiveNet(differentialPairName: string, positiveNet: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "modifyEqualLengthNetGroupName(originalEqualLengthNetGroupName, equalLengthNetGroupName)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the name of the equal length network group",
                            "link": "pro-api.pcb_drc.modifyequallengthnetgroupname.html",
                            "Parameters": [
                                {
                                    "Parameter": "originalEqualLengthNetGroupName",
                                    "Type": "string",
                                    "Description": "Original equal length network group name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "equalLengthNetGroupName",
                                    "Type": "string",
                                    "Description": "New isometric network group name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyEqualLengthNetGroupName(originalEqualLengthNetGroupName: string, equalLengthNetGroupName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "modifyNetClassName(originalNetClassName, netClassName)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the name of the network class",
                            "link": "pro-api.pcb_drc.modifynetclassname.html",
                            "Parameters": [
                                {
                                    "Parameter": "originalNetClassName",
                                    "Type": "string",
                                    "Description": "Original network class name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "netClassName",
                                    "Type": "string",
                                    "Description": "New network class name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyNetClassName(originalNetClassName: string, netClassName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "modifyPadPairGroupName(originalPadPairGroupName, padPairGroupName)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the name of the pad pair group",
                            "link": "pro-api.pcb_drc.modifypadpairgroupname.html",
                            "Parameters": [
                                {
                                    "Parameter": "originalPadPairGroupName",
                                    "Type": "string",
                                    "Description": "Original pad pair name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "padPairGroupName",
                                    "Type": "string",
                                    "Description": "New pad pair name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modifyPadPairGroupName(originalPadPairGroupName: string, padPairGroupName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "overwriteNetByNetRules(netByNetRules)",
                            "Modifiers": "",
                            "Description": "(BETA) Overwrite network-network rules",
                            "link": "pro-api.pcb_drc.overwritenetbynetrules.html",
                            "Parameters": [
                                {
                                    "Parameter": "netByNetRules",
                                    "Type": "{ [key: string]: any; }",
                                    "Description": "Network-Network Rules",
                                    "link": ""
                                }
                            ],
                            "Declaration": "overwriteNetByNetRules(netByNetRules: {\n        [key: string]: any;\n    }): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the override successful?",
                                "All network-network rules of the current PCB will be overwritten, please pay attention to the risk of data loss"
                            ]
                        },
                        {
                            "Method": "overwriteNetRules(netRules)",
                            "Modifiers": "",
                            "Description": "(BETA) Overwrite network rules",
                            "link": "pro-api.pcb_drc.overwritenetrules.html",
                            "Parameters": [
                                {
                                    "Parameter": "netRules",
                                    "Type": "Array<{ [key: string]: any; }>",
                                    "Description": "Network rules",
                                    "link": ""
                                }
                            ],
                            "Declaration": "overwriteNetRules(netRules: Array<{\n        [key: string]: any;\n    }>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the override successful?",
                                "All network rules of the current PCB will be overwritten, please be aware of the risk of data loss"
                            ]
                        },
                        {
                            "Method": "overwriteRegionRules(regionRules)",
                            "Modifiers": "",
                            "Description": "(BETA) Override Region Rules",
                            "link": "pro-api.pcb_drc.overwriteregionrules.html",
                            "Parameters": [
                                {
                                    "Parameter": "regionRules",
                                    "Type": "Array<{ [key: string]: any; }>",
                                    "Description": "Regional rules",
                                    "link": ""
                                }
                            ],
                            "Declaration": "overwriteRegionRules(regionRules: Array<{\n        [key: string]: any;\n    }>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the override successful?",
                                "All regional rules of the current PCB will be overwritten, please be aware of the risk of data loss"
                            ]
                        },
                        {
                            "Method": "removeNetFromEqualLengthNetGroup(equalLengthNetGroupName, net)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove network from equal length network group",
                            "link": "pro-api.pcb_drc.removenetfromequallengthnetgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "equalLengthNetGroupName",
                                    "Type": "string",
                                    "Description": "Isometric network group name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string | Array<string>",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "removeNetFromEqualLengthNetGroup(equalLengthNetGroupName: string, net: string | Array<string>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "removeNetFromNetClass(netClassName, net)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove network from network class",
                            "link": "pro-api.pcb_drc.removenetfromnetclass.html",
                            "Parameters": [
                                {
                                    "Parameter": "netClassName",
                                    "Type": "string",
                                    "Description": "Network class name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string | Array<string>",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "removeNetFromNetClass(netClassName: string, net: string | Array<string>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "removePadPairFromPadPairGroup(padPairGroupName, padPair)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove pad pairs from pad pairs group",
                            "link": "pro-api.pcb_drc.removepadpairfrompadpairgroup.html",
                            "Parameters": [
                                {
                                    "Parameter": "padPairGroupName",
                                    "Type": "string",
                                    "Description": "Pad pair group name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "padPair",
                                    "Type": "[string, string] | Array<[string, string]>",
                                    "Description": "Pad pair",
                                    "link": ""
                                }
                            ],
                            "Declaration": "removePadPairFromPadPairGroup(padPairGroupName: string, padPair: [string, string] | Array<[string, string]>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "There are three different uses to ensure that the corresponding pads are already on the canvas. 1. Free pad - free pad; 2. Device pad - device pad; 3. Device pad - free pad await eda.pcb_Drc.removePadPairFromPadPairGroup('test',['e0','e1']) // Free pad - free pad await eda.pcb_Drc.removePadPairFromPadPairGroup('test',['R1:1','R1:2']) // Device pad - free pad"
                            ]
                        },
                        {
                            "Method": "renameRuleConfiguration(originalConfigurationName, configurationName)",
                            "Modifiers": "",
                            "Description": "(BETA) Rename design rule configuration",
                            "link": "pro-api.pcb_drc.renameruleconfiguration.html",
                            "Parameters": [
                                {
                                    "Parameter": "originalConfigurationName",
                                    "Type": "string",
                                    "Description": "Original design rule configuration name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "configurationName",
                                    "Type": "string",
                                    "Description": "New design rule configuration name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "renameRuleConfiguration(originalConfigurationName: string, configurationName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the renaming successful?",
                                "Only custom configurations can be renamed, system configurations do not allow renaming."
                            ]
                        },
                        {
                            "Method": "saveRuleConfiguration(ruleConfiguration, configurationName, allowOverwrite)",
                            "Modifiers": "",
                            "Description": "(BETA) Save design rules configuration",
                            "link": "pro-api.pcb_drc.saveruleconfiguration.html",
                            "Parameters": [
                                {
                                    "Parameter": "ruleConfiguration",
                                    "Type": "{ [key: string]: any; }",
                                    "Description": "Design rules and configuration",
                                    "link": ""
                                },
                                {
                                    "Parameter": "configurationName",
                                    "Type": "string",
                                    "Description": "Configuration name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "allowOverwrite",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether overwriting the same-name design rule configuration is allowed. False will return false when encountering the same-name design rule configuration. Please note the possible risk of data loss.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "saveRuleConfiguration(ruleConfiguration: {\n        [key: string]: any;\n    }, configurationName: string, allowOverwrite?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Successful saving",
                                "Only custom configurations can be overwritten and saved, and system configurations do not allow modification and override."
                            ]
                        },
                        {
                            "Method": "setAsDefaultRuleConfiguration(configurationName)",
                            "Modifiers": "",
                            "Description": "(BETA) Set to New PCB Default Design Rules Configuration",
                            "link": "pro-api.pcb_drc.setasdefaultruleconfiguration.html",
                            "Parameters": [
                                {
                                    "Parameter": "configurationName",
                                    "Type": "string",
                                    "Description": "Configuration name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setAsDefaultRuleConfiguration(configurationName: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the setting is successful",
                                "The return value is result-oriented, and repeated setting of the same design rule as the default design rule will also return true"
                            ]
                        }
                    ]
                },
                "PCB_Event": {
                    "description": "PCB & Footprint / Event Class",
                    "url": "./pro-api.pcb_event.html",
                    "Signature": "export declare class PCB_Event",
                    "Remark": "Register event callback",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "addMouseEventListener(id, eventType, callFn, onlyOnce)",
                            "Modifiers": "",
                            "Description": "Added mouse event monitoring",
                            "link": "pro-api.pcb_event.addmouseeventlistener.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Event ID to prevent duplicate registration of events",
                                    "link": ""
                                },
                                {
                                    "Parameter": "eventType",
                                    "Type": "'all' | 'selected' | 'clearSelected'",
                                    "Description": "Event Type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "callFn",
                                    "Type": "(eventType: 'selected' | 'clearSelected') => void | Promise<void>",
                                    "Description": "Callback function when event triggers",
                                    "link": ""
                                },
                                {
                                    "Parameter": "onlyOnce",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to listen only once",
                                    "link": ""
                                }
                            ],
                            "Declaration": "addMouseEventListener(id: string, eventType: 'all' | 'selected' | 'clearSelected', callFn: (eventType: 'selected' | 'clearSelected') => void | Promise<void>, onlyOnce?: boolean): void;",
                            "return": [
                                "void"
                            ]
                        },
                        {
                            "Method": "isEventListenerAlreadyExist(id)",
                            "Modifiers": "",
                            "Description": "Query whether the event listening exists",
                            "link": "pro-api.pcb_event.iseventlisteneralreadyexist.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Event ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "isEventListenerAlreadyExist(id: string): boolean;",
                            "return": [
                                "boolean",
                                "Whether event listening exists"
                            ]
                        },
                        {
                            "Method": "removeEventListener(id)",
                            "Modifiers": "",
                            "Description": "Remove event listening",
                            "link": "pro-api.pcb_event.removeeventlistener.html",
                            "Parameters": [
                                {
                                    "Parameter": "id",
                                    "Type": "string",
                                    "Description": "Event ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "removeEventListener(id: string): boolean;",
                            "return": [
                                "boolean",
                                "Whether to remove the specified event listening"
                            ]
                        }
                    ]
                },
                "PCB_Layer": {
                    "description": "PCB & Footprint / Layer Operations Class",
                    "url": "./pro-api.pcb_layer.html",
                    "Signature": "export declare class PCB_Layer",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "addCustomLayer()",
                            "Modifiers": "",
                            "Description": "(BETA) Added a custom layer",
                            "link": "pro-api.pcb_layer.addcustomlayer.html",
                            "Parameters": "",
                            "Declaration": "addCustomLayer(): Promise<TPCB_LayersOfCustom | undefined>;",
                            "return": [
                                "Promise<TPCB_LayersOfCustom | undefined>",
                                "The layer ID of the newly added custom layer, if undefined, it will be a new failure, which may be that the number of custom layers has reached the upper limit."
                            ]
                        },
                        {
                            "Method": "getAllLayers()",
                            "Modifiers": "",
                            "Description": "(BETA) Get detailed properties for all layers",
                            "link": "pro-api.pcb_layer.getalllayers.html",
                            "Parameters": "",
                            "Declaration": "getAllLayers(): Promise<Array<IPCB_LayerItem>>;",
                            "return": [
                                "Promise<Array<IPCB_LayerItem>>",
                                "Detailed properties of all layers"
                            ]
                        },
                        {
                            "Method": "lockLayer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Locking layer",
                            "link": "pro-api.pcb_layer.locklayer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>",
                                    "Description": "(Optional) layer, if no layer is specified, it defaults to all layers",
                                    "link": "pro-api.tpcb_layersintheselectable.html"
                                }
                            ],
                            "Declaration": "lockLayer(layer?: TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "modifyLayer(layer, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify layer properties",
                            "link": "pro-api.pcb_layer.modifylayer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersInTheSelectable",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersintheselectable.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ name?: string; type?: TPCB_LayerTypesOfInnerLayer; color?: string; transparency?: number; }",
                                    "Description": "property",
                                    "link": "pro-api.tpcb_layertypesofinnerlayer.html"
                                }
                            ],
                            "Declaration": "modifyLayer(layer: TPCB_LayersInTheSelectable, property: {\n        name?: string;\n        type?: TPCB_LayerTypesOfInnerLayer;\n        color?: string;\n        transparency?: number;\n    }): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "If the modified layer attribute is undefined, it means that the modification failed or the layer does not exist.",
                                "Only the inner layer and custom layer allow the name to be modified; only the inner layer allows the type to be modified, and the transparency only supports numbers between 0-100"
                            ]
                        },
                        {
                            "Method": "removeLayer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove layer",
                            "link": "pro-api.pcb_layer.removelayer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfCustom",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofcustom.html"
                                }
                            ],
                            "Declaration": "removeLayer(layer: TPCB_LayersOfCustom): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "Currently only the removal of custom layers is supported"
                            ]
                        },
                        {
                            "Method": "selectLayer(layer)",
                            "Modifiers": "",
                            "Description": "Select the layer",
                            "link": "pro-api.pcb_layer.selectlayer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersInTheSelectable",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersintheselectable.html"
                                }
                            ],
                            "Declaration": "selectLayer(layer: TPCB_LayersInTheSelectable): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the operation is successful, if the specified layer does not exist, it will return false"
                            ]
                        },
                        {
                            "Method": "setInactiveLayerDisplayMode(displayMode)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the non-activated layer display mode",
                            "link": "pro-api.pcb_layer.setinactivelayerdisplaymode.html",
                            "Parameters": [
                                {
                                    "Parameter": "displayMode",
                                    "Type": "EPCB_InactiveLayerDisplayMode",
                                    "Description": "(Optional) Display Mode",
                                    "link": "pro-api.epcb_inactivelayerdisplaymode.html"
                                }
                            ],
                            "Declaration": "setInactiveLayerDisplayMode(displayMode?: EPCB_InactiveLayerDisplayMode): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the settings are successful"
                            ]
                        },
                        {
                            "Method": "setInactiveLayerTransparency(transparency)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the non-activated layer transparency",
                            "link": "pro-api.pcb_layer.setinactivelayertransparency.html",
                            "Parameters": [
                                {
                                    "Parameter": "transparency",
                                    "Type": "number",
                                    "Description": "Transparency, range 0-100",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setInactiveLayerTransparency(transparency: number): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setLayerColorConfiguration(colorConfiguration)",
                            "Modifiers": "",
                            "Description": "(BETA) Set layer color configuration",
                            "link": "pro-api.pcb_layer.setlayercolorconfiguration.html",
                            "Parameters": [
                                {
                                    "Parameter": "colorConfiguration",
                                    "Type": "EPCB_LayerColorConfiguration",
                                    "Description": "Color configuration",
                                    "link": "pro-api.epcb_layercolorconfiguration.html"
                                }
                            ],
                            "Declaration": "setLayerColorConfiguration(colorConfiguration: EPCB_LayerColorConfiguration): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setLayerInvisible(layer, setOtherLayerVisible)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the layer to invisible",
                            "link": "pro-api.pcb_layer.setlayerinvisible.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>",
                                    "Description": "(Optional) layer, if no layer is specified, it defaults to all layers",
                                    "link": "pro-api.tpcb_layersintheselectable.html"
                                },
                                {
                                    "Parameter": "setOtherLayerVisible",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to set other layers to be visible",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setLayerInvisible(layer?: TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>, setOtherLayerVisible?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setLayerVisible(layer, setOtherLayerInvisible)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the layer to visible",
                            "link": "pro-api.pcb_layer.setlayervisible.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>",
                                    "Description": "(Optional) layer, if no layer is specified, it defaults to all layers",
                                    "link": "pro-api.tpcb_layersintheselectable.html"
                                },
                                {
                                    "Parameter": "setOtherLayerInvisible",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to set other layers to be invisible",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setLayerVisible(layer?: TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>, setOtherLayerInvisible?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setPcbType(pcbType)",
                            "Modifiers": "",
                            "Description": "(BETA) Setting PCB type",
                            "link": "pro-api.pcb_layer.setpcbtype.html",
                            "Parameters": [
                                {
                                    "Parameter": "pcbType",
                                    "Type": "EPCB_PcbPlateType",
                                    "Description": "PCB Type",
                                    "link": "pro-api.epcb_pcbplatetype.html"
                                }
                            ],
                            "Declaration": "setPcbType(pcbType: EPCB_PcbPlateType): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "This is mainly to adapt to the design of the FPC soft board. If the PCB type is set to the FPC soft board, a new FPC reinforcement layer will be added.",
                                "Please note:",
                                "Jialichuang does not currently support the production of FPC soft boards with more than 2 layers of copper foil;",
                                "When switching PCB type from FPC softboard to normal sheet, any primitives on the FPC reinforcement layer need to be pre-deleted, otherwise the switch will not be possible and the result of false will be returned."
                            ]
                        },
                        {
                            "Method": "setTheNumberOfCopperLayers(numberOfLayers)",
                            "Modifiers": "",
                            "Description": "(BETA) Set the number of copper foil layers",
                            "link": "pro-api.pcb_layer.setthenumberofcopperlayers.html",
                            "Parameters": [
                                {
                                    "Parameter": "numberOfLayers",
                                    "Type": "2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 | 22 | 24 | 26 | 28 | 30 | 32",
                                    "Description": "Number of layers",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setTheNumberOfCopperLayers(numberOfLayers: 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 | 22 | 24 | 26 | 28 | 30 | 32): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "The newly created PCB document has two copper foil layers by default"
                            ]
                        },
                        {
                            "Method": "unlockLayer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Cancel the lock layer",
                            "link": "pro-api.pcb_layer.unlocklayer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>",
                                    "Description": "(Optional) layer, if no layer is specified, it defaults to all layers",
                                    "link": "pro-api.tpcb_layersintheselectable.html"
                                }
                            ],
                            "Declaration": "unlockLayer(layer?: TPCB_LayersInTheSelectable | Array<TPCB_LayersInTheSelectable>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        }
                    ]
                },
                "PCB_ManufactureData": {
                    "description": "PCB & Footprint / Manufacturing Data Class",
                    "url": "./pro-api.pcb_manufacturedata.html",
                    "Signature": "export declare class PCB_ManufactureData",
                    "Remark": "Obtain the current PCB's production materials documents and quickly place an order",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "deleteBomTemplate(template)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete BOM templates",
                            "link": "pro-api.pcb_manufacturedata.deletebomtemplate.html",
                            "Parameters": [
                                {
                                    "Parameter": "template",
                                    "Type": "string",
                                    "Description": "BOM template name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteBomTemplate(template: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "get3DFile(fileName, fileType, element, modelMode, autoGenerateModels)",
                            "Modifiers": "",
                            "Description": "(BETA) Get 3D model files",
                            "link": "pro-api.pcb_manufacturedata.get3dfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileType",
                                    "Type": "'step' | 'obj'",
                                    "Description": "(Optional) File Type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "element",
                                    "Type": "Array<'Component Model' | 'Via' | 'Silkscreen' | 'Wire In Signal Layer'>",
                                    "Description": "(Optional) Export object",
                                    "link": ""
                                },
                                {
                                    "Parameter": "modelMode",
                                    "Type": "'Outfit' | 'Parts'",
                                    "Description": "(Optional) Export mode, Outfit = Assembly, Parts = Parts",
                                    "link": ""
                                },
                                {
                                    "Parameter": "autoGenerateModels",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to automatically generate a 3D model for components that are not bound to 3D models (based on the component's \"height\" attribute)",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get3DFile(fileName?: string, fileType?: 'step' | 'obj', element?: Array<'Component Model' | 'Via' | 'Silkscreen' | 'Wire In Signal Layer'>, modelMode?: 'Outfit' | 'Parts', autoGenerateModels?: boolean): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "3D model file data",
                                "Please note: Only component models imported in STEP format can be reflected in the exported STEP file",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "get3DShellFile(fileName, fileType)",
                            "Modifiers": "",
                            "Description": "(BETA) Get 3D shell files",
                            "link": "pro-api.pcb_manufacturedata.get3dshellfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileType",
                                    "Type": "'stl' | 'step' | 'obj'",
                                    "Description": "(Optional) File Type",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get3DShellFile(fileName?: string, fileType?: 'stl' | 'step' | 'obj'): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "3D shell file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getAltiumDesignerFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Altium Designer files",
                            "link": "pro-api.pcb_manufacturedata.getaltiumdesignerfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAltiumDesignerFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Altium Designer File Data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getAutoLayoutJsonFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Getting Automatic Layout Files (JSON)",
                            "link": "pro-api.pcb_manufacturedata.getautolayoutjsonfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAutoLayoutJsonFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Automatically layout JSON file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getAutoRouteJsonFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Getting Automatic Cabling Files (JSON)",
                            "link": "pro-api.pcb_manufacturedata.getautoroutejsonfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAutoRouteJsonFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Automatic cabling of JSON file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getBomFile(fileName, fileType, template, filterOptions, statistics, property, columns)",
                            "Modifiers": "",
                            "Description": "(BETA) Get BOM files",
                            "link": "pro-api.pcb_manufacturedata.getbomfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileType",
                                    "Type": "'xlsx' | 'csv'",
                                    "Description": "(Optional) File Type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "template",
                                    "Type": "string",
                                    "Description": "(Optional) Template name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "filterOptions",
                                    "Type": "Array<{ property: string; includeValue: boolean | string; }>",
                                    "Description": "(Optional) Filtering rules should only include rules that need to be enabled, property is the rule name, and includeValue is the matching value",
                                    "link": ""
                                },
                                {
                                    "Parameter": "statistics",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Statistics, containing the names of all statistics that need to be enabled",
                                    "link": ""
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) property, containing the names of all attributes that need to be enabled",
                                    "link": ""
                                },
                                {
                                    "Parameter": "columns",
                                    "Type": "Array<IPCB_BomPropertiesTableColumns>",
                                    "Description": "(Optional) column attributes and sorts. If title, sort, group, orderWeight is not passed in, the default value will be taken. null means **None** or **Nine**",
                                    "link": "pro-api.ipcb_bompropertiestablecolumns.html"
                                }
                            ],
                            "Declaration": "getBomFile(fileName?: string, fileType?: 'xlsx' | 'csv', template?: string, filterOptions?: Array<{\n        property: string;\n        includeValue: boolean | string;\n    }>, statistics?: Array<string>, property?: Array<string>, columns?: Array<IPCB_BomPropertiesTableColumns>): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "BOM file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getBomTemplateFile(template)",
                            "Modifiers": "",
                            "Description": "(BETA) Get BOM template file",
                            "link": "pro-api.pcb_manufacturedata.getbomtemplatefile.html",
                            "Parameters": [
                                {
                                    "Parameter": "template",
                                    "Type": "string",
                                    "Description": "BOM template name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getBomTemplateFile(template: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "BOM template file"
                            ]
                        },
                        {
                            "Method": "getBomTemplates()",
                            "Modifiers": "",
                            "Description": "(BETA) Get a list of BOM templates",
                            "link": "pro-api.pcb_manufacturedata.getbomtemplates.html",
                            "Parameters": "",
                            "Declaration": "getBomTemplates(): Promise<string[]>;",
                            "return": [
                                "Promise<string[]>",
                                "BOM template list"
                            ]
                        },
                        {
                            "Method": "getDsnFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Getting Automatic Cabling Files (DSN)",
                            "link": "pro-api.pcb_manufacturedata.getdsnfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getDsnFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Automatic cabling DSN file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getDxfFile(fileName, layers, objects)",
                            "Modifiers": "",
                            "Description": "(BETA) Get DXF files",
                            "link": "pro-api.pcb_manufacturedata.getdxffile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layers",
                                    "Type": "Array<{ layerId: number; mirror: boolean; }>",
                                    "Description": "(Optional) Export layer",
                                    "link": ""
                                },
                                {
                                    "Parameter": "objects",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Export object",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getDxfFile(fileName?: string, layers?: Array<{\n        layerId: number;\n        mirror: boolean;\n    }>, objects?: Array<string>): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "DXF file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getFlyingProbeTestFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtain flying needle test files",
                            "link": "pro-api.pcb_manufacturedata.getflyingprobetestfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getFlyingProbeTestFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Flying needle test file data"
                            ]
                        },
                        {
                            "Method": "getGerberFile(fileName, colorSilkscreen, unit, digitalFormat, other, layers, objects)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtain PCB plate making file (Gerber)",
                            "link": "pro-api.pcb_manufacturedata.getgerberfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "colorSilkscreen",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to generate color silk screen printing manufacturing files (Jalichuang special file)",
                                    "link": ""
                                },
                                {
                                    "Parameter": "unit",
                                    "Type": "ESYS_Unit.MILLIMETER | ESYS_Unit.INCH",
                                    "Description": "(Optional) Unit",
                                    "link": "pro-api.esys_unit.html"
                                },
                                {
                                    "Parameter": "digitalFormat",
                                    "Type": "{ integerNumber: number; decimalNumber: number; }",
                                    "Description": "(Optional) Number format",
                                    "link": ""
                                },
                                {
                                    "Parameter": "other",
                                    "Type": "{ metallicDrillingInformation: boolean; nonMetallicDrillingInformation: boolean; drillTable: boolean; flyingProbeTestingFile: boolean; }",
                                    "Description": "(Optional) Other",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layers",
                                    "Type": "Array<{ layerId: number; isMirror: boolean; }>",
                                    "Description": "(Optional) export layer, by default, export according to Jialichuang production requirements",
                                    "link": ""
                                },
                                {
                                    "Parameter": "objects",
                                    "Type": "Array<'Pad' | 'Via' | 'Track' | 'Text' | 'Image' | 'Dimension' | 'BoardOutline' | 'BoardCutout' | 'CopperFilled' | 'SolidRegion' | 'FPCStiffener' | 'Line' | 'PlaneZone' | 'ComponentProperty' | 'ComponentSilkscreen' | 'TearDrop'>",
                                    "Description": "(Optional) export objects, by default, export according to Jialichuang production requirements",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getGerberFile(fileName?: string, colorSilkscreen?: boolean, unit?: ESYS_Unit.MILLIMETER | ESYS_Unit.INCH, digitalFormat?: {\n        integerNumber: number;\n        decimalNumber: number;\n    }, other?: {\n        metallicDrillingInformation: boolean;\n        nonMetallicDrillingInformation: boolean;\n        drillTable: boolean;\n        flyingProbeTestingFile: boolean;\n    }, layers?: Array<{\n        layerId: number;\n        isMirror: boolean;\n    }>, objects?: Array<'Pad' | 'Via' | 'Track' | 'Text' | 'Image' | 'Dimension' | 'BoardOutline' | 'BoardCutout' | 'CopperFilled' | 'SolidRegion' | 'FPCStiffener' | 'Line' | 'PlaneZone' | 'ComponentProperty' | 'ComponentSilkscreen' | 'TearDrop'>): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "PCB plate making file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getIpcD356AFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtain IPC-D-356A file",
                            "link": "pro-api.pcb_manufacturedata.getipcd356afile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getIpcD356AFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "IPC-D-356A File Data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getNetlistFile(fileName, netlistType)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Netlist Files (Netlist)",
                            "link": "pro-api.pcb_manufacturedata.getnetlistfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "netlistType",
                                    "Type": "ESYS_NetlistType",
                                    "Description": "(Optional) Netlist Type",
                                    "link": "pro-api.esys_netlisttype.html"
                                }
                            ],
                            "Declaration": "getNetlistFile(fileName?: string, netlistType?: ESYS_NetlistType): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Netlist file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getOpenDatabaseDoublePlusFile(fileName, unit, otherData, layers, objects)",
                            "Modifiers": "",
                            "Description": "(BETA) Get ODB++ files",
                            "link": "pro-api.pcb_manufacturedata.getopendatabasedoubleplusfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "unit",
                                    "Type": "ESYS_Unit.INCH",
                                    "Description": "(Optional) Unit",
                                    "link": "pro-api.esys_unit.html"
                                },
                                {
                                    "Parameter": "otherData",
                                    "Type": "{ metallizedDrilledHoles?: boolean; nonMetallizedDrilledHoles?: boolean; drillTable?: boolean; flyingProbeTestFile?: boolean; }",
                                    "Description": "(Optional) Other",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layers",
                                    "Type": "Array<{ layerId: number; mirror: boolean; }>",
                                    "Description": "(Optional) export layer, by default, export according to Jialichuang production requirements",
                                    "link": ""
                                },
                                {
                                    "Parameter": "objects",
                                    "Type": "Array<{ objectName: string; }>",
                                    "Description": "(Optional) export objects, by default, export according to Jialichuang production requirements",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getOpenDatabaseDoublePlusFile(fileName?: string, unit?: ESYS_Unit.INCH, otherData?: {\n        metallizedDrilledHoles?: boolean;\n        nonMetallizedDrilledHoles?: boolean;\n        drillTable?: boolean;\n        flyingProbeTestFile?: boolean;\n    }, layers?: Array<{\n        layerId: number;\n        mirror: boolean;\n    }>, objects?: Array<{\n        objectName: string;\n    }>): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "ODB++ file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getPadsFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Get PADS files",
                            "link": "pro-api.pcb_manufacturedata.getpadsfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPadsFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "PADS file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getPcbInfoFile(fileName)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtain PCB information files",
                            "link": "pro-api.pcb_manufacturedata.getpcbinfofile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPcbInfoFile(fileName?: string): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "PCB information file",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getPdfFile(fileName, outputMethod, contentConfig, watermark)",
                            "Modifiers": "",
                            "Description": "(BETA) Get PDF files",
                            "link": "pro-api.pcb_manufacturedata.getpdffile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "outputMethod",
                                    "Type": "EPCB_PdfOutputMethod",
                                    "Description": "(Optional) Output method",
                                    "link": "pro-api.epcb_pdfoutputmethod.html"
                                },
                                {
                                    "Parameter": "contentConfig",
                                    "Type": "{ displayAttributesAsMenu: boolean; showOutlineOnly: boolean; }",
                                    "Description": "(Optional) Content Configuration",
                                    "link": ""
                                },
                                {
                                    "Parameter": "watermark",
                                    "Type": "{ show?: boolean; content?: string; styleConfig?: { color: string; transparency: 'Opaque' | '75%' | '50%' | '25%'; font: string; fontSize: string; style: { blood: boolean; italic: boolean; underline: boolean; }; slope: 0 | 45 | 90; denseness: 'Single' | 'Sparse' | 'Std' | 'Dense'; }; }",
                                    "Description": "(Optional) Watermark",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getPdfFile(fileName?: string, outputMethod?: EPCB_PdfOutputMethod, contentConfig?: {\n        displayAttributesAsMenu: boolean;\n        showOutlineOnly: boolean;\n    }, watermark?: {\n        show?: boolean;\n        content?: string;\n        styleConfig?: {\n            color: string;\n            transparency: 'Opaque' | '75%' | '50%' | '25%';\n            font: string;\n            fontSize: string;\n            style: {\n                blood: boolean;\n                italic: boolean;\n                underline: boolean;\n            };\n            slope: 0 | 45 | 90;\n            denseness: 'Single' | 'Sparse' | 'Std' | 'Dense';\n        };\n    }): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "PDF file data (or compressed package)",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface",
                                "The outputMethod, contentConfig, watermark parameters are temporarily unavailable, waiting for later planning"
                            ]
                        },
                        {
                            "Method": "getPickAndPlaceFile(fileName, fileType, unit)",
                            "Modifiers": "",
                            "Description": "(BETA) Get coordinate file (PickAndPlace)",
                            "link": "pro-api.pcb_manufacturedata.getpickandplacefile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileType",
                                    "Type": "'xlsx' | 'csv'",
                                    "Description": "(Optional) File Type",
                                    "link": ""
                                },
                                {
                                    "Parameter": "unit",
                                    "Type": "ESYS_Unit.MILLIMETER | ESYS_Unit.MIL",
                                    "Description": "(Optional) Unit",
                                    "link": "pro-api.esys_unit.html"
                                }
                            ],
                            "Declaration": "getPickAndPlaceFile(fileName?: string, fileType?: 'xlsx' | 'csv', unit?: ESYS_Unit.MILLIMETER | ESYS_Unit.MIL): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Coordinate file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "getTestPointFile(fileName, fileType)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtain test point report files",
                            "link": "pro-api.pcb_manufacturedata.gettestpointfile.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileType",
                                    "Type": "'xlsx' | 'csv'",
                                    "Description": "(Optional) File Type",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getTestPointFile(fileName?: string, fileType?: 'xlsx' | 'csv'): Promise<File | undefined>;",
                            "return": [
                                "Promise<File | undefined>",
                                "Test point report file data",
                                "You can export files to the local file system using the SYS_FileSystem.saveFile() interface"
                            ]
                        },
                        {
                            "Method": "place3DShellOrder(interactive, ignoreWarning)",
                            "Modifiers": "",
                            "Description": "(BETA) 3D shell order",
                            "link": "pro-api.pcb_manufacturedata.place3dshellorder.html",
                            "Parameters": [
                                {
                                    "Parameter": "interactive",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to enable interactive checking If enabled, there will be pop-up windows waiting for the user to interact, and the ignoreWarning parameter cannot be used to ignore the warning, that is, the ignoreWarning parameter will be ignored; if disabled, there will be no internal EDA pop-up window after the call, and the program will perform a silent check. If the order condition is reached, true will be returned and the order page will be opened on the new tab.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "ignoreWarning",
                                    "Type": "boolean",
                                    "Description": "(Optional) Ignore warnings during non-interactive inspections If set to true, all check warning items will be ignored and order information will be generated as much as possible; if set to false, any warning will interrupt execution and return the result of false",
                                    "link": ""
                                }
                            ],
                            "Declaration": "place3DShellOrder(interactive?: boolean, ignoreWarning?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Passed the order check"
                            ]
                        },
                        {
                            "Method": "placeComponentsOrder(interactive, ignoreWarning)",
                            "Modifiers": "",
                            "Description": "(BETA) Component Order",
                            "link": "pro-api.pcb_manufacturedata.placecomponentsorder.html",
                            "Parameters": [
                                {
                                    "Parameter": "interactive",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to enable interactive checking If enabled, there will be pop-up windows waiting for the user to interact, and the ignoreWarning parameter cannot be used to ignore the warning, that is, the ignoreWarning parameter will be ignored; if disabled, there will be no internal EDA pop-up window after the call, and the program will perform a silent check. If the order condition is reached, true will be returned and the order page will be opened on the new tab.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "ignoreWarning",
                                    "Type": "boolean",
                                    "Description": "(Optional) Ignore warnings during non-interactive inspections If set to true, all check warning items will be ignored and order information will be generated as much as possible; if set to false, any warning will interrupt execution and return the result of false",
                                    "link": ""
                                }
                            ],
                            "Declaration": "placeComponentsOrder(interactive?: boolean, ignoreWarning?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Passed the order check"
                            ]
                        },
                        {
                            "Method": "placePcbOrder(interactive, ignoreWarning)",
                            "Modifiers": "",
                            "Description": "(BETA) PCB Order",
                            "link": "pro-api.pcb_manufacturedata.placepcborder.html",
                            "Parameters": [
                                {
                                    "Parameter": "interactive",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to enable interactive checking If enabled, there will be pop-up windows waiting for the user to interact, and the ignoreWarning parameter cannot be used to ignore the warning, that is, the ignoreWarning parameter will be ignored; if disabled, there will be no internal EDA pop-up window after the call, and the program will perform a silent check. If the order condition is reached, true will be returned and the order page will be opened on the new tab.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "ignoreWarning",
                                    "Type": "boolean",
                                    "Description": "(Optional) Ignore warnings during non-interactive inspections If set to true, all check warning items will be ignored and order information will be generated as much as possible; if set to false, any warning will interrupt execution and return the result of false",
                                    "link": ""
                                }
                            ],
                            "Declaration": "placePcbOrder(interactive?: boolean, ignoreWarning?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Passed the order check"
                            ]
                        },
                        {
                            "Method": "placeSmtComponentsOrder(interactive, ignoreWarning)",
                            "Modifiers": "",
                            "Description": "(BETA) SMT component order",
                            "link": "pro-api.pcb_manufacturedata.placesmtcomponentsorder.html",
                            "Parameters": [
                                {
                                    "Parameter": "interactive",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to enable interactive checking If enabled, there will be pop-up windows waiting for the user to interact, and the ignoreWarning parameter cannot be used to ignore the warning, that is, the ignoreWarning parameter will be ignored; if disabled, there will be no internal EDA pop-up window after the call, and the program will perform a silent check. If the order condition is reached, true will be returned and the order page will be opened on the new tab.",
                                    "link": ""
                                },
                                {
                                    "Parameter": "ignoreWarning",
                                    "Type": "boolean",
                                    "Description": "(Optional) Ignore warnings during non-interactive inspections If set to true, all check warning items will be ignored and order information will be generated as much as possible; if set to false, any warning will interrupt execution and return the result of false",
                                    "link": ""
                                }
                            ],
                            "Declaration": "placeSmtComponentsOrder(interactive?: boolean, ignoreWarning?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Passed the order check"
                            ]
                        },
                        {
                            "Method": "uploadBomTemplateFile(templateFile, template)",
                            "Modifiers": "",
                            "Description": "(BETA) Upload BOM template files",
                            "link": "pro-api.pcb_manufacturedata.uploadbomtemplatefile.html",
                            "Parameters": [
                                {
                                    "Parameter": "templateFile",
                                    "Type": "File",
                                    "Description": "BOM template file",
                                    "link": ""
                                },
                                {
                                    "Parameter": "template",
                                    "Type": "string",
                                    "Description": "(Optional) BOM template name, if undefined, it will automatically take the value from the templateFile",
                                    "link": ""
                                }
                            ],
                            "Declaration": "uploadBomTemplateFile(templateFile: File, template?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "BOM template name"
                            ]
                        }
                    ]
                },
                "PCB_MathPolygon": {
                    "description": "PCB & Footprint / Polygon Math Class",
                    "url": "./pro-api.pcb_mathpolygon.html",
                    "Signature": "export declare class PCB_MathPolygon",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "calculateBBoxHeight(complexPolygon)",
                            "Modifiers": "",
                            "Description": "",
                            "link": "pro-api.pcb_mathpolygon.calculatebboxheight.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>",
                                    "Description": "",
                                    "link": "pro-api.tpcb_polygonsourcearray.html"
                                }
                            ],
                            "Declaration": "calculateBBoxHeight(complexPolygon: TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>): number;",
                            "return": [
                                "number"
                            ]
                        },
                        {
                            "Method": "calculateBBoxWidth(complexPolygon)",
                            "Modifiers": "",
                            "Description": "",
                            "link": "pro-api.pcb_mathpolygon.calculatebboxwidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>",
                                    "Description": "",
                                    "link": "pro-api.tpcb_polygonsourcearray.html"
                                }
                            ],
                            "Declaration": "calculateBBoxWidth(complexPolygon: TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>): number;",
                            "return": [
                                "number"
                            ]
                        },
                        {
                            "Method": "convertImageToComplexPolygon(imageBlob, imageWidth, imageHeight, tolerance, simplification, smoothing, despeckling, whiteAsBackgroundColor, inversion)",
                            "Modifiers": "",
                            "Description": "(BETA) Convert an image to a complex polygon object",
                            "link": "pro-api.pcb_mathpolygon.convertimagetocomplexpolygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "imageBlob",
                                    "Type": "Blob",
                                    "Description": "Image Blob file, you can use the SYS_FileSystem.openReadFileDialog() method to read files from the file system",
                                    "link": "pro-api.sys_filesystem.openreadfiledialog.html"
                                },
                                {
                                    "Parameter": "imageWidth",
                                    "Type": "number",
                                    "Description": "Image Width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "imageHeight",
                                    "Type": "number",
                                    "Description": "Image height",
                                    "link": ""
                                },
                                {
                                    "Parameter": "tolerance",
                                    "Type": "number",
                                    "Description": "(Optional) Tolerance, value range 0-1",
                                    "link": ""
                                },
                                {
                                    "Parameter": "simplification",
                                    "Type": "number",
                                    "Description": "(Optional) Simplified, value range 0-1",
                                    "link": ""
                                },
                                {
                                    "Parameter": "smoothing",
                                    "Type": "number",
                                    "Description": "(Optional) Smooth, value range 0-1.33",
                                    "link": ""
                                },
                                {
                                    "Parameter": "despeckling",
                                    "Type": "number",
                                    "Description": "(Optional) Despot, value range 0-5",
                                    "link": ""
                                },
                                {
                                    "Parameter": "whiteAsBackgroundColor",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether white is the background color",
                                    "link": ""
                                },
                                {
                                    "Parameter": "inversion",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to reverse the phase",
                                    "link": ""
                                }
                            ],
                            "Declaration": "convertImageToComplexPolygon(imageBlob: Blob, imageWidth: number, imageHeight: number, tolerance?: number, simplification?: number, smoothing?: number, despeckling?: number, whiteAsBackgroundColor?: boolean, inversion?: boolean): Promise<IPCB_ComplexPolygon | undefined>;",
                            "return": [
                                "Promise<IPCB_ComplexPolygon | undefined>",
                                "Complex polygonal objects"
                            ]
                        },
                        {
                            "Method": "createComplexPolygon(complexPolygon)",
                            "Modifiers": "",
                            "Description": "Create complex polygons",
                            "link": "pro-api.pcb_mathpolygon.createcomplexpolygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray> | IPCB_Polygon | Array<IPCB_Polygon>",
                                    "Description": "Complex polygon data",
                                    "link": "pro-api.tpcb_polygonsourcearray.html"
                                }
                            ],
                            "Declaration": "createComplexPolygon(complexPolygon: TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray> | IPCB_Polygon | Array<IPCB_Polygon>): IPCB_ComplexPolygon | undefined;",
                            "return": [
                                "IPCB_ComplexPolygon | undefined",
                                "Complex polygon object, undefined means that the data is illegal"
                            ]
                        },
                        {
                            "Method": "createPolygon(polygon)",
                            "Modifiers": "",
                            "Description": "Create a single polygon",
                            "link": "pro-api.pcb_mathpolygon.createpolygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "polygon",
                                    "Type": "TPCB_PolygonSourceArray",
                                    "Description": "Single polygon data",
                                    "link": "pro-api.tpcb_polygonsourcearray.html"
                                }
                            ],
                            "Declaration": "createPolygon(polygon: TPCB_PolygonSourceArray): IPCB_Polygon | undefined;",
                            "return": [
                                "IPCB_Polygon | undefined",
                                "Single-polygon object, undefined means that the data is illegal"
                            ]
                        },
                        {
                            "Method": "splitPolygon(complexPolygons)",
                            "Modifiers": "",
                            "Description": "Split single polygon",
                            "link": "pro-api.pcb_mathpolygon.splitpolygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygons",
                                    "Type": "Array<IPCB_ComplexPolygon>",
                                    "Description": "Complex polygons",
                                    "link": "pro-api.ipcb_complexpolygon.html"
                                }
                            ],
                            "Declaration": "splitPolygon(...complexPolygons: Array<IPCB_ComplexPolygon>): Array<IPCB_Polygon>;",
                            "return": [
                                "Array<IPCB_Polygon>",
                                "Single polygon array"
                            ]
                        }
                    ]
                },
                "PCB_Net": {
                    "description": "PCB & Footprint / Net Class",
                    "url": "./pro-api.pcb_net.html",
                    "Signature": "export declare class PCB_Net",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getAllNetName()",
                            "Modifiers": "",
                            "Description": "Get the network name of all networks",
                            "link": "pro-api.pcb_net.getallnetname.html",
                            "Parameters": "",
                            "Declaration": "getAllNetName(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Network name array"
                            ]
                        },
                        {
                            "Method": "getAllNetsName()",
                            "Modifiers": "",
                            "Description": "Get the network name of all networks",
                            "link": "pro-api.pcb_net.getallnetsname.html",
                            "Parameters": "",
                            "Declaration": "getAllNetsName(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Network name array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitivesByNet(net, primitiveTypes)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all elements associated with the specified network",
                            "link": "pro-api.pcb_net.getallprimitivesbynet.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveTypes",
                                    "Type": "Array<EPCB_PrimitiveType>",
                                    "Description": "(Optional) Element type array. If the specified element type does not have network attributes, the returned data will always be empty",
                                    "link": "pro-api.epcb_primitivetype.html"
                                }
                            ],
                            "Declaration": "getAllPrimitivesByNet(net: string, primitiveTypes?: Array<EPCB_PrimitiveType>): Promise<Array<IPCB_Primitive>>;",
                            "return": [
                                "Promise<Array<IPCB_Primitive>>",
                                "Array of Element Objects"
                            ]
                        },
                        {
                            "Method": "getNetLength(net)",
                            "Modifiers": "",
                            "Description": "Get the length of the specified network",
                            "link": "pro-api.pcb_net.getnetlength.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getNetLength(net: string): Promise<number | undefined>;",
                            "return": [
                                "Promise<number | undefined>",
                                "Network length, undefined means that the network does not exist, 0 means that the network has no length"
                            ]
                        },
                        {
                            "Method": "getNetlist(type)",
                            "Modifiers": "",
                            "Description": "Get the netlist",
                            "link": "pro-api.pcb_net.getnetlist.html",
                            "Parameters": [
                                {
                                    "Parameter": "type",
                                    "Type": "ESYS_NetlistType",
                                    "Description": "(Optional) Netlist format",
                                    "link": "pro-api.esys_netlisttype.html"
                                }
                            ],
                            "Declaration": "getNetlist(type?: ESYS_NetlistType): Promise<string>;",
                            "return": [
                                "Promise<string>",
                                "Netlist data"
                            ]
                        },
                        {
                            "Method": "highlightNet(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Highlight Network",
                            "link": "pro-api.pcb_net.highlightnet.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "highlightNet(net: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "The return value of this interface is result-oriented. If the network has been highlighted, it will also return true"
                            ]
                        },
                        {
                            "Method": "selectNet(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Select the network",
                            "link": "pro-api.pcb_net.selectnet.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "selectNet(net: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "setNetlist(type, netlist)",
                            "Modifiers": "",
                            "Description": "Update the netlist",
                            "link": "pro-api.pcb_net.setnetlist.html",
                            "Parameters": [
                                {
                                    "Parameter": "type",
                                    "Type": "ESYS_NetlistType | undefined",
                                    "Description": "Netlist format",
                                    "link": "pro-api.esys_netlisttype.html"
                                },
                                {
                                    "Parameter": "netlist",
                                    "Type": "string",
                                    "Description": "Netlist data",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setNetlist(type: ESYS_NetlistType | undefined, netlist: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>"
                            ]
                        },
                        {
                            "Method": "unhighlightNet(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Cancel the highlight network",
                            "link": "pro-api.pcb_net.unhighlightnet.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "unhighlightNet(net: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "The return value of this interface is result-oriented. If the network is not originally highlighted, it will also return true"
                            ]
                        }
                    ]
                },
                "PCB_Primitive": {
                    "description": "PCB & Footprint / Primitive Class",
                    "url": "./pro-api.pcb_primitive.html",
                    "Signature": "export declare class PCB_Primitive",
                    "Remark": "Unified operation of elements",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getPrimitivesBBox(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the BBox of the primitive",
                            "link": "pro-api.pcb_primitive.getprimitivesbbox.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string | IPCB_Primitive>",
                                    "Description": "Essence ID array or element object array",
                                    "link": "pro-api.ipcb_primitive.html"
                                }
                            ],
                            "Declaration": "getPrimitivesBBox(primitiveIds: Array<string | IPCB_Primitive>): Promise<{\n        minX: number;\n        minY: number;\n        maxX: number;\n        maxY: number;\n    } | undefined>;",
                            "return": [
                                "Promise<{ minX: number; minY: number; maxX: number; maxY: number; } | undefined>",
                                "If the BBox of the element does not exist or does not have a BBox, the undefined result will be returned"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveArc": {
                    "description": "PCB & Footprint / Arc Line Primitive Class",
                    "url": "./pro-api.pcb_primitivearc.html",
                    "Signature": "export declare class PCB_PrimitiveArc implements IPCB_PrimitiveAPI",
                    "Remark": "Lines and arcs are both conductors, corresponding to the line traces and arc traces of the canvas",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(net, layer, startX, startY, endX, endY, arcAngle, lineWidth, interactiveMode, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Create an arc",
                            "link": "pro-api.pcb_primitivearc.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "startX",
                                    "Type": "number",
                                    "Description": "Start position X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "startY",
                                    "Type": "number",
                                    "Description": "Start position Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "endX",
                                    "Type": "number",
                                    "Description": "Termination position X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "endY",
                                    "Type": "number",
                                    "Description": "Termination position Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "arcAngle",
                                    "Type": "number",
                                    "Description": "Arc angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "interactiveMode",
                                    "Type": "EPCB_PrimitiveArcInteractiveMode",
                                    "Description": "(Optional) Interactive Mode",
                                    "link": "pro-api.epcb_primitivearcinteractivemode.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(net: string, layer: TPCB_LayersOfLine, startX: number, startY: number, endX: number, endY: number, arcAngle: number, lineWidth?: number, interactiveMode?: EPCB_PrimitiveArcInteractiveMode, primitiveLock?: boolean): Promise<IPCB_PrimitiveArc | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveArc | undefined>",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete arc lines",
                            "link": "pro-api.pcb_primitivearc.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveArc | Array<string> | Array<IPCB_PrimitiveArc>",
                                    "Description": "The primitive ID of an arc or an arc primitive object",
                                    "link": "pro-api.ipcb_primitivearc.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveArc | Array<string> | Array<IPCB_PrimitiveArc>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the arc line",
                            "link": "pro-api.pcb_primitivearc.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the arc can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveArc | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveArc | undefined>",
                                "Arc primitive object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the arc line",
                            "link": "pro-api.pcb_primitivearc.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the arc can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveArc>>",
                                "Arc primitive object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all arcs",
                            "link": "pro-api.pcb_primitivearc.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(net?: string, layer?: TPCB_LayersOfLine, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveArc>>",
                                "Arc primitive object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all arcs",
                            "link": "pro-api.pcb_primitivearc.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(net?: string, layer?: TPCB_LayersOfLine, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Arc primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the arc",
                            "link": "pro-api.pcb_primitivearc.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveArc",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivearc.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ net?: string; layer?: TPCB_LayersOfLine; startX?: number; startY?: number; endX?: number; endY?: number; arcAngle?: number; lineWidth?: number; interactiveMode?: EPCB_PrimitiveArcInteractiveMode; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofline.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveArc, property: {\n        net?: string;\n        layer?: TPCB_LayersOfLine;\n        startX?: number;\n        startY?: number;\n        endX?: number;\n        endY?: number;\n        arcAngle?: number;\n        lineWidth?: number;\n        interactiveMode?: EPCB_PrimitiveArcInteractiveMode;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveArc | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveArc | undefined>",
                                "Arc primitive object"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveComponent": {
                    "description": "PCB & Footprint / Component Primitive Class",
                    "url": "./pro-api.pcb_primitivecomponent.html",
                    "Signature": "export declare class PCB_PrimitiveComponent implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(component, layer, x, y, rotation, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a device",
                            "link": "pro-api.pcb_primitivecomponent.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "component",
                                    "Type": "{ libraryUuid: string; uuid: string; } | ILIB_DeviceItem",
                                    "Description": "Associated library devices",
                                    "link": "pro-api.ilib_deviceitem.html"
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfComponent",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofcomponent.html"
                                },
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(component: {\n        libraryUuid: string;\n        uuid: string;\n    } | ILIB_DeviceItem, layer: TPCB_LayersOfComponent, x: number, y: number, rotation?: number, primitiveLock?: boolean): Promise<IPCB_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveComponent | undefined>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove device",
                            "link": "pro-api.pcb_primitivecomponent.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveComponent | Array<string> | Array<IPCB_PrimitiveComponent>",
                                    "Description": "Device primitive ID or device primitive object",
                                    "link": "pro-api.ipcb_primitivecomponent.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveComponent | Array<string> | Array<IPCB_PrimitiveComponent>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtaining Devices",
                            "link": "pro-api.pcb_primitivecomponent.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the device can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveComponent | undefined>",
                                "Device element object, undefined means acquisition failure"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Obtaining Devices",
                            "link": "pro-api.pcb_primitivecomponent.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the device can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveComponent>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveComponent>>",
                                "Device element object, empty array indicates acquisition failure",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all devices",
                            "link": "pro-api.pcb_primitivecomponent.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfComponent",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofcomponent.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(layer?: TPCB_LayersOfComponent, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveComponent>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveComponent>>",
                                "Device element object array"
                            ]
                        },
                        {
                            "Method": "getAllPinsByPrimitiveId(primitiveId)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all the pads associated with the device",
                            "link": "pro-api.pcb_primitivecomponent.getallpinsbyprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string",
                                    "Description": "Device Entity ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPinsByPrimitiveId(primitiveId: string): Promise<Array<IPCB_PrimitiveComponentPad> | undefined>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveComponentPad> | undefined>",
                                "Device pad element array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive IDs of all devices",
                            "link": "pro-api.pcb_primitivecomponent.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfComponent",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofcomponent.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(layer?: TPCB_LayersOfComponent, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Device primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the device",
                            "link": "pro-api.pcb_primitivecomponent.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveComponent",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivecomponent.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ layer?: TPCB_LayersOfComponent; x?: number; y?: number; rotation?: number; primitiveLock?: boolean; addIntoBom?: boolean; designator?: string | null; name?: string | null; uniqueId?: string | null; manufacturer?: string | null; manufacturerId?: string | null; supplier?: string | null; supplierId?: string | null; otherProperty?: { [key: string]: any; }; }",
                                    "Description": "",
                                    "link": "pro-api.tpcb_layersofcomponent.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveComponent, property: {\n        layer?: TPCB_LayersOfComponent;\n        x?: number;\n        y?: number;\n        rotation?: number;\n        primitiveLock?: boolean;\n        addIntoBom?: boolean;\n        designator?: string | null;\n        name?: string | null;\n        uniqueId?: string | null;\n        manufacturer?: string | null;\n        manufacturerId?: string | null;\n        supplier?: string | null;\n        supplierId?: string | null;\n        otherProperty?: {\n            [key: string]: any;\n        };\n    }): Promise<IPCB_PrimitiveComponent | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveComponent | undefined>",
                                "Device element object"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveDimension": {
                    "description": "PCB & Footprint / Dimension Primitive Class",
                    "url": "./pro-api.pcb_primitivedimension.html",
                    "Signature": "export declare class PCB_PrimitiveDimension implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(dimensionType, coordinateSet, layer, unit, lineWidth, precision, primitiveLock)",
                            "Modifiers": "",
                            "Description": "Create dimensions",
                            "link": "pro-api.pcb_primitivedimension.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "dimensionType",
                                    "Type": "EPCB_PrimitiveDimensionType",
                                    "Description": "Dimension type",
                                    "link": "pro-api.epcb_primitivedimensiontype.html"
                                },
                                {
                                    "Parameter": "coordinateSet",
                                    "Type": "TPCB_PrimitiveDimensionCoordinateSet",
                                    "Description": "Dimensional coordinate set",
                                    "link": "pro-api.tpcb_primitivedimensioncoordinateset.html"
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfDimension",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofdimension.html"
                                },
                                {
                                    "Parameter": "unit",
                                    "Type": "ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL",
                                    "Description": "(Optional) Unit",
                                    "link": "pro-api.esys_unit.html"
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "precision",
                                    "Type": "number",
                                    "Description": "(Optional) Accuracy, value range 0-4",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(dimensionType: EPCB_PrimitiveDimensionType, coordinateSet: TPCB_PrimitiveDimensionCoordinateSet, layer?: TPCB_LayersOfDimension, unit?: ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL, lineWidth?: number, precision?: number, primitiveLock?: boolean): Promise<IPCB_PrimitiveDimension | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveDimension | undefined>",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete dimensions",
                            "link": "pro-api.pcb_primitivedimension.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveDimension | Array<string> | Array<IPCB_PrimitiveDimension>",
                                    "Description": "Dimensional primitive ID or Dimensional primitive object",
                                    "link": "pro-api.ipcb_primitivedimension.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveDimension | Array<string> | Array<IPCB_PrimitiveDimension>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get dimensions",
                            "link": "pro-api.pcb_primitivedimension.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the dimensions can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveDimension | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveDimension | undefined>",
                                "Dimension element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get dimensions",
                            "link": "pro-api.pcb_primitivedimension.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the dimensions can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveDimension>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveDimension>>",
                                "Dimension element object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all dimensions",
                            "link": "pro-api.pcb_primitivedimension.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfDimension",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofdimension.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(layer?: TPCB_LayersOfDimension, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveDimension>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveDimension>>",
                                "Dimensional element object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all dimensioned primitive IDs",
                            "link": "pro-api.pcb_primitivedimension.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfDimension",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofdimension.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(layer?: TPCB_LayersOfDimension, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Dimensional primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify dimensions",
                            "link": "pro-api.pcb_primitivedimension.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveDimension",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivedimension.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ dimensionType?: EPCB_PrimitiveDimensionType; coordinateSet?: TPCB_PrimitiveDimensionCoordinateSet; layer?: TPCB_LayersOfDimension; unit?: ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL; lineWidth?: number; precision?: number; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.epcb_primitivedimensiontype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveDimension, property: {\n        dimensionType?: EPCB_PrimitiveDimensionType;\n        coordinateSet?: TPCB_PrimitiveDimensionCoordinateSet;\n        layer?: TPCB_LayersOfDimension;\n        unit?: ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL;\n        lineWidth?: number;\n        precision?: number;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveDimension | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveDimension | undefined>",
                                "Dimensional primitive object"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveFill": {
                    "description": "PCB & Footprint / Fill Primitive Class",
                    "url": "./pro-api.pcb_primitivefill.html",
                    "Signature": "export declare class PCB_PrimitiveFill implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(layer, complexPolygon, net, fillMode, lineWidth, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Create fill",
                            "link": "pro-api.pcb_primitivefill.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfFill",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersoffill.html"
                                },
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Complex polygonal objects",
                                    "link": "pro-api.ipcb_polygon.html"
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fillMode",
                                    "Type": "EPCB_PrimitiveFillMode",
                                    "Description": "(Optional) Fill mode",
                                    "link": "pro-api.epcb_primitivefillmode.html"
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(layer: TPCB_LayersOfFill, complexPolygon: IPCB_Polygon, net?: string, fillMode?: EPCB_PrimitiveFillMode, lineWidth?: number, primitiveLock?: boolean): Promise<IPCB_PrimitiveFill | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill | undefined>",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the padding",
                            "link": "pro-api.pcb_primitivefill.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveFill | Array<string> | Array<IPCB_PrimitiveFill>",
                                    "Description": "Filled primitive ID or fill primitive object",
                                    "link": "pro-api.ipcb_primitivefill.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveFill | Array<string> | Array<IPCB_PrimitiveFill>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Fill",
                            "link": "pro-api.pcb_primitivefill.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The filled primitive ID can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveFill | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill | undefined>",
                                "Fill in the element object, undefined means the acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Fill",
                            "link": "pro-api.pcb_primitivefill.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The filled primitive ID can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveFill>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveFill>>",
                                "Fill in element object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(layer, net, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all fills",
                            "link": "pro-api.pcb_primitivefill.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfFill",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersoffill.html"
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(layer?: TPCB_LayersOfFill, net?: string, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveFill>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveFill>>",
                                "Filling an array of primitive objects"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(layer, net, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all filled primitive IDs",
                            "link": "pro-api.pcb_primitivefill.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfFill",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersoffill.html"
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(layer?: TPCB_LayersOfFill, net?: string, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Filled primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify fill",
                            "link": "pro-api.pcb_primitivefill.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveFill",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivefill.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ layer?: TPCB_LayersOfFill; complexPolygon?: IPCB_Polygon; net?: string; fillMode?: EPCB_PrimitiveFillMode; lineWidth?: number; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersoffill.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveFill, property: {\n        layer?: TPCB_LayersOfFill;\n        complexPolygon?: IPCB_Polygon;\n        net?: string;\n        fillMode?: EPCB_PrimitiveFillMode;\n        lineWidth?: number;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveFill | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill | undefined>",
                                "Fill in the element object, undefined means modification failed"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveImage": {
                    "description": "PCB & Footprint / Image Primitive Class",
                    "url": "./pro-api.pcb_primitiveimage.html",
                    "Signature": "export declare class PCB_PrimitiveImage implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(x, y, complexPolygon, layer, width, height, rotation, horizonMirror, primitiveLock)",
                            "Modifiers": "",
                            "Description": "Create an image",
                            "link": "pro-api.pcb_primitiveimage.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "BBox upper left point coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "BBox upper left point coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray> | IPCB_Polygon | IPCB_ComplexPolygon",
                                    "Description": "Image source data (complex polygon), you can use the PCB_MathPolygon.convertImageToComplexPolygon() method to convert image files into complex polygon data",
                                    "link": "pro-api.pcb_mathpolygon.convertimagetocomplexpolygon.html"
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfImage",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofimage.html"
                                },
                                {
                                    "Parameter": "width",
                                    "Type": "number",
                                    "Description": "(Optional) wide",
                                    "link": ""
                                },
                                {
                                    "Parameter": "height",
                                    "Type": "number",
                                    "Description": "(Optional) High",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "horizonMirror",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to mirror horizontally",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(x: number, y: number, complexPolygon: TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray> | IPCB_Polygon | IPCB_ComplexPolygon, layer: TPCB_LayersOfImage, width?: number, height?: number, rotation?: number, horizonMirror?: boolean, primitiveLock?: boolean): Promise<IPCB_PrimitiveImage | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveImage | undefined>",
                                "Image element object",
                                "To create a color silkscreen image, use the binary embedded object element class"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete images",
                            "link": "pro-api.pcb_primitiveimage.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveImage | Array<string> | Array<IPCB_PrimitiveImage>",
                                    "Description": "The image's primitive ID or image's primitive object",
                                    "link": "pro-api.ipcb_primitiveimage.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveImage | Array<string> | Array<IPCB_PrimitiveImage>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Images",
                            "link": "pro-api.pcb_primitiveimage.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the image can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveImage | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveImage | undefined>",
                                "Image element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Images",
                            "link": "pro-api.pcb_primitiveimage.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the image can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveImage>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveImage>>",
                                "Image element object, empty array indicates failed acquisition",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all images",
                            "link": "pro-api.pcb_primitiveimage.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfImage",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofimage.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(layer?: TPCB_LayersOfImage, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveImage>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveImage>>",
                                "Image element object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all images",
                            "link": "pro-api.pcb_primitiveimage.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfImage",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofimage.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(layer?: TPCB_LayersOfImage, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Image primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify images",
                            "link": "pro-api.pcb_primitiveimage.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveImage",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitiveimage.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ x?: number; y?: number; layer?: TPCB_LayersOfImage; width?: number; height?: number; rotation?: number; horizonMirror?: boolean; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofimage.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveImage, property: {\n        x?: number;\n        y?: number;\n        layer?: TPCB_LayersOfImage;\n        width?: number;\n        height?: number;\n        rotation?: number;\n        horizonMirror?: boolean;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveImage | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveImage | undefined>",
                                "Image element object"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveLine": {
                    "description": "PCB & Footprint / Line Primitive Class",
                    "url": "./pro-api.pcb_primitiveline.html",
                    "Signature": "export declare class PCB_PrimitiveLine implements IPCB_PrimitiveAPI",
                    "Remark": "Lines and arcs are both conductors, corresponding to the line traces and arc traces of the canvas",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(net, layer, startX, startY, endX, endY, lineWidth, primitiveLock)",
                            "Modifiers": "",
                            "Description": "Create a straight line",
                            "link": "pro-api.pcb_primitiveline.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "startX",
                                    "Type": "number",
                                    "Description": "Start position X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "startY",
                                    "Type": "number",
                                    "Description": "Start position Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "endX",
                                    "Type": "number",
                                    "Description": "Termination position X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "endY",
                                    "Type": "number",
                                    "Description": "Termination position Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(net: string, layer: TPCB_LayersOfLine, startX: number, startY: number, endX: number, endY: number, lineWidth?: number, primitiveLock?: boolean): Promise<IPCB_PrimitiveLine | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveLine | undefined>",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete a straight line",
                            "link": "pro-api.pcb_primitiveline.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveLine | Array<string> | Array<IPCB_PrimitiveLine>",
                                    "Description": "Line's primitive ID or line's primitive object",
                                    "link": "pro-api.ipcb_primitiveline.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveLine | Array<string> | Array<IPCB_PrimitiveLine>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get a straight line",
                            "link": "pro-api.pcb_primitiveline.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of a straight line can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveLine | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveLine | undefined>",
                                "Linear element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get a straight line",
                            "link": "pro-api.pcb_primitiveline.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of a straight line can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveLine>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine>>",
                                "Linear element object, empty array indicates failure to obtain",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all lines",
                            "link": "pro-api.pcb_primitiveline.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(net?: string, layer?: TPCB_LayersOfLine, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveLine>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine>>",
                                "Array of linear element objects"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all lines",
                            "link": "pro-api.pcb_primitiveline.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(net?: string, layer?: TPCB_LayersOfLine, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "The primitive ID array of polylines"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the line",
                            "link": "pro-api.pcb_primitiveline.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveLine",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitiveline.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ net?: string; layer?: TPCB_LayersOfLine; startX?: number; startY?: number; endX?: number; endY?: number; lineWidth?: number; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofline.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveLine, property: {\n        net?: string;\n        layer?: TPCB_LayersOfLine;\n        startX?: number;\n        startY?: number;\n        endX?: number;\n        endY?: number;\n        lineWidth?: number;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveLine | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveLine | undefined>",
                                "Linear element object"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveObject": {
                    "description": "PCB & Footprint / Binary Embedded Object Primitive Class",
                    "url": "./pro-api.pcb_primitiveobject.html",
                    "Signature": "export declare class PCB_PrimitiveObject implements IPCB_PrimitiveAPI",
                    "Remark": "Colored silk screen images belong to binary embedded objects and need to be created and modified using the binary embedded objects method.",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(layer, topLeftX, topLeftY, binaryData, width, height, rotation, mirror, fileName, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Create binary embedded objects",
                            "link": "pro-api.pcb_primitiveobject.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfObject",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofobject.html"
                                },
                                {
                                    "Parameter": "topLeftX",
                                    "Type": "number",
                                    "Description": "Top left point X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "topLeftY",
                                    "Type": "number",
                                    "Description": "Top left point Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "binaryData",
                                    "Type": "string",
                                    "Description": "Binary data",
                                    "link": ""
                                },
                                {
                                    "Parameter": "width",
                                    "Type": "number",
                                    "Description": "Width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "height",
                                    "Type": "number",
                                    "Description": "high",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "mirror",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to mirror horizontally",
                                    "link": ""
                                },
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "(Optional) File name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(layer: TPCB_LayersOfObject, topLeftX: number, topLeftY: number, binaryData: string, width: number, height: number, rotation?: number, mirror?: boolean, fileName?: string, primitiveLock?: boolean): Promise<IPCB_PrimitiveObject | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveObject | undefined>"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete binary embedded objects",
                            "link": "pro-api.pcb_primitiveobject.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveObject | Array<string> | Array<IPCB_PrimitiveObject>",
                                    "Description": "The primitive ID of a binary embedded object or the primitive object of a binary embedded object",
                                    "link": "pro-api.ipcb_primitiveobject.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveObject | Array<string> | Array<IPCB_PrimitiveObject>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get binary embedded objects",
                            "link": "pro-api.pcb_primitiveobject.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the binary embedded object can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveObject | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveObject | undefined>",
                                "Binary embedded object element object, undefined means acquisition failure"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get binary embedded objects",
                            "link": "pro-api.pcb_primitiveobject.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the binary embedded object can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveObject>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveObject>>",
                                "Binary embedded object element object, empty array indicates failed acquisition",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all binary embedded objects",
                            "link": "pro-api.pcb_primitiveobject.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfObject",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofobject.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(layer?: TPCB_LayersOfObject, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveObject>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveObject>>",
                                "Binary embedded object element object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all binary embedded objects",
                            "link": "pro-api.pcb_primitiveobject.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfObject",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofobject.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(layer?: TPCB_LayersOfObject, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Element ID array of binary embedded objects"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify binary embedded objects",
                            "link": "pro-api.pcb_primitiveobject.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveObject",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitiveobject.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ layer?: TPCB_LayersOfObject; topLeftX?: number; topLeftY?: number; binaryData?: string; width?: number; height?: number; rotation?: number; mirror?: boolean; fileName?: string; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofobject.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveObject, property: {\n        layer?: TPCB_LayersOfObject;\n        topLeftX?: number;\n        topLeftY?: number;\n        binaryData?: string;\n        width?: number;\n        height?: number;\n        rotation?: number;\n        mirror?: boolean;\n        fileName?: string;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveObject | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveObject | undefined>",
                                "Binary embedded object element object, undefined means modification failed"
                            ]
                        }
                    ]
                },
                "PCB_PrimitivePad": {
                    "description": "PCB & Footprint / Pad Primitive Class",
                    "url": "./pro-api.pcb_primitivepad.html",
                    "Signature": "export declare class PCB_PrimitivePad implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(layer, padNumber, x, y, rotation, pad, net, hole, holeOffsetX, holeOffsetY, holeRotation, metallization, padType, specialPad, solderMaskAndPasteMaskExpansion, heatWelding, primitiveLock)",
                            "Modifiers": "",
                            "Description": "Create a solder pad",
                            "link": "pro-api.pcb_primitivepad.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfPad",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofpad.html"
                                },
                                {
                                    "Parameter": "padNumber",
                                    "Type": "string",
                                    "Description": "Pad number",
                                    "link": ""
                                },
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Position X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Location Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "(Optional) Rotation angle",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pad",
                                    "Type": "TPCB_PrimitivePadShape",
                                    "Description": "(Optional) pad shape",
                                    "link": "pro-api.tpcb_primitivepadshape.html"
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "hole",
                                    "Type": "TPCB_PrimitivePadHole | null",
                                    "Description": "(Optional) Hole, null mark no hole",
                                    "link": "pro-api.tpcb_primitivepadhole.html"
                                },
                                {
                                    "Parameter": "holeOffsetX",
                                    "Type": "number",
                                    "Description": "(Optional) Hole Offset X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "holeOffsetY",
                                    "Type": "number",
                                    "Description": "(Optional) Hole Offset Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "holeRotation",
                                    "Type": "number",
                                    "Description": "(Optional) The rotation angle of the hole relative to the pad",
                                    "link": ""
                                },
                                {
                                    "Parameter": "metallization",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to metalize the pore walls",
                                    "link": ""
                                },
                                {
                                    "Parameter": "padType",
                                    "Type": "EPCB_PrimitivePadType",
                                    "Description": "(Optional) pad type",
                                    "link": "pro-api.epcb_primitivepadtype.html"
                                },
                                {
                                    "Parameter": "specialPad",
                                    "Type": "TPCB_PrimitiveSpecialPadShape",
                                    "Description": "(Optional) Special pad shape",
                                    "link": "pro-api.tpcb_primitivespecialpadshape.html"
                                },
                                {
                                    "Parameter": "solderMaskAndPasteMaskExpansion",
                                    "Type": "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null",
                                    "Description": "(Optional) Solder-protected/solder extension, null means following the rules",
                                    "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.html"
                                },
                                {
                                    "Parameter": "heatWelding",
                                    "Type": "IPCB_PrimitivePadHeatWelding | null",
                                    "Description": "(Optional) Thermal welding optimization parameters",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(layer: TPCB_LayersOfPad, padNumber: string, x: number, y: number, rotation?: number, pad?: TPCB_PrimitivePadShape, net?: string, hole?: TPCB_PrimitivePadHole | null, holeOffsetX?: number, holeOffsetY?: number, holeRotation?: number, metallization?: boolean, padType?: EPCB_PrimitivePadType, specialPad?: TPCB_PrimitiveSpecialPadShape, solderMaskAndPasteMaskExpansion?: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null, heatWelding?: IPCB_PrimitivePadHeatWelding | null, primitiveLock?: boolean): Promise<IPCB_PrimitivePad | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePad | undefined>",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the pad",
                            "link": "pro-api.pcb_primitivepad.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitivePad | Array<string> | Array<IPCB_PrimitivePad>",
                                    "Description": "The pad's primitive ID or pad's primitive object",
                                    "link": "pro-api.ipcb_primitivepad.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitivePad | Array<string> | Array<IPCB_PrimitivePad>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the pad",
                            "link": "pro-api.pcb_primitivepad.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the pad can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitivePad | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePad | undefined>",
                                "The pad element object, undefined means the acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the pad",
                            "link": "pro-api.pcb_primitivepad.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the pad can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitivePad>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitivePad>>",
                                "Pad element object, empty array indicates acquisition failure",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(layer, net, primitiveLock, padType)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all pads",
                            "link": "pro-api.pcb_primitivepad.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfPad",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofpad.html"
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                },
                                {
                                    "Parameter": "padType",
                                    "Type": "EPCB_PrimitivePadType",
                                    "Description": "(Optional)",
                                    "link": "pro-api.epcb_primitivepadtype.html"
                                }
                            ],
                            "Declaration": "getAll(layer?: TPCB_LayersOfPad, net?: string, primitiveLock?: boolean, padType?: EPCB_PrimitivePadType): Promise<Array<IPCB_PrimitivePad>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitivePad>>",
                                "Array of pad primitive object"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(layer, net, primitiveLock, padType)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all pads",
                            "link": "pro-api.pcb_primitivepad.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfPad",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofpad.html"
                                },
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                },
                                {
                                    "Parameter": "padType",
                                    "Type": "EPCB_PrimitivePadType",
                                    "Description": "(Optional)",
                                    "link": "pro-api.epcb_primitivepadtype.html"
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(layer?: TPCB_LayersOfPad, net?: string, primitiveLock?: boolean, padType?: EPCB_PrimitivePadType): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "The element ID array of pads"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the pad",
                            "link": "pro-api.pcb_primitivepad.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitivePad",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivepad.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ layer?: TPCB_LayersOfPad; padNumber?: string; x?: number; y?: number; rotation?: number; pad?: TPCB_PrimitivePadShape; net?: string; hole?: TPCB_PrimitivePadHole | null; holeOffsetX?: number; holeOffsetY?: number; holeRotation?: number; metallization?: boolean; specialPad?: TPCB_PrimitiveSpecialPadShape; solderMaskAndPasteMaskExpansion?: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null; heatWelding?: IPCB_PrimitivePadHeatWelding | null; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofpad.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitivePad, property: {\n        layer?: TPCB_LayersOfPad;\n        padNumber?: string;\n        x?: number;\n        y?: number;\n        rotation?: number;\n        pad?: TPCB_PrimitivePadShape;\n        net?: string;\n        hole?: TPCB_PrimitivePadHole | null;\n        holeOffsetX?: number;\n        holeOffsetY?: number;\n        holeRotation?: number;\n        metallization?: boolean;\n        specialPad?: TPCB_PrimitiveSpecialPadShape;\n        solderMaskAndPasteMaskExpansion?: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null;\n        heatWelding?: IPCB_PrimitivePadHeatWelding | null;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitivePad | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePad | undefined>",
                                "Pad element object"
                            ]
                        }
                    ]
                },
                "PCB_PrimitivePolyline": {
                    "description": "PCB & Footprint / Polyline Primitive Class",
                    "url": "./pro-api.pcb_primitivepolyline.html",
                    "Signature": "export declare class PCB_PrimitivePolyline implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(net, layer, polygon, lineWidth, primitiveLock)",
                            "Modifiers": "",
                            "Description": "Create a polyline",
                            "link": "pro-api.pcb_primitivepolyline.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "polygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Single-polygon object",
                                    "link": "pro-api.ipcb_polygon.html"
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(net: string, layer: TPCB_LayersOfLine, polygon: IPCB_Polygon, lineWidth?: number, primitiveLock?: boolean): Promise<IPCB_PrimitivePolyline | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline | undefined>",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the fold line",
                            "link": "pro-api.pcb_primitivepolyline.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitivePolyline | Array<string> | Array<IPCB_PrimitivePolyline>",
                                    "Description": "The primitive ID of a polyline or a polyline primitive object",
                                    "link": "pro-api.ipcb_primitivepolyline.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitivePolyline | Array<string> | Array<IPCB_PrimitivePolyline>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the fold line",
                            "link": "pro-api.pcb_primitivepolyline.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the polyline can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitivePolyline | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline | undefined>",
                                "Line element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the fold line",
                            "link": "pro-api.pcb_primitivepolyline.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the polyline can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitivePolyline>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitivePolyline>>",
                                "Line element object, empty array indicates failed acquisition",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all folds",
                            "link": "pro-api.pcb_primitivepolyline.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(net?: string, layer?: TPCB_LayersOfLine, primitiveLock?: boolean): Promise<Array<IPCB_PrimitivePolyline>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitivePolyline>>",
                                "Linear primitive object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive ID of all polylines",
                            "link": "pro-api.pcb_primitivepolyline.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(net?: string, layer?: TPCB_LayersOfLine, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "The primitive ID array of polylines"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the fold line",
                            "link": "pro-api.pcb_primitivepolyline.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitivePolyline",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivepolyline.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ net?: string; layer?: TPCB_LayersOfLine; polygon?: IPCB_Polygon; lineWidth?: number; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofline.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitivePolyline, property: {\n        net?: string;\n        layer?: TPCB_LayersOfLine;\n        polygon?: IPCB_Polygon;\n        lineWidth?: number;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitivePolyline | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline | undefined>",
                                "Line primitive object"
                            ]
                        }
                    ]
                },
                "PCB_PrimitivePour": {
                    "description": "PCB & Footprint / Copper Pour Border Primitive Class",
                    "url": "./pro-api.pcb_primitivepour.html",
                    "Signature": "export declare class PCB_PrimitivePour implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(net, layer, complexPolygon, pourFillMethod, preserveSilos, pourName, pourPriority, lineWidth, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a copper clad border",
                            "link": "pro-api.pcb_primitivepour.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfCopper",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofcopper.html"
                                },
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Complex polygonal objects",
                                    "link": "pro-api.ipcb_polygon.html"
                                },
                                {
                                    "Parameter": "pourFillMethod",
                                    "Type": "EPCB_PrimitivePourFillMethod",
                                    "Description": "(Optional) Copper clad filling method",
                                    "link": "pro-api.epcb_primitivepourfillmethod.html"
                                },
                                {
                                    "Parameter": "preserveSilos",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to keep an island",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pourName",
                                    "Type": "string",
                                    "Description": "(Optional) Copper clad name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pourPriority",
                                    "Type": "number",
                                    "Description": "(Optional) Copper clad priority",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(net: string, layer: TPCB_LayersOfCopper, complexPolygon: IPCB_Polygon, pourFillMethod?: EPCB_PrimitivePourFillMethod, preserveSilos?: boolean, pourName?: string, pourPriority?: number, lineWidth?: number, primitiveLock?: boolean): Promise<IPCB_PrimitivePour | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour | undefined>",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove the copper clad border",
                            "link": "pro-api.pcb_primitivepour.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitivePour | Array<string> | Array<IPCB_PrimitivePour>",
                                    "Description": "The primitive ID of the copper-clad border or the primitive object of the copper-clad border",
                                    "link": "pro-api.ipcb_primitivepour.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitivePour | Array<string> | Array<IPCB_PrimitivePour>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Copper-clad Border",
                            "link": "pro-api.pcb_primitivepour.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the copper-clad border can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitivePour | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour | undefined>",
                                "Copper-clad border element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Copper-clad Border",
                            "link": "pro-api.pcb_primitivepour.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the copper-clad border can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitivePour>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitivePour>>",
                                "Copper-clad border element object, empty array indicates acquisition failure",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all copper-clad border elements",
                            "link": "pro-api.pcb_primitivepour.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfCopper",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofcopper.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(net?: string, layer?: TPCB_LayersOfCopper, primitiveLock?: boolean): Promise<Array<IPCB_PrimitivePour>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitivePour>>",
                                "Copper border element object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(net, layer, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the primitive IDs of all copper-clad borders",
                            "link": "pro-api.pcb_primitivepour.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfCopper",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofcopper.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(net?: string, layer?: TPCB_LayersOfCopper, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Element ID array of copper-clad borders"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the copper clad border",
                            "link": "pro-api.pcb_primitivepour.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitivePour",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivepour.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ net?: string; layer?: TPCB_LayersOfCopper; complexPolygon?: IPCB_Polygon; pourFillMethod?: EPCB_PrimitivePourFillMethod; preserveSilos?: boolean; pourName?: string; pourPriority?: number; lineWidth?: number; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofcopper.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitivePour, property: {\n        net?: string;\n        layer?: TPCB_LayersOfCopper;\n        complexPolygon?: IPCB_Polygon;\n        pourFillMethod?: EPCB_PrimitivePourFillMethod;\n        preserveSilos?: boolean;\n        pourName?: string;\n        pourPriority?: number;\n        lineWidth?: number;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitivePour | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour | undefined>",
                                "Copper-clad border element object, undefined means modification failed"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveRegion": {
                    "description": "PCB & Footprint / Keepout and Constraint Region Primitive Class",
                    "url": "./pro-api.pcb_primitiveregion.html",
                    "Signature": "export declare class PCB_PrimitiveRegion implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(layer, complexPolygon, ruleType, regionName, lineWidth, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a region",
                            "link": "pro-api.pcb_primitiveregion.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfRegion",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofregion.html"
                                },
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Complex polygonal objects",
                                    "link": "pro-api.ipcb_polygon.html"
                                },
                                {
                                    "Parameter": "ruleType",
                                    "Type": "Array<EPCB_PrimitiveRegionRuleType>",
                                    "Description": "(Optional) Regional Rule Type",
                                    "link": "pro-api.epcb_primitiveregionruletype.html"
                                },
                                {
                                    "Parameter": "regionName",
                                    "Type": "string",
                                    "Description": "(Optional) Region name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "(Optional) Line width",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(layer: TPCB_LayersOfRegion, complexPolygon: IPCB_Polygon, ruleType?: Array<EPCB_PrimitiveRegionRuleType>, regionName?: string, lineWidth?: number, primitiveLock?: boolean): Promise<IPCB_PrimitiveRegion | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion | undefined>",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the area",
                            "link": "pro-api.pcb_primitiveregion.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveRegion | Array<string> | Array<IPCB_PrimitiveRegion>",
                                    "Description": "Area primitive ID or area primitive object",
                                    "link": "pro-api.ipcb_primitiveregion.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveRegion | Array<string> | Array<IPCB_PrimitiveRegion>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Area",
                            "link": "pro-api.pcb_primitiveregion.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The primitive ID of the area can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveRegion | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion | undefined>",
                                "Area element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get Area",
                            "link": "pro-api.pcb_primitiveregion.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The primitive ID of the area can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveRegion>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveRegion>>",
                                "Area element object, empty array indicates failed acquisition",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(layer, ruleType, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all regions",
                            "link": "pro-api.pcb_primitiveregion.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfRegion",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofregion.html"
                                },
                                {
                                    "Parameter": "ruleType",
                                    "Type": "Array<EPCB_PrimitiveRegionRuleType>",
                                    "Description": "(Optional) Regional rule type, which only matches primitives with consistent rule types",
                                    "link": "pro-api.epcb_primitiveregionruletype.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(layer?: TPCB_LayersOfRegion, ruleType?: Array<EPCB_PrimitiveRegionRuleType>, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveRegion>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveRegion>>",
                                "Regional element object array"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(layer, ruleType, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the element ID of all regions",
                            "link": "pro-api.pcb_primitiveregion.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfRegion",
                                    "Description": "(Optional) layer",
                                    "link": "pro-api.tpcb_layersofregion.html"
                                },
                                {
                                    "Parameter": "ruleType",
                                    "Type": "Array<EPCB_PrimitiveRegionRuleType>",
                                    "Description": "(Optional) Regional rule type, which only matches primitives with consistent rule types",
                                    "link": "pro-api.epcb_primitiveregionruletype.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(layer?: TPCB_LayersOfRegion, ruleType?: Array<EPCB_PrimitiveRegionRuleType>, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Area primitive ID array"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the area",
                            "link": "pro-api.pcb_primitiveregion.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveRegion",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitiveregion.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ layer?: TPCB_LayersOfRegion; complexPolygon?: IPCB_Polygon; ruleType?: Array<EPCB_PrimitiveRegionRuleType>; regionName?: string; lineWidth?: number; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.tpcb_layersofregion.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveRegion, property: {\n        layer?: TPCB_LayersOfRegion;\n        complexPolygon?: IPCB_Polygon;\n        ruleType?: Array<EPCB_PrimitiveRegionRuleType>;\n        regionName?: string;\n        lineWidth?: number;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveRegion | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion | undefined>",
                                "Area element object, undefined means modification failed"
                            ]
                        }
                    ]
                },
                "PCB_PrimitiveVia": {
                    "description": "PCB & Footprint / Via Primitive Class",
                    "url": "./pro-api.pcb_primitivevia.html",
                    "Signature": "export declare class PCB_PrimitiveVia implements IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "create(net, x, y, holeDiameter, diameter, viaType, designRuleBlindViaName, solderMaskExpansion, primitiveLock)",
                            "Modifiers": "",
                            "Description": "Create vias",
                            "link": "pro-api.pcb_primitivevia.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                },
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                },
                                {
                                    "Parameter": "holeDiameter",
                                    "Type": "number",
                                    "Description": "Ore diameter",
                                    "link": ""
                                },
                                {
                                    "Parameter": "diameter",
                                    "Type": "number",
                                    "Description": "Outer path",
                                    "link": ""
                                },
                                {
                                    "Parameter": "viaType",
                                    "Type": "EPCB_PrimitiveViaType",
                                    "Description": "(Optional) via type",
                                    "link": "pro-api.epcb_primitiveviatype.html"
                                },
                                {
                                    "Parameter": "designRuleBlindViaName",
                                    "Type": "string | null",
                                    "Description": "(Optional) Blind buried hole design rule item name, defining the start and end layers of the via hole, null means non-blind buried hole",
                                    "link": ""
                                },
                                {
                                    "Parameter": "solderMaskExpansion",
                                    "Type": "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null",
                                    "Description": "(Optional) Solder-protected/solder extension, null means following rules",
                                    "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.html"
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(net: string, x: number, y: number, holeDiameter: number, diameter: number, viaType?: EPCB_PrimitiveViaType, designRuleBlindViaName?: string | null, solderMaskExpansion?: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null, primitiveLock?: boolean): Promise<IPCB_PrimitiveVia | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveVia | undefined>",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "delete(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete vias",
                            "link": "pro-api.pcb_primitivevia.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | IPCB_PrimitiveVia | Array<string> | Array<IPCB_PrimitiveVia>",
                                    "Description": "The element ID of the via hole or the element object of the via hole",
                                    "link": "pro-api.ipcb_primitivevia.html"
                                }
                            ],
                            "Declaration": "delete(primitiveIds: string | IPCB_PrimitiveVia | Array<string> | Array<IPCB_PrimitiveVia>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the deletion operation successful?"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get via holes",
                            "link": "pro-api.pcb_primitivevia.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string",
                                    "Description": "The element ID of the via hole can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: string): Promise<IPCB_PrimitiveVia | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveVia | undefined>",
                                "Through hole element object, undefined means acquisition failed"
                            ]
                        },
                        {
                            "Method": "get(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Get via holes",
                            "link": "pro-api.pcb_primitivevia.get_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "Array<string>",
                                    "Description": "The element ID of the via hole can be a string or a string array. If it is an array, the returned array is also an array.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "get(primitiveIds: Array<string>): Promise<Array<IPCB_PrimitiveVia>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveVia>>",
                                "Passage element object, empty array indicates acquisition failure",
                                "If multiple element IDs are passed in, any element ID does not match and does not affect the return of other elements, it may return less than the number of element IDs passed in."
                            ]
                        },
                        {
                            "Method": "getAll(net, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all vias",
                            "link": "pro-api.pcb_primitivevia.getall.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAll(net?: string, primitiveLock?: boolean): Promise<Array<IPCB_PrimitiveVia>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveVia>>",
                                "Array of via primitive objects"
                            ]
                        },
                        {
                            "Method": "getAllPrimitiveId(net, primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Get all vias IDs",
                            "link": "pro-api.pcb_primitivevia.getallprimitiveid.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getAllPrimitiveId(net?: string, primitiveLock?: boolean): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "Element ID array of via holes"
                            ]
                        },
                        {
                            "Method": "modify(primitiveId, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify vias",
                            "link": "pro-api.pcb_primitivevia.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveId",
                                    "Type": "string | IPCB_PrimitiveVia",
                                    "Description": "Essence ID",
                                    "link": "pro-api.ipcb_primitivevia.html"
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ net?: string; x?: number; y?: number; holeDiameter?: number; diameter?: number; viaType?: EPCB_PrimitiveViaType; designRuleBlindViaName?: string | null; solderMaskExpansion?: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null; primitiveLock?: boolean; }",
                                    "Description": "Modify parameters",
                                    "link": "pro-api.epcb_primitiveviatype.html"
                                }
                            ],
                            "Declaration": "modify(primitiveId: string | IPCB_PrimitiveVia, property: {\n        net?: string;\n        x?: number;\n        y?: number;\n        holeDiameter?: number;\n        diameter?: number;\n        viaType?: EPCB_PrimitiveViaType;\n        designRuleBlindViaName?: string | null;\n        solderMaskExpansion?: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null;\n        primitiveLock?: boolean;\n    }): Promise<IPCB_PrimitiveVia | undefined>;",
                            "return": [
                                "Promise<IPCB_PrimitiveVia | undefined>",
                                "Through hole element object"
                            ]
                        }
                    ]
                },
                "PCB_SelectControl": {
                    "description": "PCB & Footprint / Selection Control Class",
                    "url": "./pro-api.pcb_selectcontrol.html",
                    "Signature": "export declare class PCB_SelectControl",
                    "Remark": "Get or manipulate selected elements",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "clearSelected()",
                            "Modifiers": "",
                            "Description": "(BETA) Clear Selected",
                            "link": "pro-api.pcb_selectcontrol.clearselected.html",
                            "Parameters": "",
                            "Declaration": "clearSelected(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "doCrossProbeSelect(components, pins, nets, highlight, select)",
                            "Modifiers": "",
                            "Description": "(BETA) Cross-select",
                            "link": "pro-api.pcb_selectcontrol.docrossprobeselect.html",
                            "Parameters": [
                                {
                                    "Parameter": "components",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Device bit number",
                                    "link": ""
                                },
                                {
                                    "Parameter": "pins",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Device bit number_pin number, format ['U1_1', 'U1_2']",
                                    "link": ""
                                },
                                {
                                    "Parameter": "nets",
                                    "Type": "Array<string>",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "highlight",
                                    "Type": "boolean",
                                    "Description": "(Optional) Is it highlighted",
                                    "link": ""
                                },
                                {
                                    "Parameter": "select",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether the operation is successful",
                                    "link": ""
                                }
                            ],
                            "Declaration": "doCrossProbeSelect(components?: Array<string>, pins?: Array<string>, nets?: Array<string>, highlight?: boolean, select?: boolean): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>"
                            ]
                        },
                        {
                            "Method": "doSelectPrimitives(primitiveIds)",
                            "Modifiers": "",
                            "Description": "(BETA) Select the primitive using the primitive ID",
                            "link": "pro-api.pcb_selectcontrol.doselectprimitives.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveIds",
                                    "Type": "string | Array<string>",
                                    "Description": "Essence ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "doSelectPrimitives(primitiveIds: string | Array<string>): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "getAllSelectedPrimitives_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "(BETA) Query all selected entries IDs",
                            "link": "pro-api.pcb_selectcontrol.getallselectedprimitives_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllSelectedPrimitives_PrimitiveId(): Promise<Array<string>>;",
                            "return": [
                                "Promise<Array<string>>",
                                "All selected primitive IDs"
                            ]
                        },
                        {
                            "Method": "getAllSelectedPrimitives()",
                            "Modifiers": "",
                            "Description": "(BETA) Query all selected primitive objects",
                            "link": "pro-api.pcb_selectcontrol.getallselectedprimitives.html",
                            "Parameters": "",
                            "Declaration": "getAllSelectedPrimitives(): Promise<Array<IPCB_Primitive>>;",
                            "return": [
                                "Promise<Array<IPCB_Primitive>>",
                                "All selected primitive objects"
                            ]
                        },
                        {
                            "Method": "getCurrentMousePosition()",
                            "Modifiers": "",
                            "Description": "(BETA) Gets the current position of the mouse on the canvas",
                            "link": "pro-api.pcb_selectcontrol.getcurrentmouseposition.html",
                            "Parameters": "",
                            "Declaration": "getCurrentMousePosition(): Promise<{\n        x: number;\n        y: number;\n    } | undefined>;",
                            "return": [
                                "Promise<{ x: number; y: number; } | undefined>",
                                "The position of the mouse on the canvas, undefined means that the current mouse is not on the canvas"
                            ]
                        },
                        {
                            "Method": "getSelectedPrimitives()",
                            "Modifiers": "",
                            "Description": "(BETA) Query all parameters of selected primitives",
                            "link": "pro-api.pcb_selectcontrol.getselectedprimitives.html",
                            "Parameters": "",
                            "Declaration": "getSelectedPrimitives(): Promise<Array<Object>>;",
                            "return": [
                                "Promise<Array<Object>>",
                                "Select all parameters of the primitive"
                            ]
                        }
                    ]
                }
            },
            "Primitives": {
                "IPCB_Polygon": {
                    "description": "Single Polygon",
                    "url": "./pro-api.ipcb_polygon.html",
                    "Signature": "export declare class IPCB_Polygon",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getSource()",
                            "Modifiers": "",
                            "Description": "Get single polygon data",
                            "link": "pro-api.ipcb_polygon.getsource.html",
                            "Parameters": "",
                            "Declaration": "getSource(): TPCB_PolygonSourceArray;",
                            "return": [
                                "TPCB_PolygonSourceArray",
                                "Single polygon data"
                            ]
                        }
                    ]
                },
                "IPCB_ComplexPolygon": {
                    "description": "Complex Polygon",
                    "url": "./pro-api.ipcb_complexpolygon.html",
                    "Signature": "export declare class IPCB_ComplexPolygon",
                    "Remark": "A complex polygon can contain multiple single polygons, which are combined by fill-rule to achieve Boolean operation of the polygon. Currently, the nonzero fill-rule is used in the EDA Professional Edition of Jialichuang.",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "addSource(complexPolygon)",
                            "Modifiers": "",
                            "Description": "Add polygon data",
                            "link": "pro-api.ipcb_complexpolygon.addsource.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray> | IPCB_Polygon | Array<IPCB_Polygon>",
                                    "Description": "Complex polygon data",
                                    "link": "pro-api.tpcb_polygonsourcearray.html"
                                }
                            ],
                            "Declaration": "addSource(complexPolygon: TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray> | IPCB_Polygon | Array<IPCB_Polygon>): IPCB_ComplexPolygon;",
                            "return": [
                                "IPCB_ComplexPolygon",
                                "Complex polygonal objects"
                            ]
                        },
                        {
                            "Method": "getSource()",
                            "Modifiers": "",
                            "Description": "Get polygon data",
                            "link": "pro-api.ipcb_complexpolygon.getsource.html",
                            "Parameters": "",
                            "Declaration": "getSource(): TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>;",
                            "return": [
                                "TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>",
                                "Single-poly or complex polygon data",
                                "If only a single polygon contains, the outermost array will be simplified"
                            ]
                        },
                        {
                            "Method": "getSourceStrictComplex()",
                            "Modifiers": "",
                            "Description": "Get complex polygon data",
                            "link": "pro-api.ipcb_complexpolygon.getsourcestrictcomplex.html",
                            "Parameters": "",
                            "Declaration": "getSourceStrictComplex(): Array<TPCB_PolygonSourceArray>;",
                            "return": [
                                "Array<TPCB_PolygonSourceArray>",
                                "Complex polygon data",
                                "Force return complex polygon format data, even if it contains only a single single polygon"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveArc": {
                    "description": "Arc Line Primitive",
                    "url": "./pro-api.ipcb_primitivearc.html",
                    "Signature": "export declare class IPCB_PrimitiveArc implements IPCB_Primitive",
                    "Remark": "Lines and arcs are both conductors, corresponding to the line traces and arc traces of the canvas",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivearc.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveArc>;",
                            "return": [
                                "Promise<IPCB_PrimitiveArc>",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "getAdjacentPrimitives()",
                            "Modifiers": "",
                            "Description": "(BETA) Get adjacent primitive objects",
                            "link": "pro-api.ipcb_primitivearc.getadjacentprimitives.html",
                            "Parameters": "",
                            "Declaration": "getAdjacentPrimitives(): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveVia | IPCB_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveVia | IPCB_PrimitiveArc>>",
                                "Adjacent straight lines, vias, and arc elements objects",
                                "Will obtain straight lines, vias, and arc elements objects directly connected to the arc"
                            ]
                        },
                        {
                            "Method": "getEntireTrack(includeVias)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the entire wire",
                            "link": "pro-api.ipcb_primitivearc.getentiretrack.html",
                            "Parameters": [
                                {
                                    "Parameter": "includeVias",
                                    "Type": "false",
                                    "Description": "Does it contain vias at both ends of the wire",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getEntireTrack(includeVias: false): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc>>",
                                "All straight and arc lines within the entire line"
                            ]
                        },
                        {
                            "Method": "getEntireTrack(includeVias)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the entire wire",
                            "link": "pro-api.ipcb_primitivearc.getentiretrack_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "includeVias",
                                    "Type": "true",
                                    "Description": "Does it contain vias at both ends of the wire",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getEntireTrack(includeVias: true): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc | IPCB_PrimitiveVia>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc | IPCB_PrimitiveVia>>",
                                "All straight lines, arcs, and through holes connected at both ends (if any)"
                            ]
                        },
                        {
                            "Method": "getState_ArcAngle()",
                            "Modifiers": "",
                            "Description": "Get attribute status: arc angle",
                            "link": "pro-api.ipcb_primitivearc.getstate_arcangle.html",
                            "Parameters": "",
                            "Declaration": "getState_ArcAngle(): number;",
                            "return": [
                                "number",
                                "Arc angle"
                            ]
                        },
                        {
                            "Method": "getState_EndX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Termination position X",
                            "link": "pro-api.ipcb_primitivearc.getstate_endx.html",
                            "Parameters": "",
                            "Declaration": "getState_EndX(): number;",
                            "return": [
                                "number",
                                "Termination position X"
                            ]
                        },
                        {
                            "Method": "getState_EndY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Termination position Y",
                            "link": "pro-api.ipcb_primitivearc.getstate_endy.html",
                            "Parameters": "",
                            "Declaration": "getState_EndY(): number;",
                            "return": [
                                "number",
                                "Termination position Y"
                            ]
                        },
                        {
                            "Method": "getState_InteractiveMode()",
                            "Modifiers": "",
                            "Description": "Get attribute status: interactive mode",
                            "link": "pro-api.ipcb_primitivearc.getstate_interactivemode.html",
                            "Parameters": "",
                            "Declaration": "getState_InteractiveMode(): EPCB_PrimitiveArcInteractiveMode;",
                            "return": [
                                "EPCB_PrimitiveArcInteractiveMode",
                                "Interactive mode"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitivearc.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfLine;",
                            "return": [
                                "TPCB_LayersOfLine",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.ipcb_primitivearc.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number;",
                            "return": [
                                "number",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.ipcb_primitivearc.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string;",
                            "return": [
                                "string",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivearc.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivearc.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivearc.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_StartX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Start position X",
                            "link": "pro-api.ipcb_primitivearc.getstate_startx.html",
                            "Parameters": "",
                            "Declaration": "getState_StartX(): number;",
                            "return": [
                                "number",
                                "Start position X"
                            ]
                        },
                        {
                            "Method": "getState_StartY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Start position Y",
                            "link": "pro-api.ipcb_primitivearc.getstate_starty.html",
                            "Parameters": "",
                            "Declaration": "getState_StartY(): number;",
                            "return": [
                                "number",
                                "Start position Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivearc.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivearc.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveArc>;",
                            "return": [
                                "Promise<IPCB_PrimitiveArc>",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_ArcAngle(arcAngle)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: arc angle",
                            "link": "pro-api.ipcb_primitivearc.setstate_arcangle.html",
                            "Parameters": [
                                {
                                    "Parameter": "arcAngle",
                                    "Type": "number",
                                    "Description": "Arc angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_ArcAngle(arcAngle: number): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_EndX(endX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Termination position X",
                            "link": "pro-api.ipcb_primitivearc.setstate_endx.html",
                            "Parameters": [
                                {
                                    "Parameter": "endX",
                                    "Type": "number",
                                    "Description": "Termination position X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_EndX(endX: number): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_EndY(endY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Termination position Y",
                            "link": "pro-api.ipcb_primitivearc.setstate_endy.html",
                            "Parameters": [
                                {
                                    "Parameter": "endY",
                                    "Type": "number",
                                    "Description": "Termination position Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_EndY(endY: number): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_InteractiveMode(interactiveMode)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: interactive mode",
                            "link": "pro-api.ipcb_primitivearc.setstate_interactivemode.html",
                            "Parameters": [
                                {
                                    "Parameter": "interactiveMode",
                                    "Type": "EPCB_PrimitiveArcInteractiveMode",
                                    "Description": "Interactive mode",
                                    "link": "pro-api.epcb_primitivearcinteractivemode.html"
                                }
                            ],
                            "Declaration": "setState_InteractiveMode(interactiveMode: EPCB_PrimitiveArcInteractiveMode): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitivearc.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfLine): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.ipcb_primitivearc.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.ipcb_primitivearc.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivearc.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_StartX(startX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Start position X",
                            "link": "pro-api.ipcb_primitivearc.setstate_startx.html",
                            "Parameters": [
                                {
                                    "Parameter": "startX",
                                    "Type": "number",
                                    "Description": "Start position X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_StartX(startX: number): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "setState_StartY(startY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Start position Y",
                            "link": "pro-api.ipcb_primitivearc.setstate_starty.html",
                            "Parameters": [
                                {
                                    "Parameter": "startY",
                                    "Type": "number",
                                    "Description": "Start position Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_StartY(startY: number): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivearc.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivearc.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveArc;",
                            "return": [
                                "IPCB_PrimitiveArc",
                                "Arc primitive object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveComponent": {
                    "description": "Component Primitive",
                    "url": "./pro-api.ipcb_primitivecomponent.html",
                    "Signature": "export declare class IPCB_PrimitiveComponent implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivecomponent.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveComponent>;",
                            "return": [
                                "Promise<IPCB_PrimitiveComponent>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "getAllPins()",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all the pads associated with the device",
                            "link": "pro-api.ipcb_primitivecomponent.getallpins.html",
                            "Parameters": "",
                            "Declaration": "getAllPins(): Promise<Array<IPCB_PrimitiveComponentPad>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveComponentPad>>",
                                "Device pad element array"
                            ]
                        },
                        {
                            "Method": "getState_AddIntoBom()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether to join BOM",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_addintobom.html",
                            "Parameters": "",
                            "Declaration": "getState_AddIntoBom(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to join BOM"
                            ]
                        },
                        {
                            "Method": "getState_Component()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Associate library device",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_component.html",
                            "Parameters": "",
                            "Declaration": "getState_Component(): {\n        libraryUuid: string;\n        uuid: string;\n    };",
                            "return": [
                                "{ libraryUuid: string; uuid: string; }",
                                "Associated library devices"
                            ]
                        },
                        {
                            "Method": "getState_Designator()",
                            "Modifiers": "",
                            "Description": "Get attribute status: bit number",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_designator.html",
                            "Parameters": "",
                            "Declaration": "getState_Designator(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Position number"
                            ]
                        },
                        {
                            "Method": "getState_Footprint()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Associate library encapsulation",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_footprint.html",
                            "Parameters": "",
                            "Declaration": "getState_Footprint(): {\n        libraryUuid: string;\n        uuid: string;\n    } | undefined;",
                            "return": [
                                "{ libraryUuid: string; uuid: string; } | undefined",
                                "Associated library encapsulation"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfComponent;",
                            "return": [
                                "TPCB_LayersOfComponent",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_Manufacturer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Manufacturer",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_manufacturer.html",
                            "Parameters": "",
                            "Declaration": "getState_Manufacturer(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Manufacturer"
                            ]
                        },
                        {
                            "Method": "getState_ManufacturerId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Manufacturer number",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_manufacturerid.html",
                            "Parameters": "",
                            "Declaration": "getState_ManufacturerId(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Manufacturer number"
                            ]
                        },
                        {
                            "Method": "getState_Model3D()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Associate library 3D model",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_model3d.html",
                            "Parameters": "",
                            "Declaration": "getState_Model3D(): {\n        libraryUuid: string;\n        uuid: string;\n    } | undefined;",
                            "return": [
                                "{ libraryUuid: string; uuid: string; } | undefined",
                                "Association library 3D model"
                            ]
                        },
                        {
                            "Method": "getState_Name()",
                            "Modifiers": "",
                            "Description": "Get attribute status: name",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_name.html",
                            "Parameters": "",
                            "Declaration": "getState_Name(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "name"
                            ]
                        },
                        {
                            "Method": "getState_OtherProperty()",
                            "Modifiers": "",
                            "Description": "Get attribute status: other parameters",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_otherproperty.html",
                            "Parameters": "",
                            "Declaration": "getState_OtherProperty(): {\n        [key: string]: string | number | boolean;\n    } | undefined;",
                            "return": [
                                "{ [key: string]: string | number | boolean; } | undefined",
                                "Other parameters"
                            ]
                        },
                        {
                            "Method": "getState_Pads()",
                            "Modifiers": "",
                            "Description": "Get attribute status: solder pad",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_pads.html",
                            "Parameters": "",
                            "Declaration": "getState_Pads(): Array<{\n        primitiveId: string;\n        net: string;\n        padNumber: string;\n    }> | undefined;",
                            "return": [
                                "Array<{ primitiveId: string; net: string; padNumber: string; }> | undefined",
                                "Solder pad"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_Supplier()",
                            "Modifiers": "",
                            "Description": "Get attribute status: vendor",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_supplier.html",
                            "Parameters": "",
                            "Declaration": "getState_Supplier(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "supplier"
                            ]
                        },
                        {
                            "Method": "getState_SupplierId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: vendor number",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_supplierid.html",
                            "Parameters": "",
                            "Declaration": "getState_SupplierId(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Supplier number"
                            ]
                        },
                        {
                            "Method": "getState_UniqueId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: unique ID",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_uniqueid.html",
                            "Parameters": "",
                            "Declaration": "getState_UniqueId(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Unique ID"
                            ]
                        },
                        {
                            "Method": "getState_X()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate X",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_x.html",
                            "Parameters": "",
                            "Declaration": "getState_X(): number;",
                            "return": [
                                "number",
                                "Coordinate X"
                            ]
                        },
                        {
                            "Method": "getState_Y()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate Y",
                            "link": "pro-api.ipcb_primitivecomponent.getstate_y.html",
                            "Parameters": "",
                            "Declaration": "getState_Y(): number;",
                            "return": [
                                "number",
                                "Coordinate Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivecomponent.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivecomponent.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveComponent>;",
                            "return": [
                                "Promise<IPCB_PrimitiveComponent>",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_AddIntoBom(addIntoBom)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to join BOM",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_addintobom.html",
                            "Parameters": [
                                {
                                    "Parameter": "addIntoBom",
                                    "Type": "boolean",
                                    "Description": "Whether to join BOM",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_AddIntoBom(addIntoBom: boolean): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Designator(designator)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: bit number",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_designator.html",
                            "Parameters": [
                                {
                                    "Parameter": "designator",
                                    "Type": "string | undefined",
                                    "Description": "Position number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Designator(designator: string | undefined): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfComponent",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofcomponent.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfComponent): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Manufacturer(manufacturer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Manufacturer",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_manufacturer.html",
                            "Parameters": [
                                {
                                    "Parameter": "manufacturer",
                                    "Type": "string | undefined",
                                    "Description": "Manufacturer",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Manufacturer(manufacturer: string | undefined): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_ManufacturerId(manufacturerId)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Manufacturer number",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_manufacturerid.html",
                            "Parameters": [
                                {
                                    "Parameter": "manufacturerId",
                                    "Type": "string | undefined",
                                    "Description": "Manufacturer number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_ManufacturerId(manufacturerId: string | undefined): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Name(name)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: name",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_name.html",
                            "Parameters": [
                                {
                                    "Parameter": "name",
                                    "Type": "string | undefined",
                                    "Description": "name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Name(name: string | undefined): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_OtherProperty(otherProperty)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: other parameters",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_otherproperty.html",
                            "Parameters": [
                                {
                                    "Parameter": "otherProperty",
                                    "Type": "{ [key: string]: string | number | boolean; }",
                                    "Description": "Other parameters",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_OtherProperty(otherProperty: {\n        [key: string]: string | number | boolean;\n    }): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Supplier(supplier)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: vendor",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_supplier.html",
                            "Parameters": [
                                {
                                    "Parameter": "supplier",
                                    "Type": "string | undefined",
                                    "Description": "supplier",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Supplier(supplier: string | undefined): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_SupplierId(supplierId)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: vendor number",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_supplierid.html",
                            "Parameters": [
                                {
                                    "Parameter": "supplierId",
                                    "Type": "string | undefined",
                                    "Description": "Supplier number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_SupplierId(supplierId: string | undefined): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_UniqueId(uniqueId)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Unique ID",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_uniqueid.html",
                            "Parameters": [
                                {
                                    "Parameter": "uniqueId",
                                    "Type": "string | undefined",
                                    "Description": "Unique ID",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_UniqueId(uniqueId: string | undefined): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_X(x)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Coordinate X",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_x.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_X(x: number): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "setState_Y(y)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: coordinate Y",
                            "link": "pro-api.ipcb_primitivecomponent.setstate_y.html",
                            "Parameters": [
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Y(y: number): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivecomponent.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivecomponent.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveComponent;",
                            "return": [
                                "IPCB_PrimitiveComponent",
                                "Device element object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveDimension": {
                    "description": "Dimension Primitive",
                    "url": "./pro-api.ipcb_primitivedimension.html",
                    "Signature": "export declare class IPCB_PrimitiveDimension implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivedimension.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveDimension>;",
                            "return": [
                                "Promise<IPCB_PrimitiveDimension>",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "getState_CoordinateSet()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate set",
                            "link": "pro-api.ipcb_primitivedimension.getstate_coordinateset.html",
                            "Parameters": "",
                            "Declaration": "getState_CoordinateSet(): TPCB_PrimitiveDimensionCoordinateSet;",
                            "return": [
                                "TPCB_PrimitiveDimensionCoordinateSet",
                                "Coordinate set"
                            ]
                        },
                        {
                            "Method": "getState_DimensionType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: dimension type",
                            "link": "pro-api.ipcb_primitivedimension.getstate_dimensiontype.html",
                            "Parameters": "",
                            "Declaration": "getState_DimensionType(): EPCB_PrimitiveDimensionType;",
                            "return": [
                                "EPCB_PrimitiveDimensionType",
                                "Dimension type"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitivedimension.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfDimension;",
                            "return": [
                                "TPCB_LayersOfDimension",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.ipcb_primitivedimension.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number;",
                            "return": [
                                "number",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_Precision()",
                            "Modifiers": "",
                            "Description": "Get attribute status: precision",
                            "link": "pro-api.ipcb_primitivedimension.getstate_precision.html",
                            "Parameters": "",
                            "Declaration": "getState_Precision(): number;",
                            "return": [
                                "number",
                                "Accuracy"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivedimension.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivedimension.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivedimension.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_TextFollow()",
                            "Modifiers": "",
                            "Description": "Get attribute status: text follow",
                            "link": "pro-api.ipcb_primitivedimension.getstate_textfollow.html",
                            "Parameters": "",
                            "Declaration": "getState_TextFollow(): 0 | 1;",
                            "return": [
                                "0 | 1",
                                "Follow the text"
                            ]
                        },
                        {
                            "Method": "getState_Unit()",
                            "Modifiers": "",
                            "Description": "Get attribute status: unit",
                            "link": "pro-api.ipcb_primitivedimension.getstate_unit.html",
                            "Parameters": "",
                            "Declaration": "getState_Unit(): ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL;",
                            "return": [
                                "ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL",
                                "unit"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivedimension.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivedimension.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveDimension>;",
                            "return": [
                                "Promise<IPCB_PrimitiveDimension>",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "setState_CoordinateSet(coordinateSet)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: coordinate set",
                            "link": "pro-api.ipcb_primitivedimension.setstate_coordinateset.html",
                            "Parameters": [
                                {
                                    "Parameter": "coordinateSet",
                                    "Type": "TPCB_PrimitiveDimensionCoordinateSet",
                                    "Description": "Coordinate set",
                                    "link": "pro-api.tpcb_primitivedimensioncoordinateset.html"
                                }
                            ],
                            "Declaration": "setState_CoordinateSet(coordinateSet: TPCB_PrimitiveDimensionCoordinateSet): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "setState_DimensionType(dimensionType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Dimension type",
                            "link": "pro-api.ipcb_primitivedimension.setstate_dimensiontype.html",
                            "Parameters": [
                                {
                                    "Parameter": "dimensionType",
                                    "Type": "EPCB_PrimitiveDimensionType",
                                    "Description": "Dimension type",
                                    "link": "pro-api.epcb_primitivedimensiontype.html"
                                }
                            ],
                            "Declaration": "setState_DimensionType(dimensionType: EPCB_PrimitiveDimensionType): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitivedimension.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfDimension",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofdimension.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfDimension): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.ipcb_primitivedimension.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Precision(precision)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Accuracy",
                            "link": "pro-api.ipcb_primitivedimension.setstate_precision.html",
                            "Parameters": [
                                {
                                    "Parameter": "precision",
                                    "Type": "number",
                                    "Description": "Accuracy",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Precision(precision: number): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivedimension.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Unit(unit)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Unit",
                            "link": "pro-api.ipcb_primitivedimension.setstate_unit.html",
                            "Parameters": [
                                {
                                    "Parameter": "unit",
                                    "Type": "ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL",
                                    "Description": "unit",
                                    "link": "pro-api.esys_unit.html"
                                }
                            ],
                            "Declaration": "setState_Unit(unit: ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.INCH | ESYS_Unit.MIL): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivedimension.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivedimension.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveDimension;",
                            "return": [
                                "IPCB_PrimitiveDimension",
                                "Dimensional primitive object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveFill": {
                    "description": "Fill Primitive",
                    "url": "./pro-api.ipcb_primitivefill.html",
                    "Signature": "export declare class IPCB_PrimitiveFill implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "convertToPolyline()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Line Elements",
                            "link": "pro-api.ipcb_primitivefill.converttopolyline.html",
                            "Parameters": "",
                            "Declaration": "convertToPolyline(): Promise<IPCB_PrimitivePolyline>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline>",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "convertToPour()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Copper-clad border element",
                            "link": "pro-api.ipcb_primitivefill.converttopour.html",
                            "Parameters": "",
                            "Declaration": "convertToPour(): Promise<IPCB_PrimitivePour>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour>",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "convertToRegion()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Area Elements (default is a prohibited area)",
                            "link": "pro-api.ipcb_primitivefill.converttoregion.html",
                            "Parameters": "",
                            "Declaration": "convertToRegion(): Promise<IPCB_PrimitiveRegion>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion>",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivefill.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveFill>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill>",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "getState_ComplexPolygon()",
                            "Modifiers": "",
                            "Description": "Get attribute state: complex polygons",
                            "link": "pro-api.ipcb_primitivefill.getstate_complexpolygon.html",
                            "Parameters": "",
                            "Declaration": "getState_ComplexPolygon(): IPCB_Polygon;",
                            "return": [
                                "IPCB_Polygon",
                                "Complex polygons"
                            ]
                        },
                        {
                            "Method": "getState_FillMode()",
                            "Modifiers": "",
                            "Description": "Get attribute status: fill mode",
                            "link": "pro-api.ipcb_primitivefill.getstate_fillmode.html",
                            "Parameters": "",
                            "Declaration": "getState_FillMode(): EPCB_PrimitiveFillMode | undefined;",
                            "return": [
                                "EPCB_PrimitiveFillMode | undefined",
                                "Fill mode"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitivefill.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfFill;",
                            "return": [
                                "TPCB_LayersOfFill",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.ipcb_primitivefill.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number;",
                            "return": [
                                "number",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.ipcb_primitivefill.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivefill.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivefill.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivefill.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivefill.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivefill.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveFill>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill>",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "setState_ComplexPolygon(complexPolygon)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: complex polygons",
                            "link": "pro-api.ipcb_primitivefill.setstate_complexpolygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Complex polygons",
                                    "link": "pro-api.ipcb_polygon.html"
                                }
                            ],
                            "Declaration": "setState_ComplexPolygon(complexPolygon: IPCB_Polygon): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "setState_FillMode(fillMode)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Fill mode",
                            "link": "pro-api.ipcb_primitivefill.setstate_fillmode.html",
                            "Parameters": [
                                {
                                    "Parameter": "fillMode",
                                    "Type": "EPCB_PrimitiveFillMode",
                                    "Description": "Fill mode",
                                    "link": "pro-api.epcb_primitivefillmode.html"
                                }
                            ],
                            "Declaration": "setState_FillMode(fillMode: EPCB_PrimitiveFillMode): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitivefill.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfFill",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersoffill.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfFill): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.ipcb_primitivefill.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.ipcb_primitivefill.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivefill.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivefill.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivefill.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveFill;",
                            "return": [
                                "IPCB_PrimitiveFill",
                                "Fill in element objects"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveImage": {
                    "description": "Image Primitive",
                    "url": "./pro-api.ipcb_primitiveimage.html",
                    "Signature": "export declare class IPCB_PrimitiveImage implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitiveimage.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveImage>;",
                            "return": [
                                "Promise<IPCB_PrimitiveImage>",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "getState_ComplexPolygon()",
                            "Modifiers": "",
                            "Description": "Get attribute status: image source data (complex polygons)",
                            "link": "pro-api.ipcb_primitiveimage.getstate_complexpolygon.html",
                            "Parameters": "",
                            "Declaration": "getState_ComplexPolygon(): TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>;",
                            "return": [
                                "TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>",
                                "Image source data (complex polygons)"
                            ]
                        },
                        {
                            "Method": "getState_Height()",
                            "Modifiers": "",
                            "Description": "Get attribute status: high",
                            "link": "pro-api.ipcb_primitiveimage.getstate_height.html",
                            "Parameters": "",
                            "Declaration": "getState_Height(): number;",
                            "return": [
                                "number",
                                "high"
                            ]
                        },
                        {
                            "Method": "getState_HorizonMirror()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether horizontal mirroring is",
                            "link": "pro-api.ipcb_primitiveimage.getstate_horizonmirror.html",
                            "Parameters": "",
                            "Declaration": "getState_HorizonMirror(): boolean;",
                            "return": [
                                "boolean",
                                "Is it horizontally mirrored"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitiveimage.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfImage;",
                            "return": [
                                "TPCB_LayersOfImage",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitiveimage.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitiveimage.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitiveimage.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitiveimage.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_Width()",
                            "Modifiers": "",
                            "Description": "Get attribute status: wide",
                            "link": "pro-api.ipcb_primitiveimage.getstate_width.html",
                            "Parameters": "",
                            "Declaration": "getState_Width(): number;",
                            "return": [
                                "number",
                                "Width"
                            ]
                        },
                        {
                            "Method": "getState_X()",
                            "Modifiers": "",
                            "Description": "Get attribute status: BBox upper left point coordinate X",
                            "link": "pro-api.ipcb_primitiveimage.getstate_x.html",
                            "Parameters": "",
                            "Declaration": "getState_X(): number;",
                            "return": [
                                "number",
                                "BBox upper left point coordinate X"
                            ]
                        },
                        {
                            "Method": "getState_Y()",
                            "Modifiers": "",
                            "Description": "Get attribute status: BBox upper left point coordinate Y",
                            "link": "pro-api.ipcb_primitiveimage.getstate_y.html",
                            "Parameters": "",
                            "Declaration": "getState_Y(): number;",
                            "return": [
                                "number",
                                "BBox upper left point coordinate Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitiveimage.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitiveimage.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveImage>;",
                            "return": [
                                "Promise<IPCB_PrimitiveImage>",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_Height(height)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: high",
                            "link": "pro-api.ipcb_primitiveimage.setstate_height.html",
                            "Parameters": [
                                {
                                    "Parameter": "height",
                                    "Type": "number",
                                    "Description": "high",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Height(height: number): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_HorizonMirror(horizonMirror)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Whether to mirror horizontally",
                            "link": "pro-api.ipcb_primitiveimage.setstate_horizonmirror.html",
                            "Parameters": [
                                {
                                    "Parameter": "horizonMirror",
                                    "Type": "boolean",
                                    "Description": "Is it horizontally mirrored",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_HorizonMirror(horizonMirror: boolean): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitiveimage.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfImage",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofimage.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfImage): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitiveimage.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitiveimage.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_Width(width)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Width",
                            "link": "pro-api.ipcb_primitiveimage.setstate_width.html",
                            "Parameters": [
                                {
                                    "Parameter": "width",
                                    "Type": "number",
                                    "Description": "Width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Width(width: number): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_X(x)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: BBox upper left point coordinate X",
                            "link": "pro-api.ipcb_primitiveimage.setstate_x.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "BBox upper left point coordinate X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_X(x: number): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "setState_Y(y)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: BBox upper left point coordinate Y",
                            "link": "pro-api.ipcb_primitiveimage.setstate_y.html",
                            "Parameters": [
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "BBox upper left point coordinate Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Y(y: number): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitiveimage.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitiveimage.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveImage;",
                            "return": [
                                "IPCB_PrimitiveImage",
                                "Image element object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveLine": {
                    "description": "Line Primitive",
                    "url": "./pro-api.ipcb_primitiveline.html",
                    "Signature": "export declare class IPCB_PrimitiveLine implements IPCB_Primitive",
                    "Remark": "Lines and arcs are both conductors, corresponding to the line traces and arc traces of the canvas",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitiveline.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveLine>;",
                            "return": [
                                "Promise<IPCB_PrimitiveLine>",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "getAdjacentPrimitives()",
                            "Modifiers": "",
                            "Description": "(BETA) Get adjacent primitive objects",
                            "link": "pro-api.ipcb_primitiveline.getadjacentprimitives.html",
                            "Parameters": "",
                            "Declaration": "getAdjacentPrimitives(): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveVia | IPCB_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveVia | IPCB_PrimitiveArc>>",
                                "Adjacent straight lines, vias, and arc elements objects",
                                "Will obtain straight lines, vias, and arc elements objects directly connected to both ends of straight lines"
                            ]
                        },
                        {
                            "Method": "getEntireTrack(includeVias)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the entire wire",
                            "link": "pro-api.ipcb_primitiveline.getentiretrack.html",
                            "Parameters": [
                                {
                                    "Parameter": "includeVias",
                                    "Type": "false",
                                    "Description": "Does it contain vias at both ends of the wire",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getEntireTrack(includeVias: false): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc>>",
                                "All straight and arc lines within the entire line"
                            ]
                        },
                        {
                            "Method": "getEntireTrack(includeVias)",
                            "Modifiers": "",
                            "Description": "(BETA) Get the entire wire",
                            "link": "pro-api.ipcb_primitiveline.getentiretrack_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "includeVias",
                                    "Type": "true",
                                    "Description": "Does it contain vias at both ends of the wire",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getEntireTrack(includeVias: true): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc | IPCB_PrimitiveVia>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc | IPCB_PrimitiveVia>>",
                                "All straight lines, arcs, and through holes connected at both ends (if any)"
                            ]
                        },
                        {
                            "Method": "getState_EndX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Termination position X",
                            "link": "pro-api.ipcb_primitiveline.getstate_endx.html",
                            "Parameters": "",
                            "Declaration": "getState_EndX(): number;",
                            "return": [
                                "number",
                                "Termination position X"
                            ]
                        },
                        {
                            "Method": "getState_EndY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Termination position Y",
                            "link": "pro-api.ipcb_primitiveline.getstate_endy.html",
                            "Parameters": "",
                            "Declaration": "getState_EndY(): number;",
                            "return": [
                                "number",
                                "Termination position Y"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitiveline.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfLine;",
                            "return": [
                                "TPCB_LayersOfLine",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.ipcb_primitiveline.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number;",
                            "return": [
                                "number",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.ipcb_primitiveline.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string;",
                            "return": [
                                "string",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitiveline.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitiveline.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitiveline.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_StartX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Start position X",
                            "link": "pro-api.ipcb_primitiveline.getstate_startx.html",
                            "Parameters": "",
                            "Declaration": "getState_StartX(): number;",
                            "return": [
                                "number",
                                "Start position X"
                            ]
                        },
                        {
                            "Method": "getState_StartY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Start position Y",
                            "link": "pro-api.ipcb_primitiveline.getstate_starty.html",
                            "Parameters": "",
                            "Declaration": "getState_StartY(): number;",
                            "return": [
                                "number",
                                "Start position Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitiveline.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitiveline.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveLine>;",
                            "return": [
                                "Promise<IPCB_PrimitiveLine>",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_EndX(endX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Termination position X",
                            "link": "pro-api.ipcb_primitiveline.setstate_endx.html",
                            "Parameters": [
                                {
                                    "Parameter": "endX",
                                    "Type": "number",
                                    "Description": "Termination position X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_EndX(endX: number): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_EndY(endY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Termination position Y",
                            "link": "pro-api.ipcb_primitiveline.setstate_endy.html",
                            "Parameters": [
                                {
                                    "Parameter": "endY",
                                    "Type": "number",
                                    "Description": "Termination position Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_EndY(endY: number): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitiveline.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfLine): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.ipcb_primitiveline.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.ipcb_primitiveline.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitiveline.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_StartX(startX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Start position X",
                            "link": "pro-api.ipcb_primitiveline.setstate_startx.html",
                            "Parameters": [
                                {
                                    "Parameter": "startX",
                                    "Type": "number",
                                    "Description": "Start position X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_StartX(startX: number): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "setState_StartY(startY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Start position Y",
                            "link": "pro-api.ipcb_primitiveline.setstate_starty.html",
                            "Parameters": [
                                {
                                    "Parameter": "startY",
                                    "Type": "number",
                                    "Description": "Start position Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_StartY(startY: number): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitiveline.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitiveline.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveLine;",
                            "return": [
                                "IPCB_PrimitiveLine",
                                "Linear element object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveObject": {
                    "description": "Binary Embedded Object Primitive",
                    "url": "./pro-api.ipcb_primitiveobject.html",
                    "Signature": "export declare class IPCB_PrimitiveObject implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitiveobject.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveObject>;",
                            "return": [
                                "Promise<IPCB_PrimitiveObject>",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "getState_BinaryData()",
                            "Modifiers": "",
                            "Description": "Get attribute status: binary data",
                            "link": "pro-api.ipcb_primitiveobject.getstate_binarydata.html",
                            "Parameters": "",
                            "Declaration": "getState_BinaryData(): string;",
                            "return": [
                                "string",
                                "Binary data"
                            ]
                        },
                        {
                            "Method": "getState_FileName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: file name",
                            "link": "pro-api.ipcb_primitiveobject.getstate_filename.html",
                            "Parameters": "",
                            "Declaration": "getState_FileName(): string;",
                            "return": [
                                "string",
                                "file name"
                            ]
                        },
                        {
                            "Method": "getState_Height()",
                            "Modifiers": "",
                            "Description": "Get attribute status: high",
                            "link": "pro-api.ipcb_primitiveobject.getstate_height.html",
                            "Parameters": "",
                            "Declaration": "getState_Height(): number;",
                            "return": [
                                "number",
                                "high"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitiveobject.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfObject | undefined;",
                            "return": [
                                "TPCB_LayersOfObject | undefined",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_Mirror()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether horizontal mirroring is",
                            "link": "pro-api.ipcb_primitiveobject.getstate_mirror.html",
                            "Parameters": "",
                            "Declaration": "getState_Mirror(): boolean;",
                            "return": [
                                "boolean",
                                "Is it horizontally mirrored"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitiveobject.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitiveobject.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitiveobject.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitiveobject.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_TopLeftX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: upper left point X",
                            "link": "pro-api.ipcb_primitiveobject.getstate_topleftx.html",
                            "Parameters": "",
                            "Declaration": "getState_TopLeftX(): number | undefined;",
                            "return": [
                                "number | undefined",
                                "Top left point X"
                            ]
                        },
                        {
                            "Method": "getState_TopLeftY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: upper left point Y",
                            "link": "pro-api.ipcb_primitiveobject.getstate_toplefty.html",
                            "Parameters": "",
                            "Declaration": "getState_TopLeftY(): number | undefined;",
                            "return": [
                                "number | undefined",
                                "Top left point Y"
                            ]
                        },
                        {
                            "Method": "getState_Width()",
                            "Modifiers": "",
                            "Description": "Get attribute status: wide",
                            "link": "pro-api.ipcb_primitiveobject.getstate_width.html",
                            "Parameters": "",
                            "Declaration": "getState_Width(): number;",
                            "return": [
                                "number",
                                "Width"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitiveobject.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitiveobject.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveObject>;",
                            "return": [
                                "Promise<IPCB_PrimitiveObject>",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_BinaryData(binaryData)",
                            "Modifiers": "",
                            "Description": "Set attribute status: binary data",
                            "link": "pro-api.ipcb_primitiveobject.setstate_binarydata.html",
                            "Parameters": [
                                {
                                    "Parameter": "binaryData",
                                    "Type": "string",
                                    "Description": "Binary data",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_BinaryData(binaryData: string): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_FileName(fileName)",
                            "Modifiers": "",
                            "Description": "Set attribute status: file name",
                            "link": "pro-api.ipcb_primitiveobject.setstate_filename.html",
                            "Parameters": [
                                {
                                    "Parameter": "fileName",
                                    "Type": "string",
                                    "Description": "file name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_FileName(fileName: string): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_Height(height)",
                            "Modifiers": "",
                            "Description": "Set attribute status: high",
                            "link": "pro-api.ipcb_primitiveobject.setstate_height.html",
                            "Parameters": [
                                {
                                    "Parameter": "height",
                                    "Type": "number",
                                    "Description": "high",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Height(height: number): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitiveobject.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfObject",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofobject.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfObject): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_Mirror(mirror)",
                            "Modifiers": "",
                            "Description": "Set attribute status: whether to mirror horizontally",
                            "link": "pro-api.ipcb_primitiveobject.setstate_mirror.html",
                            "Parameters": [
                                {
                                    "Parameter": "mirror",
                                    "Type": "boolean",
                                    "Description": "Is it horizontally mirrored",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Mirror(mirror: boolean): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitiveobject.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "Set attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitiveobject.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_TopLeftX(topLeftX)",
                            "Modifiers": "",
                            "Description": "Set attribute status: upper left point X",
                            "link": "pro-api.ipcb_primitiveobject.setstate_topleftx.html",
                            "Parameters": [
                                {
                                    "Parameter": "topLeftX",
                                    "Type": "number",
                                    "Description": "Top left point X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_TopLeftX(topLeftX: number): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_TopLeftY(topLeftY)",
                            "Modifiers": "",
                            "Description": "Set attribute status: upper left point Y",
                            "link": "pro-api.ipcb_primitiveobject.setstate_toplefty.html",
                            "Parameters": [
                                {
                                    "Parameter": "topLeftY",
                                    "Type": "number",
                                    "Description": "Top left point Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_TopLeftY(topLeftY: number): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "setState_Width(width)",
                            "Modifiers": "",
                            "Description": "Set attribute status: Width",
                            "link": "pro-api.ipcb_primitiveobject.setstate_width.html",
                            "Parameters": [
                                {
                                    "Parameter": "width",
                                    "Type": "number",
                                    "Description": "Width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Width(width: number): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitiveobject.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitiveobject.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveObject;",
                            "return": [
                                "IPCB_PrimitiveObject",
                                "Binary embedded object element object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitivePad": {
                    "description": "Pad Primitive",
                    "url": "./pro-api.ipcb_primitivepad.html",
                    "Signature": "export declare class IPCB_PrimitivePad implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "async",
                            "Modifiers": "protected",
                            "Type": "boolean",
                            "Description": "asynchronous",
                            "link": "pro-api.ipcb_primitivepad.async.html",
                            "Parameters": "",
                            "Declaration": "protected async: boolean;"
                        },
                        {
                            "Property": "heatWelding",
                            "Modifiers": "protected",
                            "Type": "IPCB_PrimitivePadHeatWelding | null",
                            "Description": "Thermal welding optimization parameters",
                            "link": "pro-api.ipcb_primitivepad.heatwelding.html",
                            "Parameters": "",
                            "Declaration": "protected heatWelding: IPCB_PrimitivePadHeatWelding | null;"
                        },
                        {
                            "Property": "hole",
                            "Modifiers": "protected",
                            "Type": "TPCB_PrimitivePadHole | null",
                            "Description": "hole",
                            "link": "pro-api.tpcb_primitivepadhole.html",
                            "Parameters": "",
                            "Declaration": "export type TPCB_PrimitivePadHole = [EPCB_PrimitivePadHoleType, number, number];"
                        },
                        {
                            "Property": "holeOffsetX",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Hole offset X",
                            "link": "pro-api.ipcb_primitivepad.holeoffsetx.html",
                            "Parameters": "",
                            "Declaration": "protected holeOffsetX: number;"
                        },
                        {
                            "Property": "holeOffsetY",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Hole offset Y",
                            "link": "pro-api.ipcb_primitivepad.holeoffsety.html",
                            "Parameters": "",
                            "Declaration": "protected holeOffsetY: number;"
                        },
                        {
                            "Property": "holeRotation",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "The rotation angle of the hole relative to the pad",
                            "link": "pro-api.ipcb_primitivepad.holerotation.html",
                            "Parameters": "",
                            "Declaration": "protected holeRotation: number;"
                        },
                        {
                            "Property": "layer",
                            "Modifiers": "protected",
                            "Type": "TPCB_LayersOfPad",
                            "Description": "layer",
                            "link": "pro-api.tpcb_layersofpad.html",
                            "Parameters": "",
                            "Declaration": "export type TPCB_LayersOfPad = EPCB_LayerId.TOP | EPCB_LayerId.BOTTOM | EPCB_LayerId.MULTI;"
                        },
                        {
                            "Property": "metallization",
                            "Modifiers": "protected",
                            "Type": "boolean",
                            "Description": "Whether to metalize the pore wall",
                            "link": "pro-api.ipcb_primitivepad.metallization.html",
                            "Parameters": "",
                            "Declaration": "protected metallization: boolean;"
                        },
                        {
                            "Property": "net?",
                            "Modifiers": "protected",
                            "Type": "string",
                            "Description": "(Optional) Network name",
                            "link": "pro-api.ipcb_primitivepad.net.html",
                            "Parameters": "",
                            "Declaration": "protected net?: string;"
                        },
                        {
                            "Property": "pad?",
                            "Modifiers": "protected",
                            "Type": "TPCB_PrimitivePadShape",
                            "Description": "(Optional) pad shape",
                            "link": "pro-api.tpcb_primitivepadshape.html",
                            "Parameters": "",
                            "Declaration": "export type TPCB_PrimitivePadShape =\n\t| [EPCB_PrimitivePadShapeType.ELLIPSE | EPCB_PrimitivePadShapeType.OBLONG | EPCB_PrimitivePadShapeType.REGULAR_POLYGON, number, number]\n\t| [EPCB_PrimitivePadShapeType.RECTANGLE, number, number, number]\n\t| [EPCB_PrimitivePadShapeType.POLYLINE_COMPLEX_POLYGON, TPCB_PolygonSourceArray | Array<TPCB_PolygonSourceArray>];"
                        },
                        {
                            "Property": "padNumber",
                            "Modifiers": "protected",
                            "Type": "string",
                            "Description": "Pad number",
                            "link": "pro-api.ipcb_primitivepad.padnumber.html",
                            "Parameters": "",
                            "Declaration": "protected padNumber: string;"
                        },
                        {
                            "Property": "padType",
                            "Modifiers": "protected",
                            "Type": "EPCB_PrimitivePadType",
                            "Description": "Pad type",
                            "link": "pro-api.epcb_primitivepadtype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EPCB_PrimitivePadType"
                        },
                        {
                            "Property": "primitiveId?",
                            "Modifiers": "protected",
                            "Type": "string",
                            "Description": "(Optional) Element ID",
                            "link": "pro-api.ipcb_primitivepad.primitiveid.html",
                            "Parameters": "",
                            "Declaration": "protected primitiveId?: string;"
                        },
                        {
                            "Property": "primitiveLock",
                            "Modifiers": "protected",
                            "Type": "boolean",
                            "Description": "Whether to lock",
                            "link": "pro-api.ipcb_primitivepad.primitivelock.html",
                            "Parameters": "",
                            "Declaration": "protected primitiveLock: boolean;"
                        },
                        {
                            "Property": "primitiveType",
                            "Modifiers": "protected readonly",
                            "Type": "EPCB_PrimitiveType",
                            "Description": "Element Type",
                            "link": "pro-api.epcb_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EPCB_PrimitiveType"
                        },
                        {
                            "Property": "rotation",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Rotation angle",
                            "link": "pro-api.ipcb_primitivepad.rotation.html",
                            "Parameters": "",
                            "Declaration": "protected rotation: number;"
                        },
                        {
                            "Property": "solderMaskAndPasteMaskExpansion",
                            "Modifiers": "protected",
                            "Type": "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null",
                            "Description": "Solder-resistant/solder-assisted extension",
                            "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_PrimitiveSolderMaskAndPasteMaskExpansion"
                        },
                        {
                            "Property": "specialPad?",
                            "Modifiers": "protected",
                            "Type": "TPCB_PrimitiveSpecialPadShape",
                            "Description": "(Optional) Special pad shape",
                            "link": "pro-api.tpcb_primitivespecialpadshape.html",
                            "Parameters": "",
                            "Declaration": "export type TPCB_PrimitiveSpecialPadShape = Array<[number, number, TPCB_PrimitivePadShape]>;"
                        },
                        {
                            "Property": "x",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Position X",
                            "link": "pro-api.ipcb_primitivepad.x.html",
                            "Parameters": "",
                            "Declaration": "protected x: number;"
                        },
                        {
                            "Property": "y",
                            "Modifiers": "protected",
                            "Type": "number",
                            "Description": "Location Y",
                            "link": "pro-api.ipcb_primitivepad.y.html",
                            "Parameters": "",
                            "Declaration": "protected y: number;"
                        },
                        {
                            "Method": "create()",
                            "Modifiers": "",
                            "Description": "(BETA) Create primitives in PCB canvas",
                            "link": "pro-api.ipcb_primitivepad.create.html",
                            "Parameters": "",
                            "Declaration": "create(): Promise<IPCB_PrimitivePad>;",
                            "return": [
                                "Promise<IPCB_PrimitivePad>",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivepad.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitivePad>;",
                            "return": [
                                "Promise<IPCB_PrimitivePad>",
                                "Dimensional primitive object"
                            ]
                        },
                        {
                            "Method": "getState_HeatWelding()",
                            "Modifiers": "",
                            "Description": "Get attribute status: thermal welding optimization parameters",
                            "link": "pro-api.ipcb_primitivepad.getstate_heatwelding.html",
                            "Parameters": "",
                            "Declaration": "getState_HeatWelding(): IPCB_PrimitivePadHeatWelding | null;",
                            "return": [
                                "IPCB_PrimitivePadHeatWelding | null",
                                "Thermal welding optimization parameters"
                            ]
                        },
                        {
                            "Method": "getState_Hole()",
                            "Modifiers": "",
                            "Description": "Get attribute status: hole",
                            "link": "pro-api.ipcb_primitivepad.getstate_hole.html",
                            "Parameters": "",
                            "Declaration": "getState_Hole(): TPCB_PrimitivePadHole | null;",
                            "return": [
                                "TPCB_PrimitivePadHole | null",
                                "hole"
                            ]
                        },
                        {
                            "Method": "getState_HoleOffsetX()",
                            "Modifiers": "",
                            "Description": "Get attribute status: hole offset X",
                            "link": "pro-api.ipcb_primitivepad.getstate_holeoffsetx.html",
                            "Parameters": "",
                            "Declaration": "getState_HoleOffsetX(): number;",
                            "return": [
                                "number",
                                "Hole offset X"
                            ]
                        },
                        {
                            "Method": "getState_HoleOffsetY()",
                            "Modifiers": "",
                            "Description": "Get attribute status: hole offset Y",
                            "link": "pro-api.ipcb_primitivepad.getstate_holeoffsety.html",
                            "Parameters": "",
                            "Declaration": "getState_HoleOffsetY(): number;",
                            "return": [
                                "number",
                                "Hole offset Y"
                            ]
                        },
                        {
                            "Method": "getState_HoleRotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: The rotation angle of the hole relative to the pad",
                            "link": "pro-api.ipcb_primitivepad.getstate_holerotation.html",
                            "Parameters": "",
                            "Declaration": "getState_HoleRotation(): number;",
                            "return": [
                                "number",
                                "The rotation angle of the hole relative to the pad"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitivepad.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfPad;",
                            "return": [
                                "TPCB_LayersOfPad",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_Metallization()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether to metalize the hole wall",
                            "link": "pro-api.ipcb_primitivepad.getstate_metallization.html",
                            "Parameters": "",
                            "Declaration": "getState_Metallization(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to metalize the pore wall"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.ipcb_primitivepad.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_Pad()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pad shape",
                            "link": "pro-api.ipcb_primitivepad.getstate_pad.html",
                            "Parameters": "",
                            "Declaration": "getState_Pad(): TPCB_PrimitivePadShape | undefined;",
                            "return": [
                                "TPCB_PrimitivePadShape | undefined",
                                "Pad shape"
                            ]
                        },
                        {
                            "Method": "getState_PadNumber()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pad number",
                            "link": "pro-api.ipcb_primitivepad.getstate_padnumber.html",
                            "Parameters": "",
                            "Declaration": "getState_PadNumber(): string;",
                            "return": [
                                "string",
                                "Pad number"
                            ]
                        },
                        {
                            "Method": "getState_PadType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: pad type",
                            "link": "pro-api.ipcb_primitivepad.getstate_padtype.html",
                            "Parameters": "",
                            "Declaration": "getState_PadType(): EPCB_PrimitivePadType;",
                            "return": [
                                "EPCB_PrimitivePadType",
                                "Pad type"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivepad.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivepad.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivepad.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_Rotation()",
                            "Modifiers": "",
                            "Description": "Get attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitivepad.getstate_rotation.html",
                            "Parameters": "",
                            "Declaration": "getState_Rotation(): number;",
                            "return": [
                                "number",
                                "Rotation angle"
                            ]
                        },
                        {
                            "Method": "getState_SolderMaskAndPasteMaskExpansion()",
                            "Modifiers": "",
                            "Description": "Get attribute status: solder resist/solder assist extension",
                            "link": "pro-api.ipcb_primitivepad.getstate_soldermaskandpastemaskexpansion.html",
                            "Parameters": "",
                            "Declaration": "getState_SolderMaskAndPasteMaskExpansion(): IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null;",
                            "return": [
                                "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null",
                                "Solder-resistant/solder-assisted extension"
                            ]
                        },
                        {
                            "Method": "getState_SpecialPad()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Special pad shape",
                            "link": "pro-api.ipcb_primitivepad.getstate_specialpad.html",
                            "Parameters": "",
                            "Declaration": "getState_SpecialPad(): TPCB_PrimitiveSpecialPadShape | undefined;",
                            "return": [
                                "TPCB_PrimitiveSpecialPadShape | undefined",
                                "Special pad shape"
                            ]
                        },
                        {
                            "Method": "getState_X()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Position X",
                            "link": "pro-api.ipcb_primitivepad.getstate_x.html",
                            "Parameters": "",
                            "Declaration": "getState_X(): number;",
                            "return": [
                                "number",
                                "Position X"
                            ]
                        },
                        {
                            "Method": "getState_Y()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Position Y",
                            "link": "pro-api.ipcb_primitivepad.getstate_y.html",
                            "Parameters": "",
                            "Declaration": "getState_Y(): number;",
                            "return": [
                                "number",
                                "Location Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivepad.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivepad.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitivePad>;",
                            "return": [
                                "Promise<IPCB_PrimitivePad>",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "setState_HeatWelding(heatWelding)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: thermal welding optimization parameters",
                            "link": "pro-api.ipcb_primitivepad.setstate_heatwelding.html",
                            "Parameters": [
                                {
                                    "Parameter": "heatWelding",
                                    "Type": "IPCB_PrimitivePadHeatWelding | null",
                                    "Description": "Thermal welding optimization parameters",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_HeatWelding(heatWelding: IPCB_PrimitivePadHeatWelding | null): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "setState_Hole(hole)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Hole",
                            "link": "pro-api.ipcb_primitivepad.setstate_hole.html",
                            "Parameters": [
                                {
                                    "Parameter": "hole",
                                    "Type": "TPCB_PrimitivePadHole",
                                    "Description": "Pad drilling",
                                    "link": "pro-api.tpcb_primitivepadhole.html"
                                }
                            ],
                            "Declaration": "setState_Hole(hole: TPCB_PrimitivePadHole): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "When setting holes, some other attribute statuses will be set in a link:",
                                "This interface cannot set holes to null. If you want to remove hole properties, please use the setState_Layer method to switch the layer to the top or bottom layer."
                            ]
                        },
                        {
                            "Method": "setState_HoleOffsetX(holeOffsetX)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: hole offset X",
                            "link": "pro-api.ipcb_primitivepad.setstate_holeoffsetx.html",
                            "Parameters": [
                                {
                                    "Parameter": "holeOffsetX",
                                    "Type": "number",
                                    "Description": "Hole offset X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_HoleOffsetX(holeOffsetX: number): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "If the hole does not exist, the attribute will not be modified"
                            ]
                        },
                        {
                            "Method": "setState_HoleOffsetY(holeOffsetY)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: hole offset Y",
                            "link": "pro-api.ipcb_primitivepad.setstate_holeoffsety.html",
                            "Parameters": [
                                {
                                    "Parameter": "holeOffsetY",
                                    "Type": "number",
                                    "Description": "Hole offset Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_HoleOffsetY(holeOffsetY: number): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "If the hole does not exist, the attribute will not be modified"
                            ]
                        },
                        {
                            "Method": "setState_HoleRotation(holeRotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: The rotation angle of the hole relative to the pad",
                            "link": "pro-api.ipcb_primitivepad.setstate_holerotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "holeRotation",
                                    "Type": "number",
                                    "Description": "The rotation angle of the hole relative to the pad",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_HoleRotation(holeRotation: number): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "If the hole does not exist, the attribute will not be modified"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitivepad.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfPad",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofpad.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfPad): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "When setting the layer, some other attribute status will be set in a link:",
                                "When switching between the top and bottom layers: the solder resist/welding extension properties will be switched accordingly, and the data value remains unchanged.",
                                "When switching to single layer: determine whether to switch to the top or bottom layer, the solder shield/welding extension attribute will only retain the data corresponding to the specified layer; if there is a special pad, it will be converted to the normal pad attribute, and only the data corresponding to the specified layer will be retained; attributes related to holes will be reset to the default value",
                                "When switching to multiple layers, the solder resist/solder extending attribute will only retain the solder resist extension, and copy the original data to the top and bottom layers; the pad drilling attribute will be assigned a specified value, both length and width are 60% of the oblong shape of the pad diameter (the pad is an oblong or regular polygon), and width (the pad is a rectangular) (the data level is an oblong, but it is actually a regular circle). If the pad is a complex polygon of the polygon, the data will be calculated through a special algorithm (usually abstract, and later modification is recommended)"
                            ]
                        },
                        {
                            "Method": "setState_Metallization(metallization)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Whether to metalize the hole wall",
                            "link": "pro-api.ipcb_primitivepad.setstate_metallization.html",
                            "Parameters": [
                                {
                                    "Parameter": "metallization",
                                    "Type": "boolean",
                                    "Description": "Whether to metalize the pore wall",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Metallization(metallization: boolean): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "If the hole does not exist, the attribute will not be modified"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Network",
                            "link": "pro-api.ipcb_primitivepad.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "(Optional) Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net?: string): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "This interface is only available in the PCB editor, empty strings and undefined are considered empty networks"
                            ]
                        },
                        {
                            "Method": "setState_Pad(pad)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pad shape",
                            "link": "pro-api.ipcb_primitivepad.setstate_pad.html",
                            "Parameters": [
                                {
                                    "Parameter": "pad",
                                    "Type": "TPCB_PrimitivePadShape",
                                    "Description": "Pad shape",
                                    "link": "pro-api.tpcb_primitivepadshape.html"
                                }
                            ],
                            "Declaration": "setState_Pad(pad: TPCB_PrimitivePadShape): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "When setting the pad shape, some other attribute status will be set in a linkage:"
                            ]
                        },
                        {
                            "Method": "setState_PadNumber(padNumber)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: pad number",
                            "link": "pro-api.ipcb_primitivepad.setstate_padnumber.html",
                            "Parameters": [
                                {
                                    "Parameter": "padNumber",
                                    "Type": "string",
                                    "Description": "Pad number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PadNumber(padNumber: string): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivepad.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "setState_Rotation(rotation)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: rotation angle",
                            "link": "pro-api.ipcb_primitivepad.setstate_rotation.html",
                            "Parameters": [
                                {
                                    "Parameter": "rotation",
                                    "Type": "number",
                                    "Description": "Rotation angle",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Rotation(rotation: number): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "setState_SolderMaskAndPasteMaskExpansion(solderMaskAndPasteMaskExpansion)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: solder resist/solder extension",
                            "link": "pro-api.ipcb_primitivepad.setstate_soldermaskandpastemaskexpansion.html",
                            "Parameters": [
                                {
                                    "Parameter": "solderMaskAndPasteMaskExpansion",
                                    "Type": "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null",
                                    "Description": "Solder-resistant/solder-assisted extension",
                                    "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.html"
                                }
                            ],
                            "Declaration": "setState_SolderMaskAndPasteMaskExpansion(solderMaskAndPasteMaskExpansion: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "setState_SpecialPad(specialPad)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Special pad shape",
                            "link": "pro-api.ipcb_primitivepad.setstate_specialpad.html",
                            "Parameters": [
                                {
                                    "Parameter": "specialPad",
                                    "Type": "TPCB_PrimitiveSpecialPadShape",
                                    "Description": "",
                                    "link": "pro-api.tpcb_primitivespecialpadshape.html"
                                }
                            ],
                            "Declaration": "setState_SpecialPad(specialPad: TPCB_PrimitiveSpecialPadShape): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object",
                                "When setting the appearance of a special pad, some other attribute status will be set in a linkage:"
                            ]
                        },
                        {
                            "Method": "setState_X(x)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Position X",
                            "link": "pro-api.ipcb_primitivepad.setstate_x.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Position X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_X(x: number): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "setState_Y(y)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Position Y",
                            "link": "pro-api.ipcb_primitivepad.setstate_y.html",
                            "Parameters": [
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Location Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Y(y: number): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivepad.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivepad.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitivePad;",
                            "return": [
                                "IPCB_PrimitivePad",
                                "Pad element object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveComponentPad": {
                    "description": "Component Pad Primitive",
                    "url": "./pro-api.ipcb_primitivecomponentpad.html",
                    "Signature": "export declare class IPCB_PrimitiveComponentPad extends IPCB_PrimitivePad",
                    "Remark": "The device pad primitive is a special primitive that refers to the pads associated with the package on the PCB canvas.",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "primitiveType",
                            "Modifiers": "protected readonly",
                            "Type": "EPCB_PrimitiveType.COMPONENT_PAD",
                            "Description": "Element Type",
                            "link": "pro-api.epcb_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EPCB_PrimitiveType"
                        },
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivecomponentpad.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveComponentPad>;",
                            "return": [
                                "Promise<IPCB_PrimitiveComponentPad>",
                                "Device pad element object"
                            ]
                        },
                        {
                            "Method": "getConnectedPrimitives(onlyCentreConnection)",
                            "Modifiers": "",
                            "Description": "",
                            "link": "pro-api.ipcb_primitivecomponentpad.getconnectedprimitives_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "onlyCentreConnection",
                                    "Type": "false",
                                    "Description": "",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getConnectedPrimitives(onlyCentreConnection: false): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc | IPCB_PrimitiveVia | IPCB_PrimitivePolyline | IPCB_PrimitiveFill>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc | IPCB_PrimitiveVia | IPCB_PrimitivePolyline | IPCB_PrimitiveFill>>"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitivePolyline": {
                    "description": "Polyline Primitive",
                    "url": "./pro-api.ipcb_primitivepolyline.html",
                    "Signature": "export declare class IPCB_PrimitivePolyline implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "convertToFill()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Fill the Element",
                            "link": "pro-api.ipcb_primitivepolyline.converttofill.html",
                            "Parameters": "",
                            "Declaration": "convertToFill(): Promise<IPCB_PrimitiveFill>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill>",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "convertToPour()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Copper-clad border element",
                            "link": "pro-api.ipcb_primitivepolyline.converttopour.html",
                            "Parameters": "",
                            "Declaration": "convertToPour(): Promise<IPCB_PrimitivePour>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour>",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "convertToRegion()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Regional Elements",
                            "link": "pro-api.ipcb_primitivepolyline.converttoregion.html",
                            "Parameters": "",
                            "Declaration": "convertToRegion(): Promise<IPCB_PrimitiveRegion>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion>",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivepolyline.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitivePolyline>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline>",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitivepolyline.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfLine;",
                            "return": [
                                "TPCB_LayersOfLine",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.ipcb_primitivepolyline.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number;",
                            "return": [
                                "number",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.ipcb_primitivepolyline.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string;",
                            "return": [
                                "string",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_Polygon()",
                            "Modifiers": "",
                            "Description": "Get attribute status: single polygon",
                            "link": "pro-api.ipcb_primitivepolyline.getstate_polygon.html",
                            "Parameters": "",
                            "Declaration": "getState_Polygon(): IPCB_Polygon;",
                            "return": [
                                "IPCB_Polygon",
                                "Single polygon"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivepolyline.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivepolyline.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivepolyline.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivepolyline.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivepolyline.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitivePolyline>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline>",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitivepolyline.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfLine",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofline.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfLine): IPCB_PrimitivePolyline;",
                            "return": [
                                "IPCB_PrimitivePolyline",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.ipcb_primitivepolyline.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number): IPCB_PrimitivePolyline;",
                            "return": [
                                "IPCB_PrimitivePolyline",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.ipcb_primitivepolyline.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string): IPCB_PrimitivePolyline;",
                            "return": [
                                "IPCB_PrimitivePolyline",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Polygon(polygon)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: single polygon",
                            "link": "pro-api.ipcb_primitivepolyline.setstate_polygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "polygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Single polygon",
                                    "link": "pro-api.ipcb_polygon.html"
                                }
                            ],
                            "Declaration": "setState_Polygon(polygon: IPCB_Polygon): IPCB_PrimitivePolyline;",
                            "return": [
                                "IPCB_PrimitivePolyline",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivepolyline.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitivePolyline;",
                            "return": [
                                "IPCB_PrimitivePolyline",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivepolyline.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitivePolyline;",
                            "return": [
                                "IPCB_PrimitivePolyline",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivepolyline.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitivePolyline;",
                            "return": [
                                "IPCB_PrimitivePolyline",
                                "Line primitive object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitivePour": {
                    "description": "Copper Pour Border Primitive",
                    "url": "./pro-api.ipcb_primitivepour.html",
                    "Signature": "export declare class IPCB_PrimitivePour implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "convertToFill()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Fill the primitive (default is Fill the area)",
                            "link": "pro-api.ipcb_primitivepour.converttofill.html",
                            "Parameters": "",
                            "Declaration": "convertToFill(): Promise<IPCB_PrimitiveFill>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill>",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "convertToPolyline()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Line primitives (default is lines)",
                            "link": "pro-api.ipcb_primitivepour.converttopolyline.html",
                            "Parameters": "",
                            "Declaration": "convertToPolyline(): Promise<IPCB_PrimitivePolyline>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline>",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "convertToRegion()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Area Elements (default is a prohibited area)",
                            "link": "pro-api.ipcb_primitivepour.converttoregion.html",
                            "Parameters": "",
                            "Declaration": "convertToRegion(): Promise<IPCB_PrimitiveRegion>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion>",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivepour.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitivePour>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour>",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "getState_ComplexPolygon()",
                            "Modifiers": "",
                            "Description": "Get attribute state: complex polygons",
                            "link": "pro-api.ipcb_primitivepour.getstate_complexpolygon.html",
                            "Parameters": "",
                            "Declaration": "getState_ComplexPolygon(): IPCB_Polygon;",
                            "return": [
                                "IPCB_Polygon",
                                "Complex polygons"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitivepour.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfCopper;",
                            "return": [
                                "TPCB_LayersOfCopper",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.ipcb_primitivepour.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number;",
                            "return": [
                                "number",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.ipcb_primitivepour.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string;",
                            "return": [
                                "string",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_PourFillMethod()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Copper clad filling method",
                            "link": "pro-api.ipcb_primitivepour.getstate_pourfillmethod.html",
                            "Parameters": "",
                            "Declaration": "getState_PourFillMethod(): any;",
                            "return": [
                                "any",
                                "Copper clad filling method"
                            ]
                        },
                        {
                            "Method": "getState_PourName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: copper-clad border name",
                            "link": "pro-api.ipcb_primitivepour.getstate_pourname.html",
                            "Parameters": "",
                            "Declaration": "getState_PourName(): string;",
                            "return": [
                                "string",
                                "Copper border name"
                            ]
                        },
                        {
                            "Method": "getState_PourPriority()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Copper clad priority",
                            "link": "pro-api.ipcb_primitivepour.getstate_pourpriority.html",
                            "Parameters": "",
                            "Declaration": "getState_PourPriority(): number;",
                            "return": [
                                "number",
                                "Copper clad priority"
                            ]
                        },
                        {
                            "Method": "getState_PreserveSilos()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Whether to keep the island",
                            "link": "pro-api.ipcb_primitivepour.getstate_preservesilos.html",
                            "Parameters": "",
                            "Declaration": "getState_PreserveSilos(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to keep the island"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivepour.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivepour.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivepour.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivepour.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivepour.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitivePour>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour>",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_ComplexPolygon(complexPolygon)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: complex polygons",
                            "link": "pro-api.ipcb_primitivepour.setstate_complexpolygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Complex polygons",
                                    "link": "pro-api.ipcb_polygon.html"
                                }
                            ],
                            "Declaration": "setState_ComplexPolygon(complexPolygon: IPCB_Polygon): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitivepour.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfCopper",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofcopper.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfCopper): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.ipcb_primitivepour.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.ipcb_primitivepour.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_PourFillMethod(pourFillMethod)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Copper clad filling method",
                            "link": "pro-api.ipcb_primitivepour.setstate_pourfillmethod.html",
                            "Parameters": [
                                {
                                    "Parameter": "pourFillMethod",
                                    "Type": "EPCB_PrimitivePourFillMethod",
                                    "Description": "Copper clad filling method",
                                    "link": "pro-api.epcb_primitivepourfillmethod.html"
                                }
                            ],
                            "Declaration": "setState_PourFillMethod(pourFillMethod: EPCB_PrimitivePourFillMethod): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_PourName(pourName)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: copper-clad border name",
                            "link": "pro-api.ipcb_primitivepour.setstate_pourname.html",
                            "Parameters": [
                                {
                                    "Parameter": "pourName",
                                    "Type": "string",
                                    "Description": "Copper border name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PourName(pourName: string): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_PourPriority(pourPriority)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Copper clad priority",
                            "link": "pro-api.ipcb_primitivepour.setstate_pourpriority.html",
                            "Parameters": [
                                {
                                    "Parameter": "pourPriority",
                                    "Type": "number",
                                    "Description": "Copper clad priority",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PourPriority(pourPriority: number): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_PreserveSilos(preserveSilos)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Whether to keep the island",
                            "link": "pro-api.ipcb_primitivepour.setstate_preservesilos.html",
                            "Parameters": [
                                {
                                    "Parameter": "preserveSilos",
                                    "Type": "boolean",
                                    "Description": "Whether to keep the island",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PreserveSilos(preserveSilos: boolean): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivepour.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivepour.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivepour.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitivePour;",
                            "return": [
                                "IPCB_PrimitivePour",
                                "Copper border element object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveRegion": {
                    "description": "Region Primitive",
                    "url": "./pro-api.ipcb_primitiveregion.html",
                    "Signature": "export declare class IPCB_PrimitiveRegion implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "convertToFill()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Fill the Element",
                            "link": "pro-api.ipcb_primitiveregion.converttofill.html",
                            "Parameters": "",
                            "Declaration": "convertToFill(): Promise<IPCB_PrimitiveFill>;",
                            "return": [
                                "Promise<IPCB_PrimitiveFill>",
                                "Fill in element objects"
                            ]
                        },
                        {
                            "Method": "convertToPolyline()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Line Elements",
                            "link": "pro-api.ipcb_primitiveregion.converttopolyline.html",
                            "Parameters": "",
                            "Declaration": "convertToPolyline(): Promise<IPCB_PrimitivePolyline>;",
                            "return": [
                                "Promise<IPCB_PrimitivePolyline>",
                                "Line primitive object"
                            ]
                        },
                        {
                            "Method": "convertToPour()",
                            "Modifiers": "",
                            "Description": "(BETA) Convert to: Copper-clad border element",
                            "link": "pro-api.ipcb_primitiveregion.converttopour.html",
                            "Parameters": "",
                            "Declaration": "convertToPour(): Promise<IPCB_PrimitivePour>;",
                            "return": [
                                "Promise<IPCB_PrimitivePour>",
                                "Copper border element object"
                            ]
                        },
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitiveregion.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveRegion>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion>",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "getState_ComplexPolygon()",
                            "Modifiers": "",
                            "Description": "Get attribute state: complex polygons",
                            "link": "pro-api.ipcb_primitiveregion.getstate_complexpolygon.html",
                            "Parameters": "",
                            "Declaration": "getState_ComplexPolygon(): IPCB_Polygon;",
                            "return": [
                                "IPCB_Polygon",
                                "Complex polygons"
                            ]
                        },
                        {
                            "Method": "getState_Layer()",
                            "Modifiers": "",
                            "Description": "Get attribute status: layer",
                            "link": "pro-api.ipcb_primitiveregion.getstate_layer.html",
                            "Parameters": "",
                            "Declaration": "getState_Layer(): TPCB_LayersOfRegion;",
                            "return": [
                                "TPCB_LayersOfRegion",
                                "layer"
                            ]
                        },
                        {
                            "Method": "getState_LineWidth()",
                            "Modifiers": "",
                            "Description": "Get attribute status: line width",
                            "link": "pro-api.ipcb_primitiveregion.getstate_linewidth.html",
                            "Parameters": "",
                            "Declaration": "getState_LineWidth(): number;",
                            "return": [
                                "number",
                                "Line width"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitiveregion.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitiveregion.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitiveregion.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_RegionName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: region name",
                            "link": "pro-api.ipcb_primitiveregion.getstate_regionname.html",
                            "Parameters": "",
                            "Declaration": "getState_RegionName(): string | undefined;",
                            "return": [
                                "string | undefined",
                                "Region name"
                            ]
                        },
                        {
                            "Method": "getState_RuleType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: Region rule type",
                            "link": "pro-api.ipcb_primitiveregion.getstate_ruletype.html",
                            "Parameters": "",
                            "Declaration": "getState_RuleType(): Array<EPCB_PrimitiveRegionRuleType>;",
                            "return": [
                                "Array<EPCB_PrimitiveRegionRuleType>",
                                "Regional rule type"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitiveregion.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitiveregion.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveRegion>;",
                            "return": [
                                "Promise<IPCB_PrimitiveRegion>",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "setState_ComplexPolygon(complexPolygon)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: complex polygons",
                            "link": "pro-api.ipcb_primitiveregion.setstate_complexpolygon.html",
                            "Parameters": [
                                {
                                    "Parameter": "complexPolygon",
                                    "Type": "IPCB_Polygon",
                                    "Description": "Complex polygons",
                                    "link": "pro-api.ipcb_polygon.html"
                                }
                            ],
                            "Declaration": "setState_ComplexPolygon(complexPolygon: IPCB_Polygon): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "setState_Layer(layer)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: layer",
                            "link": "pro-api.ipcb_primitiveregion.setstate_layer.html",
                            "Parameters": [
                                {
                                    "Parameter": "layer",
                                    "Type": "TPCB_LayersOfRegion",
                                    "Description": "layer",
                                    "link": "pro-api.tpcb_layersofregion.html"
                                }
                            ],
                            "Declaration": "setState_Layer(layer: TPCB_LayersOfRegion): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "setState_LineWidth(lineWidth)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: line width",
                            "link": "pro-api.ipcb_primitiveregion.setstate_linewidth.html",
                            "Parameters": [
                                {
                                    "Parameter": "lineWidth",
                                    "Type": "number",
                                    "Description": "Line width",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_LineWidth(lineWidth: number): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitiveregion.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "setState_RegionName(regionName)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: region name",
                            "link": "pro-api.ipcb_primitiveregion.setstate_regionname.html",
                            "Parameters": [
                                {
                                    "Parameter": "regionName",
                                    "Type": "string",
                                    "Description": "(Optional) Region name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_RegionName(regionName?: string): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object",
                                "Valid only if ruleType is EPCB_PrimitiveRegionRuleType.FOLLOW_REGION_RULE for matching region DRC rules",
                                "If ruleType is EPCB_PrimitiveRegionRuleType.FOLLOW_REGION_RULE but regionName is empty, the system will automatically assign a name"
                            ]
                        },
                        {
                            "Method": "setState_RuleType(ruleType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Region rule type",
                            "link": "pro-api.ipcb_primitiveregion.setstate_ruletype.html",
                            "Parameters": [
                                {
                                    "Parameter": "ruleType",
                                    "Type": "Array<EPCB_PrimitiveRegionRuleType>",
                                    "Description": "Regional rule type",
                                    "link": "pro-api.epcb_primitiveregionruletype.html"
                                }
                            ],
                            "Declaration": "setState_RuleType(ruleType: Array<EPCB_PrimitiveRegionRuleType>): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitiveregion.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitiveregion.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveRegion;",
                            "return": [
                                "IPCB_PrimitiveRegion",
                                "Area primitive object"
                            ]
                        }
                    ]
                },
                "IPCB_PrimitiveVia": {
                    "description": "Via Primitive",
                    "url": "./pro-api.ipcb_primitivevia.html",
                    "Signature": "export declare class IPCB_PrimitiveVia implements IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "done()",
                            "Modifiers": "",
                            "Description": "(BETA) Apply changes to primitives to the canvas",
                            "link": "pro-api.ipcb_primitivevia.done.html",
                            "Parameters": "",
                            "Declaration": "done(): Promise<IPCB_PrimitiveVia>;",
                            "return": [
                                "Promise<IPCB_PrimitiveVia>",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "getAdjacentPrimitives()",
                            "Modifiers": "",
                            "Description": "(BETA) Get adjacent primitive objects",
                            "link": "pro-api.ipcb_primitivevia.getadjacentprimitives.html",
                            "Parameters": "",
                            "Declaration": "getAdjacentPrimitives(): Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc>>;",
                            "return": [
                                "Promise<Array<IPCB_PrimitiveLine | IPCB_PrimitiveArc>>",
                                "Adjacent wire and arc element objects",
                                "The wire and arc element objects directly connected to the via will be obtained"
                            ]
                        },
                        {
                            "Method": "getState_DesignRuleBlindViaName()",
                            "Modifiers": "",
                            "Description": "Get attribute status: blind buried hole design rule item name",
                            "link": "pro-api.ipcb_primitivevia.getstate_designruleblindvianame.html",
                            "Parameters": "",
                            "Declaration": "getState_DesignRuleBlindViaName(): string | null;",
                            "return": [
                                "string | null",
                                "Blind buried hole design rule item name"
                            ]
                        },
                        {
                            "Method": "getState_Diameter()",
                            "Modifiers": "",
                            "Description": "Get attribute status: outer diameter",
                            "link": "pro-api.ipcb_primitivevia.getstate_diameter.html",
                            "Parameters": "",
                            "Declaration": "getState_Diameter(): number;",
                            "return": [
                                "number",
                                "Outer path"
                            ]
                        },
                        {
                            "Method": "getState_HoleDiameter()",
                            "Modifiers": "",
                            "Description": "Get attribute status: aperture",
                            "link": "pro-api.ipcb_primitivevia.getstate_holediameter.html",
                            "Parameters": "",
                            "Declaration": "getState_HoleDiameter(): number;",
                            "return": [
                                "number",
                                "Ore diameter"
                            ]
                        },
                        {
                            "Method": "getState_Net()",
                            "Modifiers": "",
                            "Description": "Get attribute status: network name",
                            "link": "pro-api.ipcb_primitivevia.getstate_net.html",
                            "Parameters": "",
                            "Declaration": "getState_Net(): string;",
                            "return": [
                                "string",
                                "Network name"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveId()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element ID",
                            "link": "pro-api.ipcb_primitivevia.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId(): string;",
                            "return": [
                                "string",
                                "Essence ID"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveLock()",
                            "Modifiers": "",
                            "Description": "Get attribute status: whether it is locked",
                            "link": "pro-api.ipcb_primitivevia.getstate_primitivelock.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveLock(): boolean;",
                            "return": [
                                "boolean",
                                "Whether to lock"
                            ]
                        },
                        {
                            "Method": "getState_PrimitiveType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: element type",
                            "link": "pro-api.ipcb_primitivevia.getstate_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveType(): EPCB_PrimitiveType;",
                            "return": [
                                "EPCB_PrimitiveType",
                                "Element Type"
                            ]
                        },
                        {
                            "Method": "getState_SolderMaskExpansion()",
                            "Modifiers": "",
                            "Description": "Get attribute status: solder resist/solder assist extension",
                            "link": "pro-api.ipcb_primitivevia.getstate_soldermaskexpansion.html",
                            "Parameters": "",
                            "Declaration": "getState_SolderMaskExpansion(): IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null;",
                            "return": [
                                "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null",
                                "Solder-resistant/solder-assisted extension"
                            ]
                        },
                        {
                            "Method": "getState_ViaType()",
                            "Modifiers": "",
                            "Description": "Get attribute status: via type",
                            "link": "pro-api.ipcb_primitivevia.getstate_viatype.html",
                            "Parameters": "",
                            "Declaration": "getState_ViaType(): EPCB_PrimitiveViaType;",
                            "return": [
                                "EPCB_PrimitiveViaType",
                                "Passage type"
                            ]
                        },
                        {
                            "Method": "getState_X()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate X",
                            "link": "pro-api.ipcb_primitivevia.getstate_x.html",
                            "Parameters": "",
                            "Declaration": "getState_X(): number;",
                            "return": [
                                "number",
                                "Coordinate X"
                            ]
                        },
                        {
                            "Method": "getState_Y()",
                            "Modifiers": "",
                            "Description": "Get attribute status: coordinate Y",
                            "link": "pro-api.ipcb_primitivevia.getstate_y.html",
                            "Parameters": "",
                            "Declaration": "getState_Y(): number;",
                            "return": [
                                "number",
                                "Coordinate Y"
                            ]
                        },
                        {
                            "Method": "isAsync()",
                            "Modifiers": "",
                            "Description": "Query whether the primitive is an asynchronous primitive",
                            "link": "pro-api.ipcb_primitivevia.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync(): boolean;",
                            "return": [
                                "boolean",
                                "Is it an asynchronous element?"
                            ]
                        },
                        {
                            "Method": "reset()",
                            "Modifiers": "",
                            "Description": "(BETA) Resets asynchronous primitives to the current canvas state",
                            "link": "pro-api.ipcb_primitivevia.reset.html",
                            "Parameters": "",
                            "Declaration": "reset(): Promise<IPCB_PrimitiveVia>;",
                            "return": [
                                "Promise<IPCB_PrimitiveVia>",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_DesignRuleBlindViaName(designRuleBlindViaName)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Blind buried hole design rule item name",
                            "link": "pro-api.ipcb_primitivevia.setstate_designruleblindvianame.html",
                            "Parameters": [
                                {
                                    "Parameter": "designRuleBlindViaName",
                                    "Type": "string | null",
                                    "Description": "Blind buried hole design rule item name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_DesignRuleBlindViaName(designRuleBlindViaName: string | null): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_Diameter(diameter)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Outer diameter",
                            "link": "pro-api.ipcb_primitivevia.setstate_diameter.html",
                            "Parameters": [
                                {
                                    "Parameter": "diameter",
                                    "Type": "number",
                                    "Description": "Outer path",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Diameter(diameter: number): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_HoleDiameter(holeDiameter)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: aperture",
                            "link": "pro-api.ipcb_primitivevia.setstate_holediameter.html",
                            "Parameters": [
                                {
                                    "Parameter": "holeDiameter",
                                    "Type": "number",
                                    "Description": "Ore diameter",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_HoleDiameter(holeDiameter: number): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_Net(net)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: network name",
                            "link": "pro-api.ipcb_primitivevia.setstate_net.html",
                            "Parameters": [
                                {
                                    "Parameter": "net",
                                    "Type": "string",
                                    "Description": "Network name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Net(net: string): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_PrimitiveLock(primitiveLock)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: whether to lock",
                            "link": "pro-api.ipcb_primitivevia.setstate_primitivelock.html",
                            "Parameters": [
                                {
                                    "Parameter": "primitiveLock",
                                    "Type": "boolean",
                                    "Description": "Whether to lock",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_PrimitiveLock(primitiveLock: boolean): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_SolderMaskExpansion(solderMaskExpansion)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: solder resist/solder extension",
                            "link": "pro-api.ipcb_primitivevia.setstate_soldermaskexpansion.html",
                            "Parameters": [
                                {
                                    "Parameter": "solderMaskExpansion",
                                    "Type": "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null",
                                    "Description": "Solder-resistant/solder-assisted extension",
                                    "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.html"
                                }
                            ],
                            "Declaration": "setState_SolderMaskExpansion(solderMaskExpansion: IPCB_PrimitiveSolderMaskAndPasteMaskExpansion | null): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_ViaType(viaType)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: via type",
                            "link": "pro-api.ipcb_primitivevia.setstate_viatype.html",
                            "Parameters": [
                                {
                                    "Parameter": "viaType",
                                    "Type": "EPCB_PrimitiveViaType",
                                    "Description": "Passage type",
                                    "link": "pro-api.epcb_primitiveviatype.html"
                                }
                            ],
                            "Declaration": "setState_ViaType(viaType: EPCB_PrimitiveViaType): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_X(x)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: Coordinate X",
                            "link": "pro-api.ipcb_primitivevia.setstate_x.html",
                            "Parameters": [
                                {
                                    "Parameter": "x",
                                    "Type": "number",
                                    "Description": "Coordinate X",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_X(x: number): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "setState_Y(y)",
                            "Modifiers": "",
                            "Description": "(BETA) Set attribute status: coordinate Y",
                            "link": "pro-api.ipcb_primitivevia.setstate_y.html",
                            "Parameters": [
                                {
                                    "Parameter": "y",
                                    "Type": "number",
                                    "Description": "Coordinate Y",
                                    "link": ""
                                }
                            ],
                            "Declaration": "setState_Y(y: number): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "toAsync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to asynchronous primitives",
                            "link": "pro-api.ipcb_primitivevia.toasync.html",
                            "Parameters": "",
                            "Declaration": "toAsync(): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        },
                        {
                            "Method": "toSync()",
                            "Modifiers": "",
                            "Description": "Convert primitives to synchronous primitives",
                            "link": "pro-api.ipcb_primitivevia.tosync.html",
                            "Parameters": "",
                            "Declaration": "toSync(): IPCB_PrimitiveVia;",
                            "return": [
                                "IPCB_PrimitiveVia",
                                "Through hole element object"
                            ]
                        }
                    ]
                }
            },
            "Enumerations": {
                "EPCB_DocumentRatlineCalculatingActiveStatus": {
                    "description": "Document Ratline Calculation Function Status",
                    "url": "./pro-api.epcb_documentratlinecalculatingactivestatus.html",
                    "Signature": "export declare enum EPCB_DocumentRatlineCalculatingActiveStatus",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ACTIVE",
                            "Value": "\"active\"",
                            "Description": "Enable",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INACTIVE",
                            "Value": "\"inactive\"",
                            "Description": "Disable",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_LayerId": {
                    "description": "Layer ID",
                    "url": "./pro-api.epcb_layerid.html",
                    "Signature": "export declare enum EPCB_LayerId",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BOARD_OUTLINE",
                            "Value": "11",
                            "Description": "Board and frame layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BOTTOM",
                            "Value": "2",
                            "Description": "Bottom floor",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BOTTOM_ASSEMBLY",
                            "Value": "10",
                            "Description": "Underlying assembly layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BOTTOM_PASTE_MASK",
                            "Value": "8",
                            "Description": "Bottom solder paste (soldering) layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BOTTOM_SILKSCREEN",
                            "Value": "4",
                            "Description": "Bottom silk screen printing layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BOTTOM_SOLDER_MASK",
                            "Value": "6",
                            "Description": "Bottom solder resist",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "BOTTOM_STIFFENER",
                            "Value": "59",
                            "Description": "Underlying FPC reinforcement layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "COMPONENT_MARKING",
                            "Value": "49",
                            "Description": "Component identification layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "COMPONENT_MODEL",
                            "Value": "52",
                            "Description": "Component model layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "COMPONENT_SHAPE",
                            "Value": "48",
                            "Description": "Component shape layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_1",
                            "Value": "71",
                            "Description": "Custom Layer 1",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_10",
                            "Value": "80",
                            "Description": "Custom Layer 10",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_11",
                            "Value": "81",
                            "Description": "Custom Layer 11",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_12",
                            "Value": "82",
                            "Description": "Custom Layer 12",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_13",
                            "Value": "83",
                            "Description": "Custom Layer 13",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_14",
                            "Value": "84",
                            "Description": "Custom Layer 14",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_15",
                            "Value": "85",
                            "Description": "Custom Layer 15",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_16",
                            "Value": "86",
                            "Description": "Custom Layer 16",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_17",
                            "Value": "87",
                            "Description": "Custom Layer 17",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_18",
                            "Value": "88",
                            "Description": "Custom Layer 18",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_19",
                            "Value": "89",
                            "Description": "Custom Layer 19",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_2",
                            "Value": "72",
                            "Description": "Custom Layer 2",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_20",
                            "Value": "90",
                            "Description": "Custom Layer 20",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_21",
                            "Value": "91",
                            "Description": "Custom Layer 21",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_22",
                            "Value": "92",
                            "Description": "Custom Layer 22",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_23",
                            "Value": "93",
                            "Description": "Custom Layer 23",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_24",
                            "Value": "94",
                            "Description": "Custom Layer 24",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_25",
                            "Value": "95",
                            "Description": "Custom Layer 25",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_26",
                            "Value": "96",
                            "Description": "Custom Layer 26",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_27",
                            "Value": "97",
                            "Description": "Custom Layer 27",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_28",
                            "Value": "98",
                            "Description": "Custom Layer 28",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_29",
                            "Value": "99",
                            "Description": "Custom Layer 29",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_3",
                            "Value": "73",
                            "Description": "Custom Layer 3",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_30",
                            "Value": "100",
                            "Description": "Custom Layer 30",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_4",
                            "Value": "74",
                            "Description": "Custom Layer 4",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_5",
                            "Value": "75",
                            "Description": "Custom Layer 5",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_6",
                            "Value": "76",
                            "Description": "Custom Layer 6",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_7",
                            "Value": "77",
                            "Description": "Custom Layer 7",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_8",
                            "Value": "78",
                            "Description": "Custom Layer 8",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM_9",
                            "Value": "79",
                            "Description": "Custom Layer 9",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DOCUMENT",
                            "Value": "13",
                            "Description": "Document layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DRILL_DRAWING",
                            "Value": "56",
                            "Description": "Drilling layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "HOLE",
                            "Value": "47",
                            "Description": "Hole layer (inner hole of pad, via hole)",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_1",
                            "Value": "15",
                            "Description": "Inner layer 1",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_10",
                            "Value": "24",
                            "Description": "Inner layer 10",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_11",
                            "Value": "25",
                            "Description": "Inner layer 11",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_12",
                            "Value": "26",
                            "Description": "Inner layer 12",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_13",
                            "Value": "27",
                            "Description": "Inner layer 13",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_14",
                            "Value": "28",
                            "Description": "Inner layer 14",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_15",
                            "Value": "29",
                            "Description": "Inner layer 15",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_16",
                            "Value": "30",
                            "Description": "Inner layer 16",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_17",
                            "Value": "31",
                            "Description": "Inner layer 17",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_18",
                            "Value": "32",
                            "Description": "Inner layer 18",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_19",
                            "Value": "33",
                            "Description": "Inner 19",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_2",
                            "Value": "16",
                            "Description": "Inner layer 2",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_20",
                            "Value": "34",
                            "Description": "Inner layer 20",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_21",
                            "Value": "35",
                            "Description": "Inner layer 21",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_22",
                            "Value": "36",
                            "Description": "Inner layer 22",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_23",
                            "Value": "37",
                            "Description": "Inner layer 23",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_24",
                            "Value": "38",
                            "Description": "Inner layer 24",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_25",
                            "Value": "39",
                            "Description": "Inner layer 25",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_26",
                            "Value": "40",
                            "Description": "Inner layer 26",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_27",
                            "Value": "41",
                            "Description": "Inner layer 27",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_28",
                            "Value": "42",
                            "Description": "Inner layer 28",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_29",
                            "Value": "43",
                            "Description": "Inner layer 29",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_3",
                            "Value": "17",
                            "Description": "Inner layer 3",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_30",
                            "Value": "44",
                            "Description": "Inner layer 30",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_31",
                            "Value": "45",
                            "Description": "Inner layer 31",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_32",
                            "Value": "46",
                            "Description": "Inner layer 32",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_4",
                            "Value": "18",
                            "Description": "Inner layer 4",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_5",
                            "Value": "19",
                            "Description": "Inner layer 5",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_6",
                            "Value": "20",
                            "Description": "Inner layer 6",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_7",
                            "Value": "21",
                            "Description": "Inner layer 7",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_8",
                            "Value": "22",
                            "Description": "Inner layer 8",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INNER_9",
                            "Value": "23",
                            "Description": "Inner layer 9",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "MECHANICAL",
                            "Value": "14",
                            "Description": "Mechanical layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "MULTI",
                            "Value": "12",
                            "Description": "Multi-layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PIN_FLOATING",
                            "Value": "51",
                            "Description": "Pin hanging layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PIN_SOLDERING",
                            "Value": "50",
                            "Description": "Pin soldering layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "RATLINE",
                            "Value": "57",
                            "Description": "Flying line layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SHELL_3D_BOTTOM",
                            "Value": "55",
                            "Description": "3D shell base",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SHELL_3D_OUTLINE",
                            "Value": "53",
                            "Description": "3D shell border layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SHELL_3D_TOP",
                            "Value": "54",
                            "Description": "3D shell top layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SUBSTRATE_1",
                            "Value": "101",
                            "Description": "Interlayer (dielectric substrate)1",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TOP",
                            "Value": "1",
                            "Description": "Top level",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TOP_ASSEMBLY",
                            "Value": "9",
                            "Description": "Top-level assembly layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TOP_PASTE_MASK",
                            "Value": "7",
                            "Description": "Top solder paste (soldering) layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TOP_SILKSCREEN",
                            "Value": "3",
                            "Description": "Top screen printing layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TOP_SOLDER_MASK",
                            "Value": "5",
                            "Description": "Top solder resist",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TOP_STIFFENER",
                            "Value": "58",
                            "Description": "Top FPC reinforcement layer",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_LayerColorConfiguration": {
                    "description": "Layer Color Configuration",
                    "url": "./pro-api.epcb_layercolorconfiguration.html",
                    "Signature": "export declare enum EPCB_LayerColorConfiguration",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ALTIUM_DESIGNER",
                            "Value": "2",
                            "Description": "Altium Designer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "EASYEDA",
                            "Value": "1",
                            "Description": "EasyEDA",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "JLCEDA",
                            "Value": "1",
                            "Description": "JialiChuang EDA",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "KICAD",
                            "Value": "4",
                            "Description": "KiCAD",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PADS",
                            "Value": "3",
                            "Description": "PADS",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_LayerType": {
                    "description": "Layer Type",
                    "url": "./pro-api.epcb_layertype.html",
                    "Signature": "export declare enum EPCB_LayerType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ASSEMBLY",
                            "Value": "\"ASSEMBLY\"",
                            "Description": "Assembly layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "CUSTOM",
                            "Value": "\"CUSTOM\"",
                            "Description": "Custom Layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "INTERNAL_ELECTRICAL",
                            "Value": "\"PLANE\"",
                            "Description": "Inner electrical layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "OTHER",
                            "Value": "\"OTHER\"",
                            "Description": "other",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PASTE_MASK",
                            "Value": "\"PASTE_MASK\"",
                            "Description": "Solder paste (soldering) layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SIGNAL",
                            "Value": "\"SIGNAL\"",
                            "Description": "Signal layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SILKSCREEN",
                            "Value": "\"SILKSCREEN\"",
                            "Description": "Silk screen layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SOLDER_MASK",
                            "Value": "\"SOLDER_MASK\"",
                            "Description": "Solder resist layer",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PcbPlateType": {
                    "description": "PCB Plate Type",
                    "url": "./pro-api.epcb_pcbplatetype.html",
                    "Signature": "export declare enum EPCB_PcbPlateType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "FPC",
                            "Value": "2",
                            "Description": "FPC soft board",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NORMAL",
                            "Value": "1",
                            "Description": "Ordinary sheet",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_InactiveLayerDisplayMode": {
                    "description": "Inactive Layer Display Mode",
                    "url": "./pro-api.epcb_inactivelayerdisplaymode.html",
                    "Signature": "export declare enum EPCB_InactiveLayerDisplayMode",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "HIDE",
                            "Value": "2",
                            "Description": "hide",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NORMAL_BRIGHTNESS",
                            "Value": "0",
                            "Description": "Normal brightness",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TURN_GRAY",
                            "Value": "1",
                            "Description": "Grease",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PdfOutputMethod": {
                    "description": "PDF Output Method",
                    "url": "./pro-api.epcb_pdfoutputmethod.html",
                    "Signature": "export declare enum EPCB_PdfOutputMethod",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "MULTI_PAGE_PDF",
                            "Value": "\"A Multi Page PDF\"",
                            "Description": "Single multi-page PDF",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "MULTIPLE_SINGLE_PAGE_PDF",
                            "Value": "\"Multiple Single Page PDF\"",
                            "Description": "Multiple single page PDFs (the compressed package containing all decomposed layers PDF files will be output)",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SINGLE_PAGE_PDF",
                            "Value": "\"A Single Page PDF\"",
                            "Description": "Single single page PDF (a compressed package containing one PDF file per layer will be output)",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitiveType": {
                    "description": "Primitive Type",
                    "url": "./pro-api.epcb_primitivetype.html",
                    "Signature": "export declare enum EPCB_PrimitiveType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ARC",
                            "Value": "\"Arc\"",
                            "Description": "Arc lines",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "ATTRIBUTE",
                            "Value": "\"Attribute\"",
                            "Description": "property",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "COMPONENT",
                            "Value": "\"Component\"",
                            "Description": "Devices",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "COMPONENT_PAD",
                            "Value": "\"ComponentPad\"",
                            "Description": "Device pad",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DIMENSION",
                            "Value": "\"Dimension\"",
                            "Description": "Dimensions",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "FILL",
                            "Value": "\"Fill\"",
                            "Description": "filling",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "IMAGE",
                            "Value": "\"Image\"",
                            "Description": "image",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "LINE",
                            "Value": "\"Line\"",
                            "Description": "straight line",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "OBJECT",
                            "Value": "\"Object\"",
                            "Description": "Binary embedded objects",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PAD",
                            "Value": "\"Pad\"",
                            "Description": "Solder pad",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "POLYLINE",
                            "Value": "\"Polyline\"",
                            "Description": "Folding line",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "POUR",
                            "Value": "\"Pour\"",
                            "Description": "Copper clad border",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "POURED",
                            "Value": "\"Poured\"",
                            "Description": "Copper clad filling",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "REGION",
                            "Value": "\"Region\"",
                            "Description": "area",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "STRING",
                            "Value": "\"String\"",
                            "Description": "text",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "VIA",
                            "Value": "\"Via\"",
                            "Description": "Through holes",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitiveArcInteractiveMode": {
                    "description": "Arc Interactive Mode",
                    "url": "./pro-api.epcb_primitivearcinteractivemode.html",
                    "Signature": "export declare enum EPCB_PrimitiveArcInteractiveMode",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "CENTER_ARC",
                            "Value": "2",
                            "Description": "Central arc interaction",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TWO_POINT_ARC",
                            "Value": "1",
                            "Description": "Two-point arc interaction",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitiveDimensionType": {
                    "description": "Dimension Type",
                    "url": "./pro-api.epcb_primitivedimensiontype.html",
                    "Signature": "export declare enum EPCB_PrimitiveDimensionType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ANGLE",
                            "Value": "\"Protractor Dimension\"",
                            "Description": "angle",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "LENGTH",
                            "Value": "\"Length Dimension\"",
                            "Description": "length",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "RADIUS",
                            "Value": "\"Radius Dimension\"",
                            "Description": "radius",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitiveFillMode": {
                    "description": "Fill Primitive Fill Mode",
                    "url": "./pro-api.epcb_primitivefillmode.html",
                    "Signature": "export declare enum EPCB_PrimitiveFillMode",
                    "Remark": "Grid filling and internal electrical layer filling are reserved configurations",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "INNER_ELECTRICAL_LAYER",
                            "Value": "2",
                            "Description": "Inner electrical layer filling",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "MESH",
                            "Value": "1",
                            "Description": "Mesh fill",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SOLID",
                            "Value": "0",
                            "Description": "Solid filling",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitivePadFunction": {
                    "description": "Pad Type",
                    "url": "./pro-api.epcb_primitivepadtype.html",
                    "Signature": "export declare enum EPCB_PrimitivePadType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "MARK_POINT",
                            "Value": "2",
                            "Description": "Logo point",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NORMAL",
                            "Value": "0",
                            "Description": "Solder pad",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "TEST",
                            "Value": "1",
                            "Description": "Test points",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitivePadHeatWeldingConnectionMethod": {
                    "description": "Pad Heat Welding Connection Method",
                    "url": "./pro-api.epcb_primitivepadheatweldingconnectionmethod.html",
                    "Signature": "export declare enum EPCB_PrimitivePadHeatWeldingConnectionMethod",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "DIRECT_CONNECTED",
                            "Value": "\"Direct-connected\"",
                            "Description": "Direct connection",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DIVERGENT",
                            "Value": "\"Divergent\"",
                            "Description": "Divergent",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NON_CONNECTED",
                            "Value": "\"Non-connected\"",
                            "Description": "No connection",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitivePadHoleType": {
                    "description": "Pad Hole Type",
                    "url": "./pro-api.epcb_primitivepadholetype.html",
                    "Signature": "export declare enum EPCB_PrimitivePadHoleType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "RECTANGLE",
                            "Value": "\"RECT\"",
                            "Description": "rectangle",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "ROUND",
                            "Value": "\"ROUND\"",
                            "Description": "Oval",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitivePadShapeType": {
                    "description": "Pad Shape Type",
                    "url": "./pro-api.epcb_primitivepadshapetype.html",
                    "Signature": "export declare enum EPCB_PrimitivePadShapeType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "ELLIPSE",
                            "Value": "\"ELLIPSE\"",
                            "Description": "Circular",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "OBLONG",
                            "Value": "\"OVAL\"",
                            "Description": "Oval",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "POLYLINE_COMPLEX_POLYGON",
                            "Value": "\"POLYGON\"",
                            "Description": "Polyline complex polygons",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "RECTANGLE",
                            "Value": "\"RECT\"",
                            "Description": "rectangle",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "REGULAR_POLYGON",
                            "Value": "\"NGON\"",
                            "Description": "Regular polygon",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitivePourFillMethod": {
                    "description": "Copper Pour Fill Method",
                    "url": "./pro-api.epcb_primitivepourfillmethod.html",
                    "Signature": "export declare enum EPCB_PrimitivePourFillMethod",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "GRID",
                            "Value": "\"90grid\"",
                            "Description": "90 degree grid",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "GRID45",
                            "Value": "\"45grid\"",
                            "Description": "45 degree grid",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SOLID",
                            "Value": "\"solid\"",
                            "Description": "Solid filling",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitiveRegionRuleType": {
                    "description": "Region Primitive Rule Type",
                    "url": "./pro-api.epcb_primitiveregionruletype.html",
                    "Signature": "export declare enum EPCB_PrimitiveRegionRuleType",
                    "Remark": "FOLLOW_REGION_RULE is the constraint area",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "FOLLOW_REGION_RULE",
                            "Value": "9",
                            "Description": "Constraint area",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NO_COMPONENTS",
                            "Value": "2",
                            "Description": "Disabled components",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NO_FILLS",
                            "Value": "6",
                            "Description": "Filling is prohibited",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NO_INNER_ELECTRICAL_LAYERS",
                            "Value": "8",
                            "Description": "Prohibit internal electrical layer",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NO_POURS",
                            "Value": "7",
                            "Description": "Copper cover is prohibited",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NO_VIAS",
                            "Value": "3",
                            "Description": "No via holes",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NO_WIRES",
                            "Value": "5",
                            "Description": "Prohibit wiring",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "EPCB_PrimitiveViaType": {
                    "description": "Via Type",
                    "url": "./pro-api.epcb_primitiveviatype.html",
                    "Signature": "export declare enum EPCB_PrimitiveViaType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "BLIND",
                            "Value": "1",
                            "Description": "Blind buried hole",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SUTURE",
                            "Value": "2",
                            "Description": "Suture hole",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "VIA",
                            "Value": "0",
                            "Description": "Through holes",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                }
            },
            "Interfaces": {
                "IPCB_DifferentialPairItem": {
                    "description": "Differential Pair Properties",
                    "url": "./pro-api.ipcb_differentialpairitem.html",
                    "Signature": "export interface IPCB_DifferentialPairItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Differential pair name",
                            "link": "pro-api.ipcb_differentialpairitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "negativeNet",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Negative network",
                            "link": "pro-api.ipcb_differentialpairitem.negativenet.html",
                            "Parameters": "",
                            "Declaration": "negativeNet: string;"
                        },
                        {
                            "Property": "positiveNet",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "The Internet",
                            "link": "pro-api.ipcb_differentialpairitem.positivenet.html",
                            "Parameters": "",
                            "Declaration": "positiveNet: string;"
                        }
                    ]
                },
                "IPCB_EqualLengthNetGroupItem": {
                    "description": "Equal Length Net Group Properties",
                    "url": "./pro-api.ipcb_equallengthnetgroupitem.html",
                    "Signature": "export interface IPCB_EqualLengthNetGroupItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "color",
                            "Modifiers": "",
                            "Type": "{ r: number; g: number; b: number; alpha: number; } | null",
                            "Description": "Isometric network group color",
                            "link": "pro-api.ipcb_equallengthnetgroupitem.color.html",
                            "Parameters": "",
                            "Declaration": "color: {\n        r: number;\n        g: number;\n        b: number;\n        alpha: number;\n    } | null;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Isometric network group name",
                            "link": "pro-api.ipcb_equallengthnetgroupitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "nets",
                            "Modifiers": "",
                            "Type": "Array<string>",
                            "Description": "Network name array",
                            "link": "pro-api.ipcb_equallengthnetgroupitem.nets.html",
                            "Parameters": "",
                            "Declaration": "nets: Array<string>;"
                        }
                    ]
                },
                "IPCB_NetClassItem": {
                    "description": "Net Class Properties",
                    "url": "./pro-api.ipcb_netclassitem.html",
                    "Signature": "export interface IPCB_NetClassItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "color",
                            "Modifiers": "",
                            "Type": "{ r: number; g: number; b: number; alpha: number; } | null",
                            "Description": "Network color",
                            "link": "pro-api.ipcb_netclassitem.color.html",
                            "Parameters": "",
                            "Declaration": "color: {\n        r: number;\n        g: number;\n        b: number;\n        alpha: number;\n    } | null;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Network class name",
                            "link": "pro-api.ipcb_netclassitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "nets",
                            "Modifiers": "",
                            "Type": "Array<string>",
                            "Description": "Network name array",
                            "link": "pro-api.ipcb_netclassitem.nets.html",
                            "Parameters": "",
                            "Declaration": "nets: Array<string>;"
                        }
                    ]
                },
                "IPCB_PadPairGroupItem": {
                    "description": "Pad Pair Group Properties",
                    "url": "./pro-api.ipcb_padpairgroupitem.html",
                    "Signature": "export interface IPCB_PadPairGroupItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Pad pair group name",
                            "link": "pro-api.ipcb_padpairgroupitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "padPairs",
                            "Modifiers": "",
                            "Type": "Array<[string, string]>",
                            "Description": "Pad p-array",
                            "link": "pro-api.ipcb_padpairgroupitem.padpairs.html",
                            "Parameters": "",
                            "Declaration": "padPairs: Array<[string, string]>;"
                        }
                    ]
                },
                "IPCB_PadPairMinWireLengthItem": {
                    "description": "Pad Pair Minimum Wire Length Properties",
                    "url": "./pro-api.ipcb_padpairminwirelengthitem.html",
                    "Signature": "export interface IPCB_PadPairMinWireLengthItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "minWireLength",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Minimum wire length",
                            "link": "pro-api.ipcb_padpairminwirelengthitem.minwirelength.html",
                            "Parameters": "",
                            "Declaration": "minWireLength: number;"
                        },
                        {
                            "Property": "padPair",
                            "Modifiers": "",
                            "Type": "[string, string]",
                            "Description": "Pad p-array",
                            "link": "pro-api.ipcb_padpairminwirelengthitem.padpair.html",
                            "Parameters": "",
                            "Declaration": "padPair: [string, string];"
                        }
                    ]
                },
                "IPCB_LayerItem": {
                    "description": "Layer Properties",
                    "url": "./pro-api.ipcb_layeritem.html",
                    "Signature": "export interface IPCB_LayerItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "color",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Color (RGB HEX format)",
                            "link": "pro-api.ipcb_layeritem.color.html",
                            "Parameters": "",
                            "Declaration": "color: string;"
                        },
                        {
                            "Property": "id",
                            "Modifiers": "",
                            "Type": "EPCB_LayerId",
                            "Description": "Layer ID",
                            "link": "pro-api.epcb_layerid.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EPCB_LayerId"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "name",
                            "link": "pro-api.ipcb_layeritem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "transparency",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "transparency(%)",
                            "link": "pro-api.ipcb_layeritem.transparency.html",
                            "Parameters": "",
                            "Declaration": "transparency: number;"
                        },
                        {
                            "Property": "type",
                            "Modifiers": "",
                            "Type": "EPCB_LayerType",
                            "Description": "type",
                            "link": "pro-api.epcb_layertype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EPCB_LayerType"
                        }
                    ]
                },
                "IPCB_NetInfo": {
                    "description": "Net Properties",
                    "url": "./pro-api.ipcb_netinfo.html",
                    "Signature": "export interface IPCB_NetInfo",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "color",
                            "Modifiers": "",
                            "Type": "{ r: number; g: number; b: number; alpha: number; } | null",
                            "Description": "color",
                            "link": "pro-api.ipcb_netinfo.color.html",
                            "Parameters": "",
                            "Declaration": "color: {\n        r: number;\n        g: number;\n        b: number;\n        alpha: number;\n    } | null;"
                        },
                        {
                            "Property": "length",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "length",
                            "link": "pro-api.ipcb_netinfo.length.html",
                            "Parameters": "",
                            "Declaration": "length: number;"
                        },
                        {
                            "Property": "net",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Network name",
                            "link": "pro-api.ipcb_netinfo.net.html",
                            "Parameters": "",
                            "Declaration": "net: string;"
                        }
                    ]
                },
                "IPCB_PrimitiveSolderMaskAndPasteMaskExpansion": {
                    "description": "Solder Mask / Paste Mask Expansion",
                    "url": "./pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.html",
                    "Signature": "export interface IPCB_PrimitiveSolderMaskAndPasteMaskExpansion",
                    "Remark": "This parameter setting includes the following three types of situations:",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "bottomPasteMask?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) Underlayer welding extension",
                            "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.bottompastemask.html",
                            "Parameters": "",
                            "Declaration": "bottomPasteMask?: number;"
                        },
                        {
                            "Property": "bottomSolderMask?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) Underlayer solder mask extension",
                            "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.bottomsoldermask.html",
                            "Parameters": "",
                            "Declaration": "bottomSolderMask?: number;"
                        },
                        {
                            "Property": "topPasteMask?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) Top-layer welding extension",
                            "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.toppastemask.html",
                            "Parameters": "",
                            "Declaration": "topPasteMask?: number;"
                        },
                        {
                            "Property": "topSolderMask?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) Top-layer solder mask extension",
                            "link": "pro-api.ipcb_primitivesoldermaskandpastemaskexpansion.topsoldermask.html",
                            "Parameters": "",
                            "Declaration": "topSolderMask?: number;"
                        }
                    ]
                },
                "IPCB_Primitive": {
                    "description": "PCB Primitive",
                    "url": "./pro-api.ipcb_primitive.html",
                    "Signature": "export interface IPCB_Primitive",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "create",
                            "Modifiers": "",
                            "Type": "() => IPCB_Primitive | Promise<IPCB_Primitive>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        },
                        {
                            "Property": "done",
                            "Modifiers": "",
                            "Type": "() => IPCB_Primitive | Promise<IPCB_Primitive>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        },
                        {
                            "Property": "getState_PrimitiveId",
                            "Modifiers": "",
                            "Type": "() => string",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.getstate_primitiveid.html",
                            "Parameters": "",
                            "Declaration": "getState_PrimitiveId: () => string;"
                        },
                        {
                            "Property": "getState_PrimitiveType",
                            "Modifiers": "",
                            "Type": "() => EPCB_PrimitiveType",
                            "Description": "",
                            "link": "pro-api.epcb_primitivetype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum EPCB_PrimitiveType"
                        },
                        {
                            "Property": "isAsync",
                            "Modifiers": "",
                            "Type": "() => boolean",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.isasync.html",
                            "Parameters": "",
                            "Declaration": "isAsync: () => boolean;"
                        },
                        {
                            "Property": "reset",
                            "Modifiers": "",
                            "Type": "() => IPCB_Primitive | Promise<IPCB_Primitive>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        },
                        {
                            "Property": "toAsync",
                            "Modifiers": "",
                            "Type": "() => IPCB_Primitive",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        },
                        {
                            "Property": "toSync",
                            "Modifiers": "",
                            "Type": "() => IPCB_Primitive",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        }
                    ]
                },
                "IPCB_PrimitiveAPI": {
                    "description": "PCB Primitive Interface",
                    "url": "./pro-api.ipcb_primitiveapi.html",
                    "Signature": "export interface IPCB_PrimitiveAPI",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "create",
                            "Modifiers": "",
                            "Type": "(...args: any[]) => IPCB_Primitive | undefined | Promise<IPCB_Primitive> | Promise<IPCB_Primitive | undefined>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        },
                        {
                            "Property": "delete",
                            "Modifiers": "",
                            "Type": "(primitiveIds: string | any | Array<string> | Array<any>) => boolean | Promise<boolean>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitiveapi.delete.html",
                            "Parameters": "",
                            "Declaration": "delete: (primitiveIds: string | any | Array<string> | Array<any>) => boolean | Promise<boolean>;"
                        },
                        {
                            "Property": "get",
                            "Modifiers": "",
                            "Type": "{ (primitiveIds: string): IPCB_Primitive | undefined | Promise<IPCB_Primitive | undefined>; (primitiveIds: Array<string>): Array<IPCB_Primitive> | Promise<Array<IPCB_Primitive>>; }",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        },
                        {
                            "Property": "getAll",
                            "Modifiers": "",
                            "Type": "(...args: any[]) => Array<IPCB_Primitive> | Promise<Array<IPCB_Primitive>>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        },
                        {
                            "Property": "getAllPrimitiveId",
                            "Modifiers": "",
                            "Type": "(...args: any[]) => Array<string> | Promise<Array<string>>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitiveapi.getallprimitiveid.html",
                            "Parameters": "",
                            "Declaration": "getAllPrimitiveId: (...args: any[]) => Array<string> | Promise<Array<string>>;"
                        },
                        {
                            "Property": "modify",
                            "Modifiers": "",
                            "Type": "(primitiveId: string | any, ...args: any[]) => IPCB_Primitive | undefined | Promise<IPCB_Primitive> | Promise<IPCB_Primitive | undefined>",
                            "Description": "",
                            "link": "pro-api.ipcb_primitive.html",
                            "Parameters": "",
                            "Declaration": "export interface IPCB_Primitive"
                        }
                    ]
                }
            },
            "Type Aliases": {
                "TPCB_LayersInTheSelectable": {
                    "description": "Selectable Layers",
                    "url": "./pro-api.tpcb_layersintheselectable.html",
                    "Signature": "export type TPCB_LayersInTheSelectable = | TPCB_LayersOfInner TPCB_LayersOfCustom EPCB_LayerId.TOP EPCB_LayerId . TOP EPCB_LayerId.TOP_SILKSCREEN TOP_SILKSCREEN EPCB_LayerId.TOP_SOLDER_MASK TOP_SOLDER_MASK EPCB_LayerId.TOP_PASTE_MASK TOP_PASTE_MASK EPCB_LayerId.TOP_ASSEMBLY TOP_ASSEMBLY EPCB_LayerId.TOP_STIFFENER TOP_STIFFENER EPCB_LayerId.BOTTOM BOTTOM EPCB_LayerId.BOTTOM_SILKSCREEN BOTTOM_SILKSCREEN EPCB_LayerId.BOTTOM_SOLDER_MASK BOTTOM_SOLDER_MASK EPCB_LayerId.BOTTOM_PASTE_MASK BOTTOM_PASTE_MASK EPCB_LayerId.BOTTOM_ASSEMBLY BOTTOM_ASSEMBLY EPCB_LayerId.BOTTOM_STIFFENER BOTTOM_STIFFENER EPCB_LayerId.BOARD_OUTLINE BOARD_OUTLINE EPCB_LayerId.MULTI MULTI EPCB_LayerId.DOCUMENT DOCUMENT EPCB_LayerId.MECHANICAL MECHANICAL EPCB_LayerId.DRILL_DRAWING DRILL_DRAWING EPCB_LayerId.RATLINE RATLINE EPCB_LayerId.COMPONENT_SHAPE COMPONENT_SHAPE EPCB_LayerId.COMPONENT_MARKING COMPONENT_MARKING EPCB_LayerId.PIN_SOLDERING PIN_SOLDERING EPCB_LayerId.PIN_FLOATING PIN_FLOATING EPCB_LayerId.SHELL_3D_OUTLINE SHELL_3D_OUTLINE EPCB_LayerId.SHELL_3D_TOP SHELL_3D_TOP EPCB_LayerId.SHELL_3D_BOTTOM; SHELL_3D_BOTTOM ;",
                    "Remark": "Here are all layers that can be selected and set visibility in the Editor Layers menu",
                    "Ref": "TPCB_LayersOfInner, TPCB_LayersOfCustom, EPCB_LayerId.TOP, EPCB_LayerId.TOP_SILKSCREEN, EPCB_LayerId.TOP_SOLDER_MASK, EPCB_LayerId.TOP_PASTE_MASK, EPCB_LayerId.TOP_ASSEMBLY, EPCB_LayerId.TOP_STIFFENER, EPCB_LayerId.BOTTOM, EPCB_LayerId.BOTTOM_SILKSCREEN, EPCB_LayerId.BOTTOM_SOLDER_MASK, EPCB_LayerId.BOTTOM_PASTE_MASK, EPCB_LayerId.BOTTOM_ASSEMBLY, EPCB_LayerId.BOTTOM_STIFFENER, EPCB_LayerId.BOARD_OUTLINE, EPCB_LayerId.MULTI, EPCB_LayerId.DOCUMENT, EPCB_LayerId.MECHANICAL, EPCB_LayerId.DRILL_DRAWING, EPCB_LayerId.RATLINE, EPCB_LayerId.COMPONENT_SHAPE, EPCB_LayerId.COMPONENT_MARKING, EPCB_LayerId.PIN_SOLDERING, EPCB_LayerId.PIN_FLOATING, EPCB_LayerId.SHELL_3D_OUTLINE, EPCB_LayerId.SHELL_3D_TOP, EPCB_LayerId.SHELL_3D_BOTTOM"
                },
                "TPCB_LayersOfInner": {
                    "description": "Inner Layers",
                    "url": "./pro-api.tpcb_layersofinner.html",
                    "Signature": "export type TPCB_LayersOfInner = | EPCB_LayerId.INNER_1 EPCB_LayerId . INNER_1 EPCB_LayerId.INNER_2 INNER_2 EPCB_LayerId.INNER_3 INNER_3 EPCB_LayerId.INNER_4 INNER_4 EPCB_LayerId.INNER_5 INNER_5 EPCB_LayerId.INNER_6 INNER_6 EPCB_LayerId.INNER_7 INNER_7 EPCB_LayerId.INNER_8 INNER_8 EPCB_LayerId.INNER_9 INNER_9 EPCB_LayerId.INNER_10 INNER_10 EPCB_LayerId.INNER_11 INNER_11 EPCB_LayerId.INNER_12 INNER_12 EPCB_LayerId.INNER_13 INNER_13 EPCB_LayerId.INNER_14 INNER_14 EPCB_LayerId.INNER_15 INNER_15 EPCB_LayerId.INNER_16 INNER_16 EPCB_LayerId.INNER_17 INNER_17 EPCB_LayerId.INNER_18 INNER_18 EPCB_LayerId.INNER_19 INNER_19 EPCB_LayerId.INNER_20 INNER_20 EPCB_LayerId.INNER_21 INNER_21 EPCB_LayerId.INNER_22 INNER_22 EPCB_LayerId.INNER_23 INNER_23 EPCB_LayerId.INNER_24 INNER_24 EPCB_LayerId.INNER_25 INNER_25 EPCB_LayerId.INNER_26 INNER_26 EPCB_LayerId.INNER_27 INNER_27 EPCB_LayerId.INNER_28 INNER_28 EPCB_LayerId.INNER_29 INNER_29 EPCB_LayerId.INNER_30 INNER_30 EPCB_LayerId.INNER_31 INNER_31 EPCB_LayerId.INNER_32; INNER_32 ;",
                    "Remark": "",
                    "Ref": "EPCB_LayerId.INNER_1, EPCB_LayerId.INNER_2, EPCB_LayerId.INNER_3, EPCB_LayerId.INNER_4, EPCB_LayerId.INNER_5, EPCB_LayerId.INNER_6, EPCB_LayerId.INNER_7, EPCB_LayerId.INNER_8, EPCB_LayerId.INNER_9, EPCB_LayerId.INNER_10, EPCB_LayerId.INNER_11, EPCB_LayerId.INNER_12, EPCB_LayerId.INNER_13, EPCB_LayerId.INNER_14, EPCB_LayerId.INNER_15, EPCB_LayerId.INNER_16, EPCB_LayerId.INNER_17, EPCB_LayerId.INNER_18, EPCB_LayerId.INNER_19, EPCB_LayerId.INNER_20, EPCB_LayerId.INNER_21, EPCB_LayerId.INNER_22, EPCB_LayerId.INNER_23, EPCB_LayerId.INNER_24, EPCB_LayerId.INNER_25, EPCB_LayerId.INNER_26, EPCB_LayerId.INNER_27, EPCB_LayerId.INNER_28, EPCB_LayerId.INNER_29, EPCB_LayerId.INNER_30, EPCB_LayerId.INNER_31, EPCB_LayerId.INNER_32"
                },
                "TPCB_LayersOfCustom": {
                    "description": "Custom Layers",
                    "url": "./pro-api.tpcb_layersofcustom.html",
                    "Signature": "export type TPCB_LayersOfCustom = | EPCB_LayerId.CUSTOM_1 EPCB_LayerId . CUSTOM_1 EPCB_LayerId.CUSTOM_2 CUSTOM_2 EPCB_LayerId.CUSTOM_3 CUSTOM_3 EPCB_LayerId.CUSTOM_4 CUSTOM_4 EPCB_LayerId.CUSTOM_5 CUSTOM_5 EPCB_LayerId.CUSTOM_6 CUSTOM_6 EPCB_LayerId.CUSTOM_7 CUSTOM_7 EPCB_LayerId.CUSTOM_8 CUSTOM_8 EPCB_LayerId.CUSTOM_9 CUSTOM_9 EPCB_LayerId.CUSTOM_10 CUSTOM_10 EPCB_LayerId.CUSTOM_11 CUSTOM_11 EPCB_LayerId.CUSTOM_12 CUSTOM_12 EPCB_LayerId.CUSTOM_13 CUSTOM_13 EPCB_LayerId.CUSTOM_14 CUSTOM_14 EPCB_LayerId.CUSTOM_15 CUSTOM_15 EPCB_LayerId.CUSTOM_16 CUSTOM_16 EPCB_LayerId.CUSTOM_17 CUSTOM_17 EPCB_LayerId.CUSTOM_18 CUSTOM_18 EPCB_LayerId.CUSTOM_19 CUSTOM_19 EPCB_LayerId.CUSTOM_20 CUSTOM_20 EPCB_LayerId.CUSTOM_21 CUSTOM_21 EPCB_LayerId.CUSTOM_22 CUSTOM_22 EPCB_LayerId.CUSTOM_23 CUSTOM_23 EPCB_LayerId.CUSTOM_24 CUSTOM_24 EPCB_LayerId.CUSTOM_25 CUSTOM_25 EPCB_LayerId.CUSTOM_26 CUSTOM_26 EPCB_LayerId.CUSTOM_27 CUSTOM_27 EPCB_LayerId.CUSTOM_28 CUSTOM_28 EPCB_LayerId.CUSTOM_29 CUSTOM_29 EPCB_LayerId.CUSTOM_30; CUSTOM_30 ;",
                    "Remark": "",
                    "Ref": "EPCB_LayerId.CUSTOM_1, EPCB_LayerId.CUSTOM_2, EPCB_LayerId.CUSTOM_3, EPCB_LayerId.CUSTOM_4, EPCB_LayerId.CUSTOM_5, EPCB_LayerId.CUSTOM_6, EPCB_LayerId.CUSTOM_7, EPCB_LayerId.CUSTOM_8, EPCB_LayerId.CUSTOM_9, EPCB_LayerId.CUSTOM_10, EPCB_LayerId.CUSTOM_11, EPCB_LayerId.CUSTOM_12, EPCB_LayerId.CUSTOM_13, EPCB_LayerId.CUSTOM_14, EPCB_LayerId.CUSTOM_15, EPCB_LayerId.CUSTOM_16, EPCB_LayerId.CUSTOM_17, EPCB_LayerId.CUSTOM_18, EPCB_LayerId.CUSTOM_19, EPCB_LayerId.CUSTOM_20, EPCB_LayerId.CUSTOM_21, EPCB_LayerId.CUSTOM_22, EPCB_LayerId.CUSTOM_23, EPCB_LayerId.CUSTOM_24, EPCB_LayerId.CUSTOM_25, EPCB_LayerId.CUSTOM_26, EPCB_LayerId.CUSTOM_27, EPCB_LayerId.CUSTOM_28, EPCB_LayerId.CUSTOM_29, EPCB_LayerId.CUSTOM_30"
                },
                "TPCB_LayersOfComponent": {
                    "description": "Component Layers",
                    "url": "./pro-api.tpcb_layersofcomponent.html",
                    "Signature": "export type TPCB_LayersOfComponent = EPCB_LayerId.TOP | EPCB_LayerId.BOTTOM; EPCB_LayerId . TOP BOTTOM ;",
                    "Remark": "",
                    "Ref": "EPCB_LayerId.TOP, EPCB_LayerId.BOTTOM"
                },
                "TPCB_LayersOfCopper": {
                    "description": "Copper Layers",
                    "url": "./pro-api.tpcb_layersofcopper.html",
                    "Signature": "export type TPCB_LayersOfCopper = TPCB_LayersOfInner | EPCB_LayerId.TOP EPCB_LayerId.BOTTOM; EPCB_LayerId . TOP BOTTOM ;",
                    "Remark": "This is for the convenience of single-layer copper foil layer design, and does not include EPCB_LayerId.MULTI",
                    "Ref": "TPCB_LayersOfInner, EPCB_LayerId.TOP, EPCB_LayerId.BOTTOM"
                },
                "TPCB_LayersOfPad": {
                    "description": "Pad Layers",
                    "url": "./pro-api.tpcb_layersofpad.html",
                    "Signature": "export type TPCB_LayersOfPad = EPCB_LayerId.TOP | EPCB_LayerId.BOTTOM EPCB_LayerId.MULTI; EPCB_LayerId . TOP BOTTOM MULTI ;",
                    "Remark": "",
                    "Ref": "EPCB_LayerId.TOP, EPCB_LayerId.BOTTOM, EPCB_LayerId.MULTI"
                },
                "TPCB_LayersOfLine": {
                    "description": "Line Layers",
                    "url": "./pro-api.tpcb_layersofline.html",
                    "Signature": "export type TPCB_LayersOfLine = | TPCB_LayersOfCopper TPCB_LayersOfCustom EPCB_LayerId.TOP_SILKSCREEN EPCB_LayerId . TOP_SILKSCREEN EPCB_LayerId.TOP_SOLDER_MASK TOP_SOLDER_MASK EPCB_LayerId.TOP_PASTE_MASK TOP_PASTE_MASK EPCB_LayerId.TOP_ASSEMBLY TOP_ASSEMBLY EPCB_LayerId.BOTTOM_SILKSCREEN BOTTOM_SILKSCREEN EPCB_LayerId.BOTTOM_SOLDER_MASK BOTTOM_SOLDER_MASK EPCB_LayerId.BOTTOM_PASTE_MASK BOTTOM_PASTE_MASK EPCB_LayerId.BOTTOM_ASSEMBLY BOTTOM_ASSEMBLY EPCB_LayerId.BOARD_OUTLINE BOARD_OUTLINE EPCB_LayerId.DOCUMENT DOCUMENT EPCB_LayerId.MECHANICAL MECHANICAL EPCB_LayerId.DRILL_DRAWING; DRILL_DRAWING ;",
                    "Remark": "",
                    "Ref": "TPCB_LayersOfCopper, TPCB_LayersOfCustom, EPCB_LayerId.TOP_SILKSCREEN, EPCB_LayerId.TOP_SOLDER_MASK, EPCB_LayerId.TOP_PASTE_MASK, EPCB_LayerId.TOP_ASSEMBLY, EPCB_LayerId.BOTTOM_SILKSCREEN, EPCB_LayerId.BOTTOM_SOLDER_MASK, EPCB_LayerId.BOTTOM_PASTE_MASK, EPCB_LayerId.BOTTOM_ASSEMBLY, EPCB_LayerId.BOARD_OUTLINE, EPCB_LayerId.DOCUMENT, EPCB_LayerId.MECHANICAL, EPCB_LayerId.DRILL_DRAWING"
                },
                "TPCB_LayersOfDimension": {
                    "description": "Dimension Layers",
                    "url": "./pro-api.tpcb_layersofdimension.html",
                    "Signature": "export type TPCB_LayersOfDimension = | TPCB_LayersOfCustom EPCB_LayerId.TOP_SILKSCREEN EPCB_LayerId . TOP_SILKSCREEN EPCB_LayerId.BOTTOM_SILKSCREEN BOTTOM_SILKSCREEN EPCB_LayerId.DOCUMENT DOCUMENT EPCB_LayerId.MECHANICAL; MECHANICAL ;",
                    "Remark": "",
                    "Ref": "TPCB_LayersOfCustom, EPCB_LayerId.TOP_SILKSCREEN, EPCB_LayerId.BOTTOM_SILKSCREEN, EPCB_LayerId.DOCUMENT, EPCB_LayerId.MECHANICAL"
                },
                "TPCB_LayersOfImage": {
                    "description": "Complex Polygon (SVG Image, Text) Layers",
                    "url": "./pro-api.tpcb_layersofimage.html",
                    "Signature": "export type TPCB_LayersOfImage = | TPCB_LayersOfCopper TPCB_LayersOfCustom EPCB_LayerId.TOP_SILKSCREEN EPCB_LayerId . TOP_SILKSCREEN EPCB_LayerId.TOP_SOLDER_MASK TOP_SOLDER_MASK EPCB_LayerId.TOP_ASSEMBLY TOP_ASSEMBLY EPCB_LayerId.BOTTOM_SILKSCREEN BOTTOM_SILKSCREEN EPCB_LayerId.BOTTOM_SOLDER_MASK BOTTOM_SOLDER_MASK EPCB_LayerId.BOTTOM_ASSEMBLY BOTTOM_ASSEMBLY EPCB_LayerId.DOCUMENT DOCUMENT EPCB_LayerId.MECHANICAL MECHANICAL EPCB_LayerId.DRILL_DRAWING; DRILL_DRAWING ;",
                    "Remark": "",
                    "Ref": "TPCB_LayersOfCopper, TPCB_LayersOfCustom, EPCB_LayerId.TOP_SILKSCREEN, EPCB_LayerId.TOP_SOLDER_MASK, EPCB_LayerId.TOP_ASSEMBLY, EPCB_LayerId.BOTTOM_SILKSCREEN, EPCB_LayerId.BOTTOM_SOLDER_MASK, EPCB_LayerId.BOTTOM_ASSEMBLY, EPCB_LayerId.DOCUMENT, EPCB_LayerId.MECHANICAL, EPCB_LayerId.DRILL_DRAWING"
                },
                "TPCB_LayersOfFill": {
                    "description": "Fill Layers",
                    "url": "./pro-api.tpcb_layersoffill.html",
                    "Signature": "export type TPCB_LayersOfFill = | TPCB_LayersOfCopper TPCB_LayersOfCustom EPCB_LayerId.TOP_SILKSCREEN EPCB_LayerId . TOP_SILKSCREEN EPCB_LayerId.TOP_SOLDER_MASK TOP_SOLDER_MASK EPCB_LayerId.TOP_PASTE_MASK TOP_PASTE_MASK EPCB_LayerId.TOP_ASSEMBLY TOP_ASSEMBLY EPCB_LayerId.BOTTOM_SILKSCREEN BOTTOM_SILKSCREEN EPCB_LayerId.BOTTOM_SOLDER_MASK BOTTOM_SOLDER_MASK EPCB_LayerId.BOTTOM_PASTE_MASK BOTTOM_PASTE_MASK EPCB_LayerId.BOTTOM_ASSEMBLY BOTTOM_ASSEMBLY EPCB_LayerId.DOCUMENT DOCUMENT EPCB_LayerId.MECHANICAL MECHANICAL EPCB_LayerId.MULTI; MULTI ;",
                    "Remark": "When the filling layer is EPCB_LayerId.MULTI, it represents the trench area.",
                    "Ref": "TPCB_LayersOfCopper, TPCB_LayersOfCustom, EPCB_LayerId.TOP_SILKSCREEN, EPCB_LayerId.TOP_SOLDER_MASK, EPCB_LayerId.TOP_PASTE_MASK, EPCB_LayerId.TOP_ASSEMBLY, EPCB_LayerId.BOTTOM_SILKSCREEN, EPCB_LayerId.BOTTOM_SOLDER_MASK, EPCB_LayerId.BOTTOM_PASTE_MASK, EPCB_LayerId.BOTTOM_ASSEMBLY, EPCB_LayerId.DOCUMENT, EPCB_LayerId.MECHANICAL, EPCB_LayerId.MULTI"
                },
                "TPCB_LayersOfRegion": {
                    "description": "Region Layers",
                    "url": "./pro-api.tpcb_layersofregion.html",
                    "Signature": "export type TPCB_LayersOfRegion = TPCB_LayersOfCopper | EPCB_LayerId.MULTI; EPCB_LayerId . MULTI ;",
                    "Remark": "",
                    "Ref": "TPCB_LayersOfCopper, EPCB_LayerId.MULTI"
                },
                "TPCB_LayersOfObject": {
                    "description": "Binary Embedded Object Layers",
                    "url": "./pro-api.tpcb_layersofobject.html",
                    "Signature": "export type TPCB_LayersOfObject = EPCB_LayerId.TOP_SILKSCREEN | EPCB_LayerId.BOTTOM_SILKSCREEN EPCB_LayerId.DOCUMENT; EPCB_LayerId . TOP_SILKSCREEN BOTTOM_SILKSCREEN DOCUMENT ;",
                    "Remark": "",
                    "Ref": "EPCB_LayerId.TOP_SILKSCREEN, EPCB_LayerId.BOTTOM_SILKSCREEN, EPCB_LayerId.DOCUMENT"
                },
                "TPCB_LayerTypesOfInnerLayer": {
                    "description": "Allowed Layer Types for Inner Layers",
                    "url": "./pro-api.tpcb_layertypesofinnerlayer.html",
                    "Signature": "export type TPCB_LayerTypesOfInnerLayer = EPCB_LayerType.SIGNAL | EPCB_LayerType.INTERNAL_ELECTRICAL; EPCB_LayerType . SIGNAL INTERNAL_ELECTRICAL ;",
                    "Remark": "",
                    "Ref": "EPCB_LayerType.SIGNAL, EPCB_LayerType.INTERNAL_ELECTRICAL"
                },
                "TPCB_PolygonSourceArray": {
                    "description": "Single Polygon Source Array",
                    "url": "./pro-api.tpcb_polygonsourcearray.html",
                    "Signature": "export type TPCB_PolygonSourceArray = Array<'L' | 'ARC' 'CARC' 'C' 'R' 'CIRCLE' number>; Array < 'L' number >;",
                    "Remark": "A single polygon is the area described by an uninterrupted line with the head and tail overlapping. If the head and tail overlap, it will automatically overlap if the head and tail do not overlap.",
                    "Ref": ""
                },
                "TPCB_PrimitiveDimensionCoordinateSet": {
                    "description": "Dimension Coordinate Set",
                    "url": "./pro-api.tpcb_primitivedimensioncoordinateset.html",
                    "Signature": "export type TPCB_PrimitiveDimensionCoordinateSet = | [number, number, number] [ number , ] number]; ];",
                    "Remark": "There are three types of dimension coordinate sets:",
                    "Ref": ""
                },
                "TPCB_PrimitivePadHole": {
                    "description": "Pad Hole",
                    "url": "./pro-api.tpcb_primitivepadhole.html",
                    "Signature": "export type TPCB_PrimitivePadHole = [EPCB_PrimitivePadHoleType, number, number]; [ EPCB_PrimitivePadHoleType , number ];",
                    "Remark": "There are currently two types of pad drilling:",
                    "Ref": "EPCB_PrimitivePadHoleType"
                },
                "TPCB_PrimitivePadShape": {
                    "description": "Pad Shape",
                    "url": "./pro-api.tpcb_primitivepadshape.html",
                    "Signature": "export type TPCB_PrimitivePadShape = | [EPCB_PrimitivePadShapeType.ELLIPSE EPCB_PrimitivePadShapeType.OBLONG EPCB_PrimitivePadShapeType.REGULAR_POLYGON, number, number] [ EPCB_PrimitivePadShapeType . ELLIPSE OBLONG REGULAR_POLYGON , number ] [EPCB_PrimitivePadShapeType.RECTANGLE, RECTANGLE [EPCB_PrimitivePadShapeType.POLYLINE_COMPLEX_POLYGON, TPCB_PolygonSourceArray Array<TPCB_PolygonSourceArray>]; POLYLINE_COMPLEX_POLYGON Array < >];",
                    "Remark": "There are currently four types of solder pads:",
                    "Ref": "EPCB_PrimitivePadShapeType.ELLIPSE, EPCB_PrimitivePadShapeType.OBLONG, EPCB_PrimitivePadShapeType.REGULAR_POLYGON, EPCB_PrimitivePadShapeType.RECTANGLE, EPCB_PrimitivePadShapeType.POLYLINE_COMPLEX_POLYGON, TPCB_PolygonSourceArray"
                },
                "TPCB_PrimitiveSpecialPadShape": {
                    "description": "Special Pad Shape",
                    "url": "./pro-api.tpcb_primitivespecialpadshape.html",
                    "Signature": "export type TPCB_PrimitiveSpecialPadShape = Array<[number, number, TPCB_PrimitivePadShape]>; Array <[ number , TPCB_PrimitivePadShape ]>;",
                    "Remark": "Array<[startLayer, endLayer, TPCB_PrimitivePadShape]>",
                    "Ref": "TPCB_PrimitivePadShape"
                }
            }
        },
        "Panel": {
            "Classes": {
                "PNL_Document": {
                    "description": "Panel / Document Operations Class",
                    "url": "./pro-api.pnl_document.html",
                    "Signature": "export declare class PNL_Document",
                    "Remark": "Operations on the overall design document",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "save()",
                            "Modifiers": "",
                            "Description": "(BETA) Save document",
                            "link": "pro-api.pnl_document.save.html",
                            "Parameters": "",
                            "Declaration": "save(): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Whether the save operation is successful, and errors such as the failure to save and upload fail will be returned to false."
                            ]
                        }
                    ]
                }
            }
        },
        "Integrated Library": {
            "Classes": {
                "LIB_LibrariesList": {
                    "description": "Integrated Library / Library List Class",
                    "url": "./pro-api.lib_librarieslist.html",
                    "Signature": "export declare class LIB_LibrariesList",
                    "Remark": "All interfaces here are based on the editor's current workspace environment. If you need to switch to another workspace, please use the DMT_Workspace.toggleToWorkspace() interface to switch the workspace",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "getAllLibrariesList()",
                            "Modifiers": "",
                            "Description": "(BETA) Get a list of all libraries",
                            "link": "pro-api.lib_librarieslist.getalllibrarieslist.html",
                            "Parameters": "",
                            "Declaration": "getAllLibrariesList(): Promise<Array<ILIB_LibraryInfo>>;",
                            "return": [
                                "Promise<Array<ILIB_LibraryInfo>>",
                                "Library information list",
                                "Information about system libraries, personal libraries, engineering libraries, and collection libraries will not be obtained here. If you want to obtain their information, please use the getSystemLibraryUuid, getPersonalLibraryUuid, getProjectLibraryUuid, getFavoriteLibraryUuid interfaces"
                            ]
                        },
                        {
                            "Method": "getFavoriteLibraryUuid()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the UUID of the Collection",
                            "link": "pro-api.lib_librarieslist.getfavoritelibraryuuid.html",
                            "Parameters": "",
                            "Declaration": "getFavoriteLibraryUuid(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Favorite library UUID",
                                "The UUID of the collection in the current editor workspace will be obtained"
                            ]
                        },
                        {
                            "Method": "getPersonalLibraryUuid()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the UUID of the personal library",
                            "link": "pro-api.lib_librarieslist.getpersonallibraryuuid.html",
                            "Parameters": "",
                            "Declaration": "getPersonalLibraryUuid(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of personal library",
                                "The UUID of the personal library under the current editor workspace will be obtained. In the private deployment environment, the personal library will not exist. This interface will always return undefined"
                            ]
                        },
                        {
                            "Method": "getProjectLibraryUuid()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the UUID of the project library",
                            "link": "pro-api.lib_librarieslist.getprojectlibraryuuid.html",
                            "Parameters": "",
                            "Declaration": "getProjectLibraryUuid(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of the project library",
                                "Calling without project opening will return undefined"
                            ]
                        },
                        {
                            "Method": "getSystemLibraryUuid()",
                            "Modifiers": "",
                            "Description": "(BETA) Get the UUID of the system library",
                            "link": "pro-api.lib_librarieslist.getsystemlibraryuuid.html",
                            "Parameters": "",
                            "Declaration": "getSystemLibraryUuid(): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of the system library"
                            ]
                        }
                    ]
                },
                "LIB_Classification": {
                    "description": "Integrated Library / Library Classification Index Class",
                    "url": "./pro-api.lib_classification.html",
                    "Signature": "export declare class LIB_Classification",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "createPrimary(libraryUuid, libraryType, primaryClassificationName)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a Level 1 Classification",
                            "link": "pro-api.lib_classification.createprimary.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryType",
                                    "Type": "ELIB_LibraryType",
                                    "Description": "Library Type",
                                    "link": "pro-api.elib_librarytype.html"
                                },
                                {
                                    "Parameter": "primaryClassificationName",
                                    "Type": "string",
                                    "Description": "First-level classification name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createPrimary(libraryUuid: string, libraryType: ELIB_LibraryType, primaryClassificationName: string): Promise<ILIB_ClassificationIndex | undefined>;",
                            "return": [
                                "Promise<ILIB_ClassificationIndex | undefined>",
                                "Classification Index"
                            ]
                        },
                        {
                            "Method": "createSecondary(libraryUuid, libraryType, primaryClassificationUuid, secondaryClassificationName)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a secondary category",
                            "link": "pro-api.lib_classification.createsecondary.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryType",
                                    "Type": "ELIB_LibraryType",
                                    "Description": "Library Type",
                                    "link": "pro-api.elib_librarytype.html"
                                },
                                {
                                    "Parameter": "primaryClassificationUuid",
                                    "Type": "string",
                                    "Description": "Level 1 classification UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "secondaryClassificationName",
                                    "Type": "string",
                                    "Description": "Secondary classification name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "createSecondary(libraryUuid: string, libraryType: ELIB_LibraryType, primaryClassificationUuid: string, secondaryClassificationName: string): Promise<ILIB_ClassificationIndex | undefined>;",
                            "return": [
                                "Promise<ILIB_ClassificationIndex | undefined>",
                                "Classification Index"
                            ]
                        },
                        {
                            "Method": "deleteByIndex(classificationIndex)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the classification of the specified index",
                            "link": "pro-api.lib_classification.deletebyindex.html",
                            "Parameters": [
                                {
                                    "Parameter": "classificationIndex",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "Classification Index",
                                    "link": "pro-api.ilib_classificationindex.html"
                                }
                            ],
                            "Declaration": "deleteByIndex(classificationIndex: ILIB_ClassificationIndex): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "deleteByUuid(libraryUuid, classificationUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the category of the specified UUID",
                            "link": "pro-api.lib_classification.deletebyuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classificationUuid",
                                    "Type": "string",
                                    "Description": "",
                                    "link": ""
                                }
                            ],
                            "Declaration": "deleteByUuid(libraryUuid: string, classificationUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "getAllClassificationTree(libraryUuid, libraryType)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets a tree composed of all classified information",
                            "link": "pro-api.lib_classification.getallclassificationtree.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryType",
                                    "Type": "ELIB_LibraryType",
                                    "Description": "Library Type",
                                    "link": "pro-api.elib_librarytype.html"
                                }
                            ],
                            "Declaration": "getAllClassificationTree(libraryUuid: string, libraryType: ELIB_LibraryType): Promise<{\n        name: string;\n        uuid: string;\n        children?: {\n            name: string;\n            uuid: string;\n        }[] | undefined;\n    }[]>;",
                            "return": [
                                "Promise<{ name: string; uuid: string; children?: { name: string; uuid: string; }[] | undefined; }[]>",
                                "Tree structure data composed of classified information"
                            ]
                        },
                        {
                            "Method": "getIndexByName(libraryUuid, libraryType, primaryClassificationName, secondaryClassificationName)",
                            "Modifiers": "",
                            "Description": "(BETA) \u00e8\u0698\u00b7\u0647\u0688\u2013\u0648\u0152\u2021\u0647\u00ae\u0691\u0647\u06af\u0686\u00e7\u00a7\u00b0\u00e7\u0691\u201e\u0647\u02c6\u2020\u00e7\u00b1\u00bb\u00e7\u0691\u201e\u0647\u02c6\u2020\u00e7\u00b1\u00bb\u00e7\u00b4\u00a2\u0647\u00bc\u2022",
                            "link": "pro-api.lib_classification.getindexbyname.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryType",
                                    "Type": "ELIB_LibraryType",
                                    "Description": "Library Type",
                                    "link": "pro-api.elib_librarytype.html"
                                },
                                {
                                    "Parameter": "primaryClassificationName",
                                    "Type": "string",
                                    "Description": "First-level classification name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "secondaryClassificationName",
                                    "Type": "string",
                                    "Description": "(Optional) Secondary Classification Name",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getIndexByName(libraryUuid: string, libraryType: ELIB_LibraryType, primaryClassificationName: string, secondaryClassificationName?: string): Promise<ILIB_ClassificationIndex | undefined>;",
                            "return": [
                                "Promise<ILIB_ClassificationIndex | undefined>",
                                "Classification Index",
                                "The classification index contains the UUID of the classification. For details, please refer to ILIB_ClassificationIndex"
                            ]
                        },
                        {
                            "Method": "getNameByIndex(classificationIndex)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets the name of the category for the specified index",
                            "link": "pro-api.lib_classification.getnamebyindex.html",
                            "Parameters": [
                                {
                                    "Parameter": "classificationIndex",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "Classification Index",
                                    "link": "pro-api.ilib_classificationindex.html"
                                }
                            ],
                            "Declaration": "getNameByIndex(classificationIndex: ILIB_ClassificationIndex): Promise<{\n        primaryClassificationName: string;\n        secondaryClassificationName?: string | undefined;\n    } | undefined>;",
                            "return": [
                                "Promise<{ primaryClassificationName: string; secondaryClassificationName?: string | undefined; } | undefined>",
                                "Name of two-level classification"
                            ]
                        },
                        {
                            "Method": "getNameByUuid(libraryUuid, libraryType, primaryClassificationUuid, secondaryClassificationUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets the name of the category for the specified UUID",
                            "link": "pro-api.lib_classification.getnamebyuuid.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryType",
                                    "Type": "ELIB_LibraryType",
                                    "Description": "Library Type",
                                    "link": "pro-api.elib_librarytype.html"
                                },
                                {
                                    "Parameter": "primaryClassificationUuid",
                                    "Type": "string",
                                    "Description": "Level 1 classification UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "secondaryClassificationUuid",
                                    "Type": "string",
                                    "Description": "(Optional) Secondary classification UUID. If not specified, only the first-level classification information will be obtained.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getNameByUuid(libraryUuid: string, libraryType: ELIB_LibraryType, primaryClassificationUuid: string, secondaryClassificationUuid?: string): Promise<{\n        primaryClassificationName: string;\n        secondaryClassificationName?: string | undefined;\n    } | undefined>;",
                            "return": [
                                "Promise<{ primaryClassificationName: string; secondaryClassificationName?: string | undefined; } | undefined>",
                                "Name of two-level classification"
                            ]
                        }
                    ]
                },
                "LIB_Device": {
                    "description": "Integrated Library / Device Class",
                    "url": "./pro-api.lib_device.html",
                    "Signature": "export declare class LIB_Device",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copy(deviceUuid, libraryUuid, targetLibraryUuid, targetClassification, newDeviceName)",
                            "Modifiers": "",
                            "Description": "(BETA) Replicating Devices",
                            "link": "pro-api.lib_device.copy.html",
                            "Parameters": [
                                {
                                    "Parameter": "deviceUuid",
                                    "Type": "string",
                                    "Description": "Device UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "targetLibraryUuid",
                                    "Type": "string",
                                    "Description": "Target library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "targetClassification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Classification in the target library",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "newDeviceName",
                                    "Type": "string",
                                    "Description": "(Optional) New device name, if there is a duplicate device in the target library, it will cause copying failure",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copy(deviceUuid: string, libraryUuid: string, targetLibraryUuid: string, targetClassification?: ILIB_ClassificationIndex, newDeviceName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of new devices in the target library"
                            ]
                        },
                        {
                            "Method": "create(libraryUuid, deviceName, classification, association, description, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a device",
                            "link": "pro-api.lib_device.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "deviceName",
                                    "Type": "string",
                                    "Description": "Device name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "association",
                                    "Type": "{ symbolType?: ELIB_SymbolType; symbolUuid?: string; symbol?: { uuid: string; libraryUuid: string; }; footprintUuid?: string; footprint?: { uuid: string; libraryUuid: string; }; model3D?: { uuid: string; libraryUuid: string; }; imageData?: File | Blob; }",
                                    "Description": "(Optional) Associate symbols, encapsulations, and images. If you specify symbolType, you will create a new symbol. If you do not create a new symbol, you will not specify a symbol. However, please note that if you do not create a new symbol or specify the association information of the symbol, you will not be able to create a device.",
                                    "link": "pro-api.elib_symboltype.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "ILIB_DeviceExtendPropertyItem",
                                    "Description": "(Optional) Other parameters, only designer, addIntoBom, addIntoPcb has default values",
                                    "link": "pro-api.ilib_deviceextendpropertyitem.html"
                                }
                            ],
                            "Declaration": "create(libraryUuid: string, deviceName: string, classification?: ILIB_ClassificationIndex, association?: {\n        symbolType?: ELIB_SymbolType;\n        symbolUuid?: string;\n        symbol?: {\n            uuid: string;\n            libraryUuid: string;\n        };\n        footprintUuid?: string;\n        footprint?: {\n            uuid: string;\n            libraryUuid: string;\n        };\n        model3D?: {\n            uuid: string;\n            libraryUuid: string;\n        };\n        imageData?: File | Blob;\n    }, description?: string, property?: ILIB_DeviceExtendPropertyItem): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Device UUID"
                            ]
                        },
                        {
                            "Method": "delete(deviceUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove device",
                            "link": "pro-api.lib_device.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "deviceUuid",
                                    "Type": "string",
                                    "Description": "Device UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "delete(deviceUuid: string, libraryUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "get(deviceUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all the properties of the device",
                            "link": "pro-api.lib_device.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "deviceUuid",
                                    "Type": "string",
                                    "Description": "Device UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "get(deviceUuid: string, libraryUuid?: string): Promise<ILIB_DeviceItem | undefined>;",
                            "return": [
                                "Promise<ILIB_DeviceItem | undefined>",
                                "Device Properties"
                            ]
                        },
                        {
                            "Method": "getByLcscIds(lcscIds, libraryUuid, allowMultiMatch)",
                            "Modifiers": "",
                            "Description": "(BETA) Use License C number to obtain the device",
                            "link": "pro-api.lib_device.getbylcscids.html",
                            "Parameters": [
                                {
                                    "Parameter": "lcscIds",
                                    "Type": "string",
                                    "Description": "Lichuang C number",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "allowMultiMatch",
                                    "Type": "T",
                                    "Description": "(Optional) Whether a single C-number is allowed to match multiple results",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getByLcscIds<T extends boolean>(lcscIds: string, libraryUuid?: string, allowMultiMatch?: T): Promise<T extends true ? ILIB_DeviceSearchItem | undefined : Array<ILIB_DeviceSearchItem>>;",
                            "return": [
                                "Promise<T extends true ? ILIB_DeviceSearchItem | undefined : Array<ILIB_DeviceSearchItem>>",
                                "Searched device properties",
                                "By default, if multiple devices with the same C number are matched within the same library, only the first result will be returned;",
                                "If you want to return multiple results, set allowMultiMatch to true;",
                                "This interface cannot be used in the private deployment environment"
                            ]
                        },
                        {
                            "Method": "getByLcscIds(lcscIds, libraryUuid, allowMultiMatch)",
                            "Modifiers": "",
                            "Description": "(BETA) Bulk acquisition of devices using License C number",
                            "link": "pro-api.lib_device.getbylcscids_1.html",
                            "Parameters": [
                                {
                                    "Parameter": "lcscIds",
                                    "Type": "Array<string>",
                                    "Description": "Lichuang C numbered array",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "allowMultiMatch",
                                    "Type": "boolean",
                                    "Description": "(Optional) Whether a single C-number is allowed to match multiple results",
                                    "link": ""
                                }
                            ],
                            "Declaration": "getByLcscIds(lcscIds: Array<string>, libraryUuid?: string, allowMultiMatch?: boolean): Promise<Array<ILIB_DeviceSearchItem>>;",
                            "return": [
                                "Promise<Array<ILIB_DeviceSearchItem>>",
                                "List of searched device properties",
                                "By default, if multiple devices with the same C number are matched within the same library, only the first result will be returned;",
                                "If you want to return multiple results, set allowMultiMatch to true;",
                                "This interface cannot be used in the private deployment environment"
                            ]
                        },
                        {
                            "Method": "modify(deviceUuid, libraryUuid, deviceName, classification, association, description, property)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the device",
                            "link": "pro-api.lib_device.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "deviceUuid",
                                    "Type": "string",
                                    "Description": "Device UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "deviceName",
                                    "Type": "string",
                                    "Description": "(Optional) Device Name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex | null",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "association",
                                    "Type": "{ symbolUuid?: string; symbol?: { uuid: string; libraryUuid: string; }; footprintUuid?: string | null; footprint?: { uuid: string; libraryUuid: string; } | null; model3D?: { uuid: string; libraryUuid: string; } | null; imageData?: File | Blob | null; }",
                                    "Description": "(Optional) Associate symbols, encapsulations, images",
                                    "link": ""
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string | null",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                },
                                {
                                    "Parameter": "property",
                                    "Type": "{ name?: string | null; designator?: string; addIntoBom?: boolean; addIntoPcb?: boolean; net?: string; manufacturer?: string | null; manufacturerId?: string | null; supplier?: string | null; supplierId?: string | null; otherProperty?: { [key: string]: boolean | number | string | undefined | null; }; }",
                                    "Description": "(Optional) Other parameters",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(deviceUuid: string, libraryUuid: string, deviceName?: string, classification?: ILIB_ClassificationIndex | null, association?: {\n        symbolUuid?: string;\n        symbol?: {\n            uuid: string;\n            libraryUuid: string;\n        };\n        footprintUuid?: string | null;\n        footprint?: {\n            uuid: string;\n            libraryUuid: string;\n        } | null;\n        model3D?: {\n            uuid: string;\n            libraryUuid: string;\n        } | null;\n        imageData?: File | Blob | null;\n    }, description?: string | null, property?: {\n        name?: string | null;\n        designator?: string;\n        addIntoBom?: boolean;\n        addIntoPcb?: boolean;\n        net?: string;\n        manufacturer?: string | null;\n        manufacturerId?: string | null;\n        supplier?: string | null;\n        supplierId?: string | null;\n        otherProperty?: {\n            [key: string]: boolean | number | string | undefined | null;\n        };\n    }): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If you want to clear some properties, set their value to null"
                            ]
                        },
                        {
                            "Method": "search(key, libraryUuid, classification, symbolType, itemsOfPage, page)",
                            "Modifiers": "",
                            "Description": "(BETA) Search Devices",
                            "link": "pro-api.lib_device.search.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Search for keywords",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) category, default to all",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "symbolType",
                                    "Type": "ELIB_SymbolType",
                                    "Description": "(Optional) symbol type, default to all",
                                    "link": "pro-api.elib_symboltype.html"
                                },
                                {
                                    "Parameter": "itemsOfPage",
                                    "Type": "number",
                                    "Description": "(Optional) Number of search results for one page",
                                    "link": ""
                                },
                                {
                                    "Parameter": "page",
                                    "Type": "number",
                                    "Description": "(Optional) Page number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "search(key: string, libraryUuid?: string, classification?: ILIB_ClassificationIndex, symbolType?: ELIB_SymbolType, itemsOfPage?: number, page?: number): Promise<Array<ILIB_DeviceSearchItem>>;",
                            "return": [
                                "Promise<Array<ILIB_DeviceSearchItem>>",
                                "List of searched device properties"
                            ]
                        }
                    ]
                },
                "LIB_Symbol": {
                    "description": "Integrated Library / Symbol Class",
                    "url": "./pro-api.lib_symbol.html",
                    "Signature": "export declare class LIB_Symbol",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copy(symbolUuid, libraryUuid, targetLibraryUuid, targetClassification, newSymbolName)",
                            "Modifiers": "",
                            "Description": "(BETA) Copy symbols",
                            "link": "pro-api.lib_symbol.copy.html",
                            "Parameters": [
                                {
                                    "Parameter": "symbolUuid",
                                    "Type": "string",
                                    "Description": "Symbol UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "targetLibraryUuid",
                                    "Type": "string",
                                    "Description": "Target library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "targetClassification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Classification in the target library",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "newSymbolName",
                                    "Type": "string",
                                    "Description": "(Optional) New symbol name. If there is a duplicate symbol in the target library, it will cause copying to fail.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copy(symbolUuid: string, libraryUuid: string, targetLibraryUuid: string, targetClassification?: ILIB_ClassificationIndex, newSymbolName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of new symbols in the target library"
                            ]
                        },
                        {
                            "Method": "create(libraryUuid, symbolName, classification, symbolType, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Create symbols",
                            "link": "pro-api.lib_symbol.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "symbolName",
                                    "Type": "string",
                                    "Description": "Symbol name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "symbolType",
                                    "Type": "ELIB_SymbolType",
                                    "Description": "(Optional) Symbol Type",
                                    "link": "pro-api.elib_symboltype.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(libraryUuid: string, symbolName: string, classification?: ILIB_ClassificationIndex, symbolType?: ELIB_SymbolType, description?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Symbol UUID"
                            ]
                        },
                        {
                            "Method": "delete(symbolUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete symbols",
                            "link": "pro-api.lib_symbol.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "symbolUuid",
                                    "Type": "string",
                                    "Description": "Symbol UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "delete(symbolUuid: string, libraryUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "get(symbolUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all attributes of a symbol",
                            "link": "pro-api.lib_symbol.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "symbolUuid",
                                    "Type": "string",
                                    "Description": "Symbol UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "get(symbolUuid: string, libraryUuid?: string): Promise<ILIB_SymbolItem | undefined>;",
                            "return": [
                                "Promise<ILIB_SymbolItem | undefined>",
                                "Symbol properties"
                            ]
                        },
                        {
                            "Method": "modify(symbolUuid, libraryUuid, symbolName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify symbols",
                            "link": "pro-api.lib_symbol.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "symbolUuid",
                                    "Type": "string",
                                    "Description": "Symbol UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "symbolName",
                                    "Type": "string",
                                    "Description": "(Optional) Symbol Name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex | null",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string | null",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(symbolUuid: string, libraryUuid: string, symbolName?: string, classification?: ILIB_ClassificationIndex | null, description?: string | null): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If you want to clear some properties, set their value to null"
                            ]
                        },
                        {
                            "Method": "openInEditor(symbolUuid, libraryUuid, splitScreenId)",
                            "Modifiers": "",
                            "Description": "(BETA) Open a document in the editor",
                            "link": "pro-api.lib_symbol.openineditor.html",
                            "Parameters": [
                                {
                                    "Parameter": "symbolUuid",
                                    "Type": "string",
                                    "Description": "Symbol UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "(Optional) Split Screen ID. If you do not fill in, it will be opened in the split screen where the focus is entered by default. You can use the interface in DMT_EditorControl to obtain it.",
                                    "link": "pro-api.dmt_editorcontrol.html"
                                }
                            ],
                            "Declaration": "openInEditor(symbolUuid: string, libraryUuid: string, splitScreenId?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Tag page ID, corresponding to IDMT_EditorTabItem.tabId, you can use DMT_EditorControl.getSplitScreenIdByTabId() to obtain the split screen ID"
                            ]
                        },
                        {
                            "Method": "search(key, libraryUuid, classification, symbolType, itemsOfPage, page)",
                            "Modifiers": "",
                            "Description": "(BETA) Search Symbols",
                            "link": "pro-api.lib_symbol.search.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Search for keywords",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) category, default to all",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "symbolType",
                                    "Type": "ELIB_SymbolType",
                                    "Description": "(Optional) symbol type, default to all",
                                    "link": "pro-api.elib_symboltype.html"
                                },
                                {
                                    "Parameter": "itemsOfPage",
                                    "Type": "number",
                                    "Description": "(Optional) Number of search results for one page",
                                    "link": ""
                                },
                                {
                                    "Parameter": "page",
                                    "Type": "number",
                                    "Description": "(Optional) Page number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "search(key: string, libraryUuid?: string, classification?: ILIB_ClassificationIndex, symbolType?: ELIB_SymbolType, itemsOfPage?: number, page?: number): Promise<Array<ILIB_SymbolSearchItem>>;",
                            "return": [
                                "Promise<Array<ILIB_SymbolSearchItem>>",
                                "Searched symbol attribute list"
                            ]
                        },
                        {
                            "Method": "updateDocumentSource(symbolUuid, libraryUuid, documentSource)",
                            "Modifiers": "",
                            "Description": "(BETA) Update the document source code of symbols",
                            "link": "pro-api.lib_symbol.updatedocumentsource.html",
                            "Parameters": [
                                {
                                    "Parameter": "symbolUuid",
                                    "Type": "string",
                                    "Description": "Symbol UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "documentSource",
                                    "Type": "string",
                                    "Description": "Document source code",
                                    "link": ""
                                }
                            ],
                            "Declaration": "updateDocumentSource(symbolUuid: string, libraryUuid: string, documentSource: string): Promise<boolean | undefined>;",
                            "return": [
                                "Promise<boolean | undefined>",
                                "Whether the update was successful"
                            ]
                        }
                    ]
                },
                "LIB_Footprint": {
                    "description": "Integrated Library / Footprint Class",
                    "url": "./pro-api.lib_footprint.html",
                    "Signature": "export declare class LIB_Footprint",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copy(footprintUuid, libraryUuid, targetLibraryUuid, targetClassification, newFootprintName)",
                            "Modifiers": "",
                            "Description": "(BETA) Copy Package",
                            "link": "pro-api.lib_footprint.copy.html",
                            "Parameters": [
                                {
                                    "Parameter": "footprintUuid",
                                    "Type": "string",
                                    "Description": "Encapsulation UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "targetLibraryUuid",
                                    "Type": "string",
                                    "Description": "Target library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "targetClassification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Classification in the target library",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "newFootprintName",
                                    "Type": "string",
                                    "Description": "(Optional) New encapsulation name. If there is a duplicate encapsulation in the target library, it will cause replication failure",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copy(footprintUuid: string, libraryUuid: string, targetLibraryUuid: string, targetClassification?: ILIB_ClassificationIndex, newFootprintName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Newly encapsulated UUID in the target library"
                            ]
                        },
                        {
                            "Method": "create(libraryUuid, footprintName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a package",
                            "link": "pro-api.lib_footprint.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "footprintName",
                                    "Type": "string",
                                    "Description": "Encapsulation name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(libraryUuid: string, footprintName: string, classification?: ILIB_ClassificationIndex, description?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Encapsulation UUID"
                            ]
                        },
                        {
                            "Method": "delete(footprintUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Remove Encapsulation",
                            "link": "pro-api.lib_footprint.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "footprintUuid",
                                    "Type": "string",
                                    "Description": "Encapsulation UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "delete(footprintUuid: string, libraryUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "get(footprintUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all properties of the encapsulated",
                            "link": "pro-api.lib_footprint.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "footprintUuid",
                                    "Type": "string",
                                    "Description": "Encapsulation UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "get(footprintUuid: string, libraryUuid?: string): Promise<ILIB_FootprintItem | undefined>;",
                            "return": [
                                "Promise<ILIB_FootprintItem | undefined>",
                                "Encapsulation properties"
                            ]
                        },
                        {
                            "Method": "modify(footprintUuid, libraryUuid, footprintName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the package",
                            "link": "pro-api.lib_footprint.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "footprintUuid",
                                    "Type": "string",
                                    "Description": "Encapsulation UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "footprintName",
                                    "Type": "string",
                                    "Description": "(Optional) Encapsulation name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex | null",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string | null",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(footprintUuid: string, libraryUuid: string, footprintName?: string, classification?: ILIB_ClassificationIndex | null, description?: string | null): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If you want to clear some properties, set their value to null"
                            ]
                        },
                        {
                            "Method": "openInEditor(footprintUuid, libraryUuid, splitScreenId)",
                            "Modifiers": "",
                            "Description": "(BETA) Open a document in the editor",
                            "link": "pro-api.lib_footprint.openineditor.html",
                            "Parameters": [
                                {
                                    "Parameter": "footprintUuid",
                                    "Type": "string",
                                    "Description": "Encapsulation UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "(Optional) Split Screen ID. If you do not fill in, it will be opened in the split screen where the focus is entered by default. You can use the interface in DMT_EditorControl to obtain it.",
                                    "link": "pro-api.dmt_editorcontrol.html"
                                }
                            ],
                            "Declaration": "openInEditor(footprintUuid: string, libraryUuid: string, splitScreenId?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Tag page ID, corresponding to IDMT_EditorTabItem.tabId, you can use DMT_EditorControl.getSplitScreenIdByTabId() to obtain the split screen ID"
                            ]
                        },
                        {
                            "Method": "search(key, libraryUuid, classification, itemsOfPage, page)",
                            "Modifiers": "",
                            "Description": "(BETA) Search Package",
                            "link": "pro-api.lib_footprint.search.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Search for keywords",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) category, default to all",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "itemsOfPage",
                                    "Type": "number",
                                    "Description": "(Optional) Number of search results for one page",
                                    "link": ""
                                },
                                {
                                    "Parameter": "page",
                                    "Type": "number",
                                    "Description": "(Optional) Page number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "search(key: string, libraryUuid?: string, classification?: ILIB_ClassificationIndex, itemsOfPage?: number, page?: number): Promise<Array<ILIB_FootprintSearchItem>>;",
                            "return": [
                                "Promise<Array<ILIB_FootprintSearchItem>>",
                                "Searched encapsulation attribute list"
                            ]
                        },
                        {
                            "Method": "updateDocumentSource(footprintUuid, libraryUuid, documentSource)",
                            "Modifiers": "",
                            "Description": "(BETA) Update the encapsulated document source code",
                            "link": "pro-api.lib_footprint.updatedocumentsource.html",
                            "Parameters": [
                                {
                                    "Parameter": "footprintUuid",
                                    "Type": "string",
                                    "Description": "Encapsulation UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "documentSource",
                                    "Type": "string",
                                    "Description": "Document source code",
                                    "link": ""
                                }
                            ],
                            "Declaration": "updateDocumentSource(footprintUuid: string, libraryUuid: string, documentSource: string): Promise<boolean | undefined>;",
                            "return": [
                                "Promise<boolean | undefined>",
                                "Whether the update was successful"
                            ]
                        }
                    ]
                },
                "LIB_3DModel": {
                    "description": "Integrated Library / 3D Model Class",
                    "url": "./pro-api.lib_3dmodel.html",
                    "Signature": "export declare class LIB_3DModel",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copy(modelUuid, libraryUuid, targetLibraryUuid, targetClassification, newModelName)",
                            "Modifiers": "",
                            "Description": "(BETA) Copy 3D Model",
                            "link": "pro-api.lib_3dmodel.copy.html",
                            "Parameters": [
                                {
                                    "Parameter": "modelUuid",
                                    "Type": "string",
                                    "Description": "3D Model UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "targetLibraryUuid",
                                    "Type": "string",
                                    "Description": "Target library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "targetClassification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Classification in the target library",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "newModelName",
                                    "Type": "string",
                                    "Description": "(Optional) New 3D model name. If there is a duplicate name in the target library, the copying will fail",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copy(modelUuid: string, libraryUuid: string, targetLibraryUuid: string, targetClassification?: ILIB_ClassificationIndex, newModelName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of new 3D models in the target library"
                            ]
                        },
                        {
                            "Method": "create(libraryUuid, modelFile, classification, unit)",
                            "Modifiers": "",
                            "Description": "(BETA) Create 3D models",
                            "link": "pro-api.lib_3dmodel.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "modelFile",
                                    "Type": "Blob",
                                    "Description": "3D model file data",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "unit",
                                    "Type": "ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.METER | ESYS_Unit.MIL | ESYS_Unit.INCH",
                                    "Description": "(Optional)",
                                    "link": "pro-api.esys_unit.html"
                                }
                            ],
                            "Declaration": "create(libraryUuid: string, modelFile: Blob, classification?: ILIB_ClassificationIndex, unit?: ESYS_Unit.MILLIMETER | ESYS_Unit.CENTIMETER | ESYS_Unit.METER | ESYS_Unit.MIL | ESYS_Unit.INCH): Promise<string[] | undefined>;",
                            "return": [
                                "Promise<string[] | undefined>",
                                "3D Model UUID"
                            ]
                        },
                        {
                            "Method": "delete(modelUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete 3D Models",
                            "link": "pro-api.lib_3dmodel.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "modelUuid",
                                    "Type": "string",
                                    "Description": "3D Model UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "delete(modelUuid: string, libraryUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "get(modelUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all properties of a 3D model",
                            "link": "pro-api.lib_3dmodel.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "modelUuid",
                                    "Type": "string",
                                    "Description": "3D Model UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "get(modelUuid: string, libraryUuid?: string): Promise<ILIB_3DModelItem | undefined>;",
                            "return": [
                                "Promise<ILIB_3DModelItem | undefined>",
                                "3D Model Properties"
                            ]
                        },
                        {
                            "Method": "modify(modelUuid, libraryUuid, modelName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify 3D Models",
                            "link": "pro-api.lib_3dmodel.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "modelUuid",
                                    "Type": "string",
                                    "Description": "3D Model UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "modelName",
                                    "Type": "string",
                                    "Description": "(Optional) 3D model name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex | null",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string | null",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(modelUuid: string, libraryUuid: string, modelName?: string, classification?: ILIB_ClassificationIndex | null, description?: string | null): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If you want to clear some properties, set their value to null"
                            ]
                        },
                        {
                            "Method": "search(key, libraryUuid, classification, itemsOfPage, page)",
                            "Modifiers": "",
                            "Description": "(BETA) Search for 3D Models",
                            "link": "pro-api.lib_3dmodel.search.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Search for keywords",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) category, default to all",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "itemsOfPage",
                                    "Type": "number",
                                    "Description": "(Optional) Number of search results for one page",
                                    "link": ""
                                },
                                {
                                    "Parameter": "page",
                                    "Type": "number",
                                    "Description": "(Optional) Page number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "search(key: string, libraryUuid?: string, classification?: ILIB_ClassificationIndex, itemsOfPage?: number, page?: number): Promise<Array<ILIB_3DModelSearchItem>>;",
                            "return": [
                                "Promise<Array<ILIB_3DModelSearchItem>>",
                                "Searched list of 3D model attributes"
                            ]
                        }
                    ]
                },
                "LIB_PanelLibrary": {
                    "description": "Integrated Library / Panel Library Class",
                    "url": "./pro-api.lib_panellibrary.html",
                    "Signature": "export declare class LIB_PanelLibrary",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copy(panelLibraryUuid, libraryUuid, targetLibraryUuid, targetClassification, newPanelLibraryName)",
                            "Modifiers": "",
                            "Description": "(BETA) Copy Panel Library",
                            "link": "pro-api.lib_panellibrary.copy.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelLibraryUuid",
                                    "Type": "string",
                                    "Description": "Panel Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "targetLibraryUuid",
                                    "Type": "string",
                                    "Description": "Target library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "targetClassification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Classification in the target library",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "newPanelLibraryName",
                                    "Type": "string",
                                    "Description": "(Optional) New panel library name. If there is a duplicate panel library in the target library, it will cause copying to fail.",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copy(panelLibraryUuid: string, libraryUuid: string, targetLibraryUuid: string, targetClassification?: ILIB_ClassificationIndex, newPanelLibraryName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of the new panel library in the target library"
                            ]
                        },
                        {
                            "Method": "create(libraryUuid, panelLibraryName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Create a panel library",
                            "link": "pro-api.lib_panellibrary.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "panelLibraryName",
                                    "Type": "string",
                                    "Description": "Panel library name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(libraryUuid: string, panelLibraryName: string, classification?: ILIB_ClassificationIndex, description?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Panel Library UUID"
                            ]
                        },
                        {
                            "Method": "delete(panelLibraryUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete the panel library",
                            "link": "pro-api.lib_panellibrary.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelLibraryUuid",
                                    "Type": "string",
                                    "Description": "Panel Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "delete(panelLibraryUuid: string, libraryUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "get(panelLibraryUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all properties of the panel library",
                            "link": "pro-api.lib_panellibrary.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelLibraryUuid",
                                    "Type": "string",
                                    "Description": "Panel Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "get(panelLibraryUuid: string, libraryUuid?: string): Promise<ILIB_PanelLibraryItem | undefined>;",
                            "return": [
                                "Promise<ILIB_PanelLibraryItem | undefined>",
                                "Panel library properties"
                            ]
                        },
                        {
                            "Method": "modify(panelLibraryUuid, libraryUuid, panelLibraryName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify the panel library",
                            "link": "pro-api.lib_panellibrary.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelLibraryUuid",
                                    "Type": "string",
                                    "Description": "Panel Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "panelLibraryName",
                                    "Type": "string",
                                    "Description": "(Optional) Panel Library Name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex | null",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string | null",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(panelLibraryUuid: string, libraryUuid: string, panelLibraryName?: string, classification?: ILIB_ClassificationIndex | null, description?: string | null): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If you want to clear some properties, set their value to null"
                            ]
                        },
                        {
                            "Method": "openInEditor(panelLibraryUuid, libraryUuid, splitScreenId)",
                            "Modifiers": "",
                            "Description": "(BETA) Open a document in the editor",
                            "link": "pro-api.lib_panellibrary.openineditor.html",
                            "Parameters": [
                                {
                                    "Parameter": "panelLibraryUuid",
                                    "Type": "string",
                                    "Description": "Panel Library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "(Optional) Split Screen ID. If you do not fill in, it will be opened in the split screen where the focus is entered by default. You can use the interface in DMT_EditorControl to obtain it.",
                                    "link": "pro-api.dmt_editorcontrol.html"
                                }
                            ],
                            "Declaration": "openInEditor(panelLibraryUuid: string, libraryUuid: string, splitScreenId?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Tag page ID, corresponding to IDMT_EditorTabItem.tabId, you can use DMT_EditorControl.getSplitScreenIdByTabId() to obtain the split screen ID"
                            ]
                        },
                        {
                            "Method": "search(key, libraryUuid, classification, itemsOfPage, page)",
                            "Modifiers": "",
                            "Description": "(BETA) Search Panel Library",
                            "link": "pro-api.lib_panellibrary.search.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Search for keywords",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) category, default to all",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "itemsOfPage",
                                    "Type": "number",
                                    "Description": "(Optional) Number of search results for one page",
                                    "link": ""
                                },
                                {
                                    "Parameter": "page",
                                    "Type": "number",
                                    "Description": "(Optional) Page number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "search(key: string, libraryUuid?: string, classification?: ILIB_ClassificationIndex, itemsOfPage?: number, page?: number): Promise<Array<ILIB_PanelLibrarySearchItem>>;",
                            "return": [
                                "Promise<Array<ILIB_PanelLibrarySearchItem>>",
                                "Searched Panel Library Properties List"
                            ]
                        }
                    ]
                },
                "LIB_Cbb": {
                    "description": "Integrated Library / Reusable Module Class",
                    "url": "./pro-api.lib_cbb.html",
                    "Signature": "export declare class LIB_Cbb",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Method": "copy(cbbUuid, libraryUuid, targetLibraryUuid, targetClassification, newCbbName)",
                            "Modifiers": "",
                            "Description": "(BETA) Replication Reuse Module",
                            "link": "pro-api.lib_cbb.copy.html",
                            "Parameters": [
                                {
                                    "Parameter": "cbbUuid",
                                    "Type": "string",
                                    "Description": "Multiplexing module UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "targetLibraryUuid",
                                    "Type": "string",
                                    "Description": "Target library UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "targetClassification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Classification in the target library",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "newCbbName",
                                    "Type": "string",
                                    "Description": "(Optional) New multiplexing module name. If there is a duplicate module in the target library, it will cause replication failure",
                                    "link": ""
                                }
                            ],
                            "Declaration": "copy(cbbUuid: string, libraryUuid: string, targetLibraryUuid: string, targetClassification?: ILIB_ClassificationIndex, newCbbName?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "UUID of new multiplexed modules in the target library"
                            ]
                        },
                        {
                            "Method": "create(libraryUuid, cbbName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Create multiplexed modules",
                            "link": "pro-api.lib_cbb.create.html",
                            "Parameters": [
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "cbbName",
                                    "Type": "string",
                                    "Description": "Multiplex module name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "create(libraryUuid: string, cbbName: string, classification?: ILIB_ClassificationIndex, description?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Multiplexing module UUID"
                            ]
                        },
                        {
                            "Method": "delete(cbbUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Delete multiplexed modules",
                            "link": "pro-api.lib_cbb.delete.html",
                            "Parameters": [
                                {
                                    "Parameter": "cbbUuid",
                                    "Type": "string",
                                    "Description": "Multiplexing module UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "delete(cbbUuid: string, libraryUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?"
                            ]
                        },
                        {
                            "Method": "get(cbbUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Gets all properties of the multiplexed module",
                            "link": "pro-api.lib_cbb.get.html",
                            "Parameters": [
                                {
                                    "Parameter": "cbbUuid",
                                    "Type": "string",
                                    "Description": "Multiplexing module UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "get(cbbUuid: string, libraryUuid?: string): Promise<ILIB_CbbItem | undefined>;",
                            "return": [
                                "Promise<ILIB_CbbItem | undefined>",
                                "Multiplex module properties"
                            ]
                        },
                        {
                            "Method": "modify(cbbUuid, libraryUuid, cbbName, classification, description)",
                            "Modifiers": "",
                            "Description": "(BETA) Modify multiplexed modules",
                            "link": "pro-api.lib_cbb.modify.html",
                            "Parameters": [
                                {
                                    "Parameter": "cbbUuid",
                                    "Type": "string",
                                    "Description": "Multiplexing module UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "cbbName",
                                    "Type": "string",
                                    "Description": "(Optional) Multiplex module name",
                                    "link": ""
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex | null",
                                    "Description": "(Optional) Category",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "description",
                                    "Type": "string | null",
                                    "Description": "(Optional) Description",
                                    "link": ""
                                }
                            ],
                            "Declaration": "modify(cbbUuid: string, libraryUuid: string, cbbName?: string, classification?: ILIB_ClassificationIndex | null, description?: string | null): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "Is the operation successful?",
                                "If you want to clear some properties, set their value to null"
                            ]
                        },
                        {
                            "Method": "openProjectInEditor(cbbUuid, libraryUuid)",
                            "Modifiers": "",
                            "Description": "(BETA) Open the multiplexed module project in the editor",
                            "link": "pro-api.lib_cbb.openprojectineditor.html",
                            "Parameters": [
                                {
                                    "Parameter": "cbbUuid",
                                    "Type": "string",
                                    "Description": "Multiplexing module UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                }
                            ],
                            "Declaration": "openProjectInEditor(cbbUuid: string, libraryUuid: string): Promise<boolean>;",
                            "return": [
                                "Promise<boolean>",
                                "This operation will open the module project on the EDA front end. If other projects have been opened and there are unsaved changes, performing this operation will directly lose all unsaved data."
                            ]
                        },
                        {
                            "Method": "openSymbolInEditor(cbbUuid, libraryUuid, splitScreenId)",
                            "Modifiers": "",
                            "Description": "(BETA) Open multiplexed module symbols in the editor",
                            "link": "pro-api.lib_cbb.opensymbolineditor.html",
                            "Parameters": [
                                {
                                    "Parameter": "cbbUuid",
                                    "Type": "string",
                                    "Description": "Multiplexing module UUID",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "Library UUID can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "splitScreenId",
                                    "Type": "string",
                                    "Description": "(Optional) Split Screen ID. If you do not fill in, it will be opened in the split screen where the focus is entered by default. You can use the interface in DMT_EditorControl to obtain it.",
                                    "link": "pro-api.dmt_editorcontrol.html"
                                }
                            ],
                            "Declaration": "openSymbolInEditor(cbbUuid: string, libraryUuid: string, splitScreenId?: string): Promise<string | undefined>;",
                            "return": [
                                "Promise<string | undefined>",
                                "Tag page ID, corresponding to IDMT_EditorTabItem.tabId, you can use DMT_EditorControl.getSplitScreenIdByTabId() to obtain the split screen ID"
                            ]
                        },
                        {
                            "Method": "search(key, libraryUuid, classification, itemsOfPage, page)",
                            "Modifiers": "",
                            "Description": "(BETA) Search multiplexing module",
                            "link": "pro-api.lib_cbb.search.html",
                            "Parameters": [
                                {
                                    "Parameter": "key",
                                    "Type": "string",
                                    "Description": "Search for keywords",
                                    "link": ""
                                },
                                {
                                    "Parameter": "libraryUuid",
                                    "Type": "string",
                                    "Description": "(Optional) library UUID, defaults to system library, can be obtained using the interface in LIB_LibrariesList",
                                    "link": "pro-api.lib_librarieslist.html"
                                },
                                {
                                    "Parameter": "classification",
                                    "Type": "ILIB_ClassificationIndex",
                                    "Description": "(Optional) category, default to all",
                                    "link": "pro-api.ilib_classificationindex.html"
                                },
                                {
                                    "Parameter": "itemsOfPage",
                                    "Type": "number",
                                    "Description": "(Optional) Number of search results for one page",
                                    "link": ""
                                },
                                {
                                    "Parameter": "page",
                                    "Type": "number",
                                    "Description": "(Optional) Page number",
                                    "link": ""
                                }
                            ],
                            "Declaration": "search(key: string, libraryUuid?: string, classification?: ILIB_ClassificationIndex, itemsOfPage?: number, page?: number): Promise<Array<ILIB_CbbSearchItem>>;",
                            "return": [
                                "Promise<Array<ILIB_CbbSearchItem>>",
                                "Searched multiplexed module attribute list"
                            ]
                        }
                    ]
                }
            },
            "Enumerations": {
                "ELIB_LibraryType": {
                    "description": "Integrated Library Type",
                    "url": "./pro-api.elib_librarytype.html",
                    "Signature": "export declare enum ELIB_LibraryType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "CBB",
                            "Value": "\"1\"",
                            "Description": "Multiplexing module",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DEVICE",
                            "Value": "\"3\"",
                            "Description": "Devices",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "FOOTPRINT",
                            "Value": "\"4\"",
                            "Description": "Package",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "MODEL",
                            "Value": "\"5\"",
                            "Description": "3D Model",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "PANEL_LIBRARY",
                            "Value": "\"29\"",
                            "Description": "Panel library",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SYMBOL",
                            "Value": "\"2\"",
                            "Description": "symbol",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ELIB_DeviceJlcLibraryCategory": {
                    "description": "JLC SMT Library Category",
                    "url": "./pro-api.elib_devicejlclibrarycategory.html",
                    "Signature": "export declare enum ELIB_DeviceJlcLibraryCategory",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "EXTEND",
                            "Value": "\"extend\"",
                            "Description": "Extended library",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "STANDARD",
                            "Value": "\"standard\"",
                            "Description": "Basic library",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                },
                "ELIB_SymbolType": {
                    "description": "Symbol Type",
                    "url": "./pro-api.elib_symboltype.html",
                    "Signature": "export declare enum ELIB_SymbolType",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Member": "COMPONENT",
                            "Value": "2",
                            "Description": "element",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "DRAWING",
                            "Value": "20",
                            "Description": "drawing",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NET_FLAG",
                            "Value": "18",
                            "Description": "Network Identification",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NET_PORT",
                            "Value": "19",
                            "Description": "Network port",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "NON_ELECTRICAL",
                            "Value": "21",
                            "Description": "No electricity",
                            "link": "",
                            "Parameters": ""
                        },
                        {
                            "Member": "SHORT_CIRCUIT_FLAG",
                            "Value": "22",
                            "Description": "Short-circuit logo",
                            "link": "",
                            "Parameters": ""
                        }
                    ]
                }
            },
            "Interfaces": {
                "ILIB_3DModelItem": {
                    "description": "3D Model Properties",
                    "url": "./pro-api.ilib_3dmodelitem.html",
                    "Signature": "export interface ILIB_3DModelItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_3dmodelitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "libraryType",
                            "Modifiers": "readonly",
                            "Type": "ELIB_LibraryType.MODEL",
                            "Description": "Library Type",
                            "link": "pro-api.elib_librarytype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_LibraryType"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_3dmodelitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "3D model name",
                            "link": "pro-api.ilib_3dmodelitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "3D Model UUID",
                            "link": "pro-api.ilib_3dmodelitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_3DModelSearchItem": {
                    "description": "Searched 3D Model Properties",
                    "url": "./pro-api.ilib_3dmodelsearchitem.html",
                    "Signature": "export interface ILIB_3DModelSearchItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "ascription",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Attribution",
                            "link": "pro-api.ilib_3dmodelsearchitem.ascription.html",
                            "Parameters": "",
                            "Declaration": "ascription: string;"
                        },
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_3dmodelsearchitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "lastModifiedBy",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Previous modified",
                            "link": "pro-api.ilib_3dmodelsearchitem.lastmodifiedby.html",
                            "Parameters": "",
                            "Declaration": "lastModifiedBy: string;"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_3dmodelsearchitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "3D model name",
                            "link": "pro-api.ilib_3dmodelsearchitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "ordinal",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Sort",
                            "link": "pro-api.ilib_3dmodelsearchitem.ordinal.html",
                            "Parameters": "",
                            "Declaration": "ordinal: number;"
                        },
                        {
                            "Property": "updateTimestamp",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Update time stamp",
                            "link": "pro-api.ilib_3dmodelsearchitem.updatetimestamp.html",
                            "Parameters": "",
                            "Declaration": "updateTimestamp: number;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "3D Model UUID",
                            "link": "pro-api.ilib_3dmodelsearchitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_CbbItem": {
                    "description": "Reusable Module Properties",
                    "url": "./pro-api.ilib_cbbitem.html",
                    "Signature": "export interface ILIB_CbbItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_cbbitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "libraryType",
                            "Modifiers": "readonly",
                            "Type": "ELIB_LibraryType.CBB",
                            "Description": "Library Type",
                            "link": "pro-api.elib_librarytype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_LibraryType"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_cbbitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Multiplex module name",
                            "link": "pro-api.ilib_cbbitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Multiplexing module UUID",
                            "link": "pro-api.ilib_cbbitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_CbbSearchItem": {
                    "description": "Searched reusable module properties",
                    "url": "./pro-api.ilib_cbbsearchitem.html",
                    "Signature": "export interface ILIB_CbbSearchItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "ascription",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Attribution",
                            "link": "pro-api.ilib_cbbsearchitem.ascription.html",
                            "Parameters": "",
                            "Declaration": "ascription: string;"
                        },
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_cbbsearchitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "lastModifiedBy",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Previous modified",
                            "link": "pro-api.ilib_cbbsearchitem.lastmodifiedby.html",
                            "Parameters": "",
                            "Declaration": "lastModifiedBy: string;"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_cbbsearchitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Multiplex module name",
                            "link": "pro-api.ilib_cbbsearchitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "ordinal",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Sort",
                            "link": "pro-api.ilib_cbbsearchitem.ordinal.html",
                            "Parameters": "",
                            "Declaration": "ordinal: number;"
                        },
                        {
                            "Property": "updateTimestamp",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Update time stamp",
                            "link": "pro-api.ilib_cbbsearchitem.updatetimestamp.html",
                            "Parameters": "",
                            "Declaration": "updateTimestamp: number;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Multiplexing module UUID",
                            "link": "pro-api.ilib_cbbsearchitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_ClassificationIndex": {
                    "description": "Classification index",
                    "url": "./pro-api.ilib_classificationindex.html",
                    "Signature": "export interface ILIB_ClassificationIndex",
                    "Remark": "This classification index is used to index the classification in the library, where the library UUID and library types are only used for identification purposes for this index, preventing the indexes in different libraries from referring to each other and causing errors.",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "libraryType",
                            "Modifiers": "",
                            "Type": "ELIB_LibraryType",
                            "Description": "Library Type",
                            "link": "pro-api.elib_librarytype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_LibraryType"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_classificationindex.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "primaryClassificationUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Level 1 classification UUID",
                            "link": "pro-api.ilib_classificationindex.primaryclassificationuuid.html",
                            "Parameters": "",
                            "Declaration": "primaryClassificationUuid: string;"
                        },
                        {
                            "Property": "secondaryClassificationUuid?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Secondary Classification UUID",
                            "link": "pro-api.ilib_classificationindex.secondaryclassificationuuid.html",
                            "Parameters": "",
                            "Declaration": "secondaryClassificationUuid?: string;"
                        }
                    ]
                },
                "ILIB_DeviceItem": {
                    "description": "Device properties",
                    "url": "./pro-api.ilib_deviceitem.html",
                    "Signature": "export interface ILIB_DeviceItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "association",
                            "Modifiers": "",
                            "Type": "ILIB_DeviceAssociationItem",
                            "Description": "Related",
                            "link": "pro-api.ilib_deviceassociationitem.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_DeviceAssociationItem"
                        },
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Device Classification",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_deviceitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "libraryType",
                            "Modifiers": "readonly",
                            "Type": "ELIB_LibraryType.DEVICE",
                            "Description": "Library Type",
                            "link": "pro-api.elib_librarytype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_LibraryType"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_deviceitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Device name",
                            "link": "pro-api.ilib_deviceitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "property",
                            "Modifiers": "",
                            "Type": "ILIB_DeviceExtendPropertyItem",
                            "Description": "Extended properties",
                            "link": "pro-api.ilib_deviceextendpropertyitem.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_DeviceExtendPropertyItem"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Device UUID",
                            "link": "pro-api.ilib_deviceitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_DeviceAssociationItem": {
                    "description": "Device-associated symbol and footprint properties",
                    "url": "./pro-api.ilib_deviceassociationitem.html",
                    "Signature": "export interface ILIB_DeviceAssociationItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "footprint?",
                            "Modifiers": "",
                            "Type": "{ uuid: string; libraryUuid: string; }",
                            "Description": "(Optional) Package",
                            "link": "pro-api.ilib_deviceassociationitem.footprint.html",
                            "Parameters": "",
                            "Declaration": "footprint?: {\n        uuid: string;\n        libraryUuid: string;\n    };"
                        },
                        {
                            "Property": "footprintUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Encapsulation UUID",
                            "link": "pro-api.ilib_deviceassociationitem.footprintuuid.html",
                            "Parameters": "",
                            "Declaration": "footprintUuid: string;"
                        },
                        {
                            "Property": "images?",
                            "Modifiers": "",
                            "Type": "Array<string>",
                            "Description": "(Optional)",
                            "link": "pro-api.ilib_deviceassociationitem.images.html",
                            "Parameters": "",
                            "Declaration": "images?: Array<string>;"
                        },
                        {
                            "Property": "symbol",
                            "Modifiers": "",
                            "Type": "{ type: ELIB_SymbolType; uuid: string; libraryUuid: string; }",
                            "Description": "symbol",
                            "link": "pro-api.elib_symboltype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_SymbolType"
                        },
                        {
                            "Property": "symbolType",
                            "Modifiers": "",
                            "Type": "ELIB_SymbolType",
                            "Description": "Symbol Type",
                            "link": "pro-api.elib_symboltype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_SymbolType"
                        },
                        {
                            "Property": "symbolUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Symbol UUID",
                            "link": "pro-api.ilib_deviceassociationitem.symboluuid.html",
                            "Parameters": "",
                            "Declaration": "symbolUuid: string;"
                        }
                    ]
                },
                "ILIB_DeviceExtendPropertyItem": {
                    "description": "Device extended properties",
                    "url": "./pro-api.ilib_deviceextendpropertyitem.html",
                    "Signature": "export interface ILIB_DeviceExtendPropertyItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "addIntoBom?",
                            "Modifiers": "",
                            "Type": "boolean",
                            "Description": "(Optional) Join BOM",
                            "link": "pro-api.ilib_deviceextendpropertyitem.addintobom.html",
                            "Parameters": "",
                            "Declaration": "addIntoBom?: boolean;"
                        },
                        {
                            "Property": "addIntoPcb?",
                            "Modifiers": "",
                            "Type": "boolean",
                            "Description": "(Optional) Go to PCB",
                            "link": "pro-api.ilib_deviceextendpropertyitem.addintopcb.html",
                            "Parameters": "",
                            "Declaration": "addIntoPcb?: boolean;"
                        },
                        {
                            "Property": "designator?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) bit number",
                            "link": "pro-api.ilib_deviceextendpropertyitem.designator.html",
                            "Parameters": "",
                            "Declaration": "designator?: string;"
                        },
                        {
                            "Property": "manufacturer?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Manufacturer",
                            "link": "pro-api.ilib_deviceextendpropertyitem.manufacturer.html",
                            "Parameters": "",
                            "Declaration": "manufacturer?: string;"
                        },
                        {
                            "Property": "manufacturerId?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Manufacturer number",
                            "link": "pro-api.ilib_deviceextendpropertyitem.manufacturerid.html",
                            "Parameters": "",
                            "Declaration": "manufacturerId?: string;"
                        },
                        {
                            "Property": "name?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Name",
                            "link": "pro-api.ilib_deviceextendpropertyitem.name.html",
                            "Parameters": "",
                            "Declaration": "name?: string;"
                        },
                        {
                            "Property": "net?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Network",
                            "link": "pro-api.ilib_deviceextendpropertyitem.net.html",
                            "Parameters": "",
                            "Declaration": "net?: string;"
                        },
                        {
                            "Property": "otherProperty?",
                            "Modifiers": "",
                            "Type": "{ [key: string]: boolean | number | string | undefined; }",
                            "Description": "(Optional) Other parameters",
                            "link": "pro-api.ilib_deviceextendpropertyitem.otherproperty.html",
                            "Parameters": "",
                            "Declaration": "otherProperty?: {\n        [key: string]: boolean | number | string | undefined;\n    };"
                        },
                        {
                            "Property": "supplier?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Supplier",
                            "link": "pro-api.ilib_deviceextendpropertyitem.supplier.html",
                            "Parameters": "",
                            "Declaration": "supplier?: string;"
                        },
                        {
                            "Property": "supplierId?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Supplier number",
                            "link": "pro-api.ilib_deviceextendpropertyitem.supplierid.html",
                            "Parameters": "",
                            "Declaration": "supplierId?: string;"
                        }
                    ]
                },
                "ILIB_DeviceSearchItem": {
                    "description": "Searched device properties",
                    "url": "./pro-api.ilib_devicesearchitem.html",
                    "Signature": "export interface ILIB_DeviceSearchItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Device Classification",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_devicesearchitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "footprint?",
                            "Modifiers": "",
                            "Type": "{ name: string; uuid: string; libraryUuid: string; }",
                            "Description": "(Optional) Associative Encapsulation",
                            "link": "pro-api.ilib_devicesearchitem.footprint.html",
                            "Parameters": "",
                            "Declaration": "footprint?: {\n        name: string;\n        uuid: string;\n        libraryUuid: string;\n    };"
                        },
                        {
                            "Property": "footprintName?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Associated encapsulation name",
                            "link": "pro-api.ilib_devicesearchitem.footprintname.html",
                            "Parameters": "",
                            "Declaration": "footprintName?: string;"
                        },
                        {
                            "Property": "footprintUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Associated Encapsulation UUID",
                            "link": "pro-api.ilib_devicesearchitem.footprintuuid.html",
                            "Parameters": "",
                            "Declaration": "footprintUuid: string;"
                        },
                        {
                            "Property": "imageUuid?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Related Image UUID",
                            "link": "pro-api.ilib_devicesearchitem.imageuuid.html",
                            "Parameters": "",
                            "Declaration": "imageUuid?: string;"
                        },
                        {
                            "Property": "jlcInventory?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) JialiChuang Inventory",
                            "link": "pro-api.ilib_devicesearchitem.jlcinventory.html",
                            "Parameters": "",
                            "Declaration": "jlcInventory?: number;"
                        },
                        {
                            "Property": "jlcLibraryCategory?",
                            "Modifiers": "",
                            "Type": "ELIB_DeviceJlcLibraryCategory",
                            "Description": "(Optional) Jiali Chuangku Category",
                            "link": "pro-api.elib_devicejlclibrarycategory.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_DeviceJlcLibraryCategory"
                        },
                        {
                            "Property": "jlcPrice?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) Jialichuang Price",
                            "link": "pro-api.ilib_devicesearchitem.jlcprice.html",
                            "Parameters": "",
                            "Declaration": "jlcPrice?: number;"
                        },
                        {
                            "Property": "lcscInventory?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) Lichuang Mall Inventory",
                            "link": "pro-api.ilib_devicesearchitem.lcscinventory.html",
                            "Parameters": "",
                            "Declaration": "lcscInventory?: number;"
                        },
                        {
                            "Property": "lcscPrice?",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "(Optional) Lichuang Mall Price",
                            "link": "pro-api.ilib_devicesearchitem.lcscprice.html",
                            "Parameters": "",
                            "Declaration": "lcscPrice?: number;"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_devicesearchitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "manufacturer?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Manufacturer",
                            "link": "pro-api.ilib_devicesearchitem.manufacturer.html",
                            "Parameters": "",
                            "Declaration": "manufacturer?: string;"
                        },
                        {
                            "Property": "manufacturerId?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Manufacturer number",
                            "link": "pro-api.ilib_devicesearchitem.manufacturerid.html",
                            "Parameters": "",
                            "Declaration": "manufacturerId?: string;"
                        },
                        {
                            "Property": "model3D?",
                            "Modifiers": "",
                            "Type": "{ name: string; uuid: string; libraryUuid: string; }",
                            "Description": "(Optional) Associate 3D Model",
                            "link": "pro-api.ilib_devicesearchitem.model3d.html",
                            "Parameters": "",
                            "Declaration": "model3D?: {\n        name: string;\n        uuid: string;\n        libraryUuid: string;\n    };"
                        },
                        {
                            "Property": "model3DName?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Associate 3D model name",
                            "link": "pro-api.ilib_devicesearchitem.model3dname.html",
                            "Parameters": "",
                            "Declaration": "model3DName?: string;"
                        },
                        {
                            "Property": "model3DUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Associate 3D Model UUID",
                            "link": "pro-api.ilib_devicesearchitem.model3duuid.html",
                            "Parameters": "",
                            "Declaration": "model3DUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Device name",
                            "link": "pro-api.ilib_devicesearchitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "ordinal",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Sort",
                            "link": "pro-api.ilib_devicesearchitem.ordinal.html",
                            "Parameters": "",
                            "Declaration": "ordinal: number;"
                        },
                        {
                            "Property": "supplier?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Supplier",
                            "link": "pro-api.ilib_devicesearchitem.supplier.html",
                            "Parameters": "",
                            "Declaration": "supplier?: string;"
                        },
                        {
                            "Property": "supplierId?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Supplier number",
                            "link": "pro-api.ilib_devicesearchitem.supplierid.html",
                            "Parameters": "",
                            "Declaration": "supplierId?: string;"
                        },
                        {
                            "Property": "symbol",
                            "Modifiers": "",
                            "Type": "{ name: string; uuid: string; libraryUuid: string; }",
                            "Description": "Related symbols",
                            "link": "pro-api.ilib_devicesearchitem.symbol.html",
                            "Parameters": "",
                            "Declaration": "symbol: {\n\tname: string;\n\tuuid: string;\n\tlibraryUuid: string;\n}"
                        },
                        {
                            "Property": "symbolName",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Associated symbol name",
                            "link": "pro-api.ilib_devicesearchitem.symbolname.html",
                            "Parameters": "",
                            "Declaration": "symbolName: string;"
                        },
                        {
                            "Property": "symbolUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Associative symbol UUID",
                            "link": "pro-api.ilib_devicesearchitem.symboluuid.html",
                            "Parameters": "",
                            "Declaration": "symbolUuid: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Device UUID",
                            "link": "pro-api.ilib_devicesearchitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_FootprintItem": {
                    "description": "Footprint properties",
                    "url": "./pro-api.ilib_footprintitem.html",
                    "Signature": "export interface ILIB_FootprintItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_footprintitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "libraryType",
                            "Modifiers": "readonly",
                            "Type": "ELIB_LibraryType.FOOTPRINT",
                            "Description": "Library Type",
                            "link": "pro-api.elib_librarytype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_LibraryType"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_footprintitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Encapsulation name",
                            "link": "pro-api.ilib_footprintitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Encapsulation UUID",
                            "link": "pro-api.ilib_footprintitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_FootprintSearchItem": {
                    "description": "Searched footprint properties",
                    "url": "./pro-api.ilib_footprintsearchitem.html",
                    "Signature": "export interface ILIB_FootprintSearchItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "ascription",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Attribution",
                            "link": "pro-api.ilib_footprintsearchitem.ascription.html",
                            "Parameters": "",
                            "Declaration": "ascription: string;"
                        },
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_footprintsearchitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "lastModifiedBy",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Previous modified",
                            "link": "pro-api.ilib_footprintsearchitem.lastmodifiedby.html",
                            "Parameters": "",
                            "Declaration": "lastModifiedBy: string;"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_footprintsearchitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Encapsulation name",
                            "link": "pro-api.ilib_footprintsearchitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "ordinal",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Sort",
                            "link": "pro-api.ilib_footprintsearchitem.ordinal.html",
                            "Parameters": "",
                            "Declaration": "ordinal: number;"
                        },
                        {
                            "Property": "updateTimestamp",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Update time stamp",
                            "link": "pro-api.ilib_footprintsearchitem.updatetimestamp.html",
                            "Parameters": "",
                            "Declaration": "updateTimestamp: number;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Encapsulation UUID",
                            "link": "pro-api.ilib_footprintsearchitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_LibraryInfo": {
                    "description": "Library information",
                    "url": "./pro-api.ilib_libraryinfo.html",
                    "Signature": "export interface ILIB_LibraryInfo",
                    "Remark": "Contains the name of the library and its UUID",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library name",
                            "link": "pro-api.ilib_libraryinfo.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_libraryinfo.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_PanelLibraryItem": {
                    "description": "Panel library properties",
                    "url": "./pro-api.ilib_panellibraryitem.html",
                    "Signature": "export interface ILIB_PanelLibraryItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_panellibraryitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "libraryType",
                            "Modifiers": "readonly",
                            "Type": "ELIB_LibraryType.PANEL_LIBRARY",
                            "Description": "Library Type",
                            "link": "pro-api.elib_librarytype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_LibraryType"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_panellibraryitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Panel library name",
                            "link": "pro-api.ilib_panellibraryitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Panel Library UUID",
                            "link": "pro-api.ilib_panellibraryitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_PanelLibrarySearchItem": {
                    "description": "Searched panel library properties",
                    "url": "./pro-api.ilib_panellibrarysearchitem.html",
                    "Signature": "export interface ILIB_PanelLibrarySearchItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "ascription",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Attribution",
                            "link": "pro-api.ilib_panellibrarysearchitem.ascription.html",
                            "Parameters": "",
                            "Declaration": "ascription: string;"
                        },
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_panellibrarysearchitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "lastModifiedBy",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Previous modified",
                            "link": "pro-api.ilib_panellibrarysearchitem.lastmodifiedby.html",
                            "Parameters": "",
                            "Declaration": "lastModifiedBy: string;"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_panellibrarysearchitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Panel library name",
                            "link": "pro-api.ilib_panellibrarysearchitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "ordinal",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Sort",
                            "link": "pro-api.ilib_panellibrarysearchitem.ordinal.html",
                            "Parameters": "",
                            "Declaration": "ordinal: number;"
                        },
                        {
                            "Property": "updateTimestamp",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Update time stamp",
                            "link": "pro-api.ilib_panellibrarysearchitem.updatetimestamp.html",
                            "Parameters": "",
                            "Declaration": "updateTimestamp: number;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Panel Library UUID",
                            "link": "pro-api.ilib_panellibrarysearchitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_SymbolItem": {
                    "description": "Symbol properties",
                    "url": "./pro-api.ilib_symbolitem.html",
                    "Signature": "export interface ILIB_SymbolItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_symbolitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "libraryType",
                            "Modifiers": "readonly",
                            "Type": "ELIB_LibraryType.SYMBOL",
                            "Description": "Library Type",
                            "link": "pro-api.elib_librarytype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_LibraryType"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_symbolitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Symbol name",
                            "link": "pro-api.ilib_symbolitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "type",
                            "Modifiers": "",
                            "Type": "ELIB_SymbolType",
                            "Description": "Symbol Type",
                            "link": "pro-api.elib_symboltype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_SymbolType"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Symbol UUID",
                            "link": "pro-api.ilib_symbolitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                },
                "ILIB_SymbolSearchItem": {
                    "description": "Searched symbol properties",
                    "url": "./pro-api.ilib_symbolsearchitem.html",
                    "Signature": "export interface ILIB_SymbolSearchItem",
                    "Remark": "",
                    "Ref": "",
                    "Inherent": [
                        {
                            "Property": "ascription",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Attribution",
                            "link": "pro-api.ilib_symbolsearchitem.ascription.html",
                            "Parameters": "",
                            "Declaration": "ascription: string;"
                        },
                        {
                            "Property": "classification?",
                            "Modifiers": "",
                            "Type": "ILIB_ClassificationIndex",
                            "Description": "(Optional) Category",
                            "link": "pro-api.ilib_classificationindex.html",
                            "Parameters": "",
                            "Declaration": "export interface ILIB_ClassificationIndex"
                        },
                        {
                            "Property": "description?",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "(Optional) Description",
                            "link": "pro-api.ilib_symbolsearchitem.description.html",
                            "Parameters": "",
                            "Declaration": "description?: string;"
                        },
                        {
                            "Property": "lastModifiedBy",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Previous modified",
                            "link": "pro-api.ilib_symbolsearchitem.lastmodifiedby.html",
                            "Parameters": "",
                            "Declaration": "lastModifiedBy: string;"
                        },
                        {
                            "Property": "libraryUuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Library UUID",
                            "link": "pro-api.ilib_symbolsearchitem.libraryuuid.html",
                            "Parameters": "",
                            "Declaration": "libraryUuid: string;"
                        },
                        {
                            "Property": "name",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Symbol name",
                            "link": "pro-api.ilib_symbolsearchitem.name.html",
                            "Parameters": "",
                            "Declaration": "name: string;"
                        },
                        {
                            "Property": "ordinal",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Sort",
                            "link": "pro-api.ilib_symbolsearchitem.ordinal.html",
                            "Parameters": "",
                            "Declaration": "ordinal: number;"
                        },
                        {
                            "Property": "type",
                            "Modifiers": "",
                            "Type": "ELIB_SymbolType",
                            "Description": "Symbol Type",
                            "link": "pro-api.elib_symboltype.html",
                            "Parameters": "",
                            "Declaration": "export declare enum ELIB_SymbolType"
                        },
                        {
                            "Property": "updateTimestamp",
                            "Modifiers": "",
                            "Type": "number",
                            "Description": "Update time stamp",
                            "link": "pro-api.ilib_symbolsearchitem.updatetimestamp.html",
                            "Parameters": "",
                            "Declaration": "updateTimestamp: number;"
                        },
                        {
                            "Property": "uuid",
                            "Modifiers": "",
                            "Type": "string",
                            "Description": "Symbol UUID",
                            "link": "pro-api.ilib_symbolsearchitem.uuid.html",
                            "Parameters": "",
                            "Declaration": "uuid: string;"
                        }
                    ]
                }
            }
        }
    }
}